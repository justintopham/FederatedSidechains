<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Stratis.Bitcoin</name>
    </assembly>
    <members>
        <member name="T:Stratis.Bitcoin.Base.BaseFeature">
            <summary>
            Base node services, these are the services a node has to have.
            The ConnectionManager feature is also part of the base but may go in a feature of its own.
            The base features are the minimal components required to connect to peers and maintain the best chain.
            <para>
            The base node services for a node are:
            <list type="bullet">
            <item>the ConcurrentChain to keep track of the best chain,</item>
            <item>the ConnectionManager to connect with the network,</item>
            <item>DatetimeProvider and Cancellation,</item>
            <item>CancellationProvider and Cancellation,</item>
            <item>DataFolder,</item>
            <item>ChainState.</item>
            </list>
            </para>
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.BaseFeature.nodeLifetime">
            <summary>Global application life cycle control - triggers when application shuts down.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.BaseFeature.chainState">
            <summary>Information about node's chain.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.BaseFeature.chainRepository">
            <summary>Access to the database of blocks.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.BaseFeature.nodeSettings">
            <summary>User defined node settings.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.BaseFeature.dataFolder">
            <summary>Locations of important folders and files on disk.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.BaseFeature.chain">
            <summary>Thread safe chain of block headers from genesis.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.BaseFeature.connectionManager">
            <summary>Manager of node's network connections.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.BaseFeature.dateTimeProvider">
            <summary>Provider of time functions.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.BaseFeature.asyncLoopFactory">
            <summary>Factory for creating background async loop tasks.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.BaseFeature.logger">
            <summary>Logger for the node.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.BaseFeature.loggerFactory">
            <summary>Factory for creating loggers.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.BaseFeature.timeSyncBehaviorState">
            <summary>State of time synchronization feature that stores collected data samples.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.BaseFeature.peerAddressManager">
            <summary>Manager of node's network peers.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.BaseFeature.flushAddressManagerLoop">
            <summary>Periodic task to save list of peers to disk.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.BaseFeature.flushChainLoop">
            <summary>Periodic task to save the chain to the database.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.BaseFeature.peerBanning">
            <summary>A handler that can manage the lifetime of network peers.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.BaseFeature.initialBlockDownloadState">
            <summary>Provider of IBD state.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.BaseFeature.network">
            <inheritdoc cref="T:NBitcoin.Network"/>
        </member>
        <member name="F:Stratis.Bitcoin.Base.BaseFeature.finalizedBlockInfoRepository">
            <inheritdoc cref="T:Stratis.Bitcoin.IFinalizedBlockInfoRepository"/>
        </member>
        <member name="F:Stratis.Bitcoin.Base.BaseFeature.partialValidator">
            <inheritdoc cref="T:Stratis.Bitcoin.Consensus.Validators.IPartialValidator"/>
        </member>
        <member name="M:Stratis.Bitcoin.Base.BaseFeature.InitializeAsync">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Base.BaseFeature.StartChainAsync">
            <summary>
            Initializes node's chain repository.
            Creates periodic task to persist changes to the database.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Base.BaseFeature.StartAddressManager(Stratis.Bitcoin.P2P.Peer.NetworkPeerConnectionParameters)">
            <summary>
            Initializes node's address manager. Loads previously known peers from the file
            or creates new peer file if it does not exist. Creates periodic task to persist changes
            in peers to disk.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Base.BaseFeature.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Base.FullNodeBuilderBaseFeatureExtension">
            <summary>
            A class providing extension methods for <see cref="T:Stratis.Bitcoin.Builder.IFullNodeBuilder"/>.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Base.FullNodeBuilderBaseFeatureExtension.UseBaseFeature(Stratis.Bitcoin.Builder.IFullNodeBuilder)">
            <summary>
            Makes the full node use all the required features - <see cref="T:Stratis.Bitcoin.Base.BaseFeature"/>.
            </summary>
            <param name="fullNodeBuilder">Builder responsible for creating the node.</param>
            <returns>Full node builder's interface to allow fluent code.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Base.IChainRepository.LoadAsync(NBitcoin.ChainedHeader)">
            <summary>Loads the chain of headers from the database.</summary>
            <returns>Tip of the loaded chain.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Base.IChainRepository.SaveAsync(NBitcoin.ConcurrentChain)">
            <summary>Persists chain of headers to the database.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.ChainRepository.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.ChainRepository.dbreeze">
            <summary>Access to DBreeze database.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Base.ChainRepository.LoadAsync(NBitcoin.ChainedHeader)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Base.ChainRepository.SaveAsync(NBitcoin.ConcurrentChain)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Base.ChainRepository.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Base.IChainState">
            <summary>
            Chain state holds various information related to the status of the chain and its validation.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Base.IChainState.ConsensusTip">
            <summary>ChainBehaviors sharing this state will not broadcast headers which are above <see cref="P:Stratis.Bitcoin.Base.IChainState.ConsensusTip"/>.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Base.IChainState.BlockStoreTip">
            <summary>The highest stored block in the repository or <c>null</c> if block store feature is not enabled.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Base.IChainState.IsAtBestChainTip">
            <summary>Indicates whether consensus tip is equal to the tip of the most advanced peer node is connected to.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Base.IChainState.MaxReorgLength">
            <summary>Maximal length of reorganization that the node is willing to accept, or 0 to disable long reorganization protection.</summary>
            <remarks>TODO: This should be removed once consensus options are part of network.</remarks>
        </member>
        <member name="T:Stratis.Bitcoin.Base.ChainState">
            <summary>
            Chain state holds various information related to the status of the chain and its validation.
            The data are provided by different components and the chaine state is a mechanism that allows
            these components to share that data without creating extra dependencies.
            </summary>
            TODO this class should be removed since consensus and block store are moved or about to be moved to base feature
        </member>
        <member name="P:Stratis.Bitcoin.Base.ChainState.ConsensusTip">
            <inheritdoc />
        </member>
        <member name="P:Stratis.Bitcoin.Base.ChainState.BlockStoreTip">
            <inheritdoc />
        </member>
        <member name="P:Stratis.Bitcoin.Base.ChainState.IsAtBestChainTip">
            <inheritdoc />
        </member>
        <member name="P:Stratis.Bitcoin.Base.ChainState.MaxReorgLength">
            <summary>Maximal length of reorganization that the node is willing to accept, or 0 to disable long reorganization protection.</summary>
            <remarks>TODO: This should be removed once consensus options are part of network.</remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Base.Deployments.DeploymentFlags.EnforceBIP30ForBlock(NBitcoin.ChainedHeader)">
            <summary>Calculates if BIP30 should be enforced for given block.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.Deployments.NodeDeployments.network">
            <summary>Specification of the network the node runs on - regtest/testnet/mainnet.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.Deployments.NodeDeployments.chain">
            <summary>Thread safe access to the best chain of block headers (that the node is aware of) from genesis.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Base.Deployments.ThresholdConditionCache.#ctor(NBitcoin.IConsensus)">
            <summary>
            Constructs this object containing the BIP9 deployment states cache.
            </summary>
            <param name="consensus">Records the consensus object containing the activation parameters.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Base.Deployments.ThresholdConditionCache.GetStates(NBitcoin.ChainedHeader)">
            <summary>
            Get the states of all BIP 9 deployments listed in the <see cref="!:BIP9Deployments"/> enumeration.
            </summary>
            <param name="pindexPrev">The previous header of the block to determine the states for.</param>
            <returns>An array of <see cref="T:Stratis.Bitcoin.Base.Deployments.ThresholdState"/> objects.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Base.Deployments.ThresholdConditionCache.GetState(NBitcoin.ChainedHeader,System.Int32)">
            <summary>
            Determines the state of a BIP from the cache and/or the chain header history and the corresponding version bits.
            </summary>
            <param name="indexPrev">The previous header of the chain header to determine the states for.</param>
            <param name="deployment">The deployment to check the state of.</param>
            <returns>The current state of the deployment.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Base.Deployments.ThresholdConditionCache.Get(NBitcoin.uint256,System.Int32)">
            <summary>
            Gets the activation state within a given block of a specific BIP9 deployment.
            </summary>
            <param name="hash">The block hash to determine the BIP9 activation state for.</param>
            <param name="deployment">The deployment for which to determine the activation state.</param>
            <returns>The activation state.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Base.Deployments.ThresholdConditionCache.Set(NBitcoin.uint256,System.Int32,Stratis.Bitcoin.Base.Deployments.ThresholdState)">
            <summary>
            Sets the activation state for a given block of a specific BIP9 deployment.
            </summary>
            <param name="hash">The block hash to set the BIP9 activation state for.</param>
            <param name="deployment">The deployment for which to set the activation state.</param>
            <param name="state">The activation state to set.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Base.Deployments.ThresholdConditionCache.ContainsKey(NBitcoin.uint256,System.Int32)">
            <summary>
            Determines if the activation state is available for a given block hash for a specific deployment.
            </summary>
            <param name="hash">The block hash to determine the BIP9 activation state for.</param>
            <param name="deployment">The deployment for which to determine the activation state.</param>
            <returns>Returns <c>true</c> if the state is available and <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Base.Deployments.ThresholdConditionCache.Condition(NBitcoin.ChainedHeader,System.Int32)">
            <summary>
            Inspects the chain header to determine whether the version bit of a deployment is active.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Base.Deployments.ThresholdConditionCache.Mask(System.Int32)">
            <summary>
            Returns the bit mask of the bit representing a specific deployment within the version bits.
            </summary>
            <param name="deployment">The BIP9 deployment to return the bit mask for.</param>
            <returns>The bit mask of the bit representing the deployment within the version bits.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Base.Deployments.ThresholdConditionCache.Assert(System.Boolean)">
            <summary>
            Throws an 'Assertion failed' exception if the passed argument is <c>false</c>.
            </summary>
            <param name="v">The passed argument which, if false, raises a 'Assertion Failed' exception.</param>
        </member>
        <member name="T:Stratis.Bitcoin.Base.InitialBlockDownloadState">
            <summary>
            Provides IBD (Initial Block Download) state.
            </summary>
            <seealso cref="T:Stratis.Bitcoin.Interfaces.IInitialBlockDownloadState" />
        </member>
        <member name="F:Stratis.Bitcoin.Base.InitialBlockDownloadState.dateTimeProvider">
            <summary>A provider of the date and time.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.InitialBlockDownloadState.checkpoints">
            <summary>Provider of block header hash checkpoints.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.InitialBlockDownloadState.chainState">
            <summary>Information about node's chain.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.InitialBlockDownloadState.network">
            <summary>Specification of the network the node runs on - regtest/testnet/mainnet.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.InitialBlockDownloadState.consensusSettings">
            <summary>User defined consensus settings.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Base.InitialBlockDownloadState.#ctor(Stratis.Bitcoin.Base.IChainState,NBitcoin.Network,Stratis.Bitcoin.Configuration.Settings.ConsensusSettings,Stratis.Bitcoin.Consensus.ICheckpoints)">
            <summary>
            Creates a new instance of the <see cref="T:Stratis.Bitcoin.Base.InitialBlockDownloadState" /> class.
            </summary>
            <param name="chainState">Information about node's chain.</param>
            <param name="network">Specification of the network the node runs on - regtest/testnet/mainnet.</param>
            <param name="consensusSettings">Configurable settings for the consensus feature.</param>
            <param name="checkpoints">Provider of block header hash checkpoints.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Base.InitialBlockDownloadState.IsInitialBlockDownload">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Base.IInvalidBlockHashStore">
            <summary>
            Contract of a store of block header hashes that are considered invalid.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Base.IInvalidBlockHashStore.IsInvalid(NBitcoin.uint256)">
            <summary>
            Check if a block is marked as invalid.
            </summary>
            <param name="hashBlock">The block hash to check.</param>
            <returns><c>true</c> if the block is marked as invalid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Base.IInvalidBlockHashStore.MarkInvalid(NBitcoin.uint256,System.Nullable{System.DateTime})">
            <summary>
            Marks a block as invalid.
            </summary>
            <param name="hashBlock">The block hash to mark as invalid.</param>
            <param name="rejectedUntil">Time in UTC after which the block is no longer considered as invalid, or <c>null</c> if the block is to be considered invalid forever.</param>
        </member>
        <member name="T:Stratis.Bitcoin.Base.InvalidBlockHashStore">
            <summary>
            In memory store of invalid block header hashes.
            </summary>
            <remarks>
            The store has a limited capacity. When a new block header hash is marked as invalid
            once the capacity is reached, the oldest entry is removed and no longer considered invalid.
            <para>
            Entries with specified expiration time are either removed just like other entries - i.e. during
            an add operation when a capacity is reached, or they are removed when they are touched
            and it is detected that their expiration time is no longer in the future.
            </para>
            </remarks>
        </member>
        <member name="F:Stratis.Bitcoin.Base.InvalidBlockHashStore.DefaultCapacity">
            <summary>Default value for the maximal number of hashes we can store.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.InvalidBlockHashStore.dateTimeProvider">
            <summary>A provider of the date and time.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.InvalidBlockHashStore.lockObject">
            <summary>Lock object to protect access to <see cref="F:Stratis.Bitcoin.Base.InvalidBlockHashStore.invalidBlockHashesExpirations"/> and <see cref="F:Stratis.Bitcoin.Base.InvalidBlockHashStore.orderedHashList"/>.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.InvalidBlockHashStore.invalidBlockHashesExpirations">
            <summary>
            Collection of block header hashes that are to be considered invalid. If the value of the entry is not <c>null</c>,
            the entry is considered invalid only for a certain amount of time.
            </summary>
            <remarks>All access to this object has to be protected by <see cref="F:Stratis.Bitcoin.Base.InvalidBlockHashStore.lockObject"/>.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.Base.InvalidBlockHashStore.orderedHashList">
            <summary>Circular array of block header hash entries to allow quick removal of the oldest entry once the capacity is reached.</summary>
            <remarks>
            All access to this object has to be protected by <see cref="F:Stratis.Bitcoin.Base.InvalidBlockHashStore.lockObject"/>.
            <para>The field is internal for testing purposes.</para>
            </remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Base.InvalidBlockHashStore.#ctor(Stratis.Bitcoin.Utilities.IDateTimeProvider,System.Int32)">
            <summary>
            Initializes the instance of the object.
            </summary>
            <param name="capacity">Maximal number of hashes we can store.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Base.InvalidBlockHashStore.IsInvalid(NBitcoin.uint256)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Base.InvalidBlockHashStore.MarkInvalid(NBitcoin.uint256,System.Nullable{System.DateTime})">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Base.ITimeSyncBehaviorState">
            <summary>
            Methods related to network peers time synchronization feature.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Base.ITimeSyncBehaviorState.AddTimeData(System.Net.IPAddress,System.TimeSpan,System.Boolean)">
            <summary>
            Adds a time offset sample to the internal database of samples.
            <para></para>
            </summary>
            <param name="peerAddress">IP address of the peer that the sample relates to.</param>
            <param name="offsetSample">Difference in the peer's time and our system time.</param>
            <param name="isInboundConnection"><c>true</c> if the sample comes from a peer that connected to our node,
            <c>false</c> if the sample comes from a peer that our node connected to.</param>
            <returns><c>true</c> if the sample was added to the mix, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Stratis.Bitcoin.Base.ITimeSyncBehaviorState.IsSystemTimeOutOfSync">
            <summary> A value indicating whether the system time is not in sync and needs adjustment. </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Base.TimeSyncBehaviorState">
            <summary>
            State of time synchronization feature that stores collected data samples
            and calculates adjustments to system time.
            </summary>
            <remarks>
            Bitcoin introduced so called adjusted time, which is implemented as a time offset added
            to node's system time. The offset is result of time syncing feature with network peers that
            collects samples from "version" network message from anyone who connects with our node
            (in any direction). The median of the collected samples is used as the final time offset
            the node uses to calculate the adjusted time.
            <para>
            The actual source of adjusted time is <see cref="T:Stratis.Bitcoin.Utilities.IDateTimeProvider"/>. It is the logic
            behind its calculation and collection of samples that resides in this class. This class
            modifies the date time provider using its interface every time a new time offset sample
            that affects the final offset is collected.
            </para>
            <para>
            Bitcoin allowed up to 70 minutes of time adjustment to be made using this mechanism.
            However, Bitcoin also allowed the blocks to be mined with timestamps that are off by up
            to 2 hours. This is very unlike Stratis' POS, which uses very narrow windows for block
            timestamps. This is why we implemented our mechanism of time syncing with peers
            and adjusted time calculation slightly differently.
            </para>
            <para>
            We also collect samples from network "version" messages and calculate time difference
            for every peer. We DO distinguish between inbound and outbound connections, however.
            We consider inbound connections as less reliable sources of information and we introduce
            <see cref="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.OffsetWeightSecurityConstant"/> to reflect that. We keep outbound time offset
            samples separated from inbound samples. Our final offset is also a median of collected
            samples, but outbound samples have much greater weight in the median calculation
            as per the given weight, which is dynamically adjusted depending on the inbound outbound ratio
            in order to protect us from all inbound and an accepted percentage of outbound.
            </para>
            <para>
            Bitcoin's implementation only allows certain number of samples to be collected
            and once the limit is reached, no more samples are allowed. We do not replicate this
            behavior and we implement circular array to store the time offset samples.
            This means that once the limit is reached, we replace oldest samples with the new ones.
            </para>
            <para>
            Finally, as the POS chain is much more sensitive to correct time settings, our user
            alerting mechanism is triggered much earlier (for much lower time difference) than
            the one in Bitcoin.
            </para>
            </remarks>
        </member>
        <member name="T:Stratis.Bitcoin.Base.TimeSyncBehaviorState.TimestampOffsetSample">
            <summary>
            Description of a single timestamp offset sample from a peer.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Base.TimeSyncBehaviorState.TimestampOffsetSample.TimeOffset">
            <summary>Difference of the peer's time to our system time.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Base.TimeSyncBehaviorState.TimestampOffsetSample.Source">
            <summary>IP address of the peer that provided this sample.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.MaxInboundSamples">
            <summary>Maximal number of samples to keep inside <see cref="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.inboundTimestampOffsets"/>.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.MaxOutboundSamples">
            <summary>Maximal number of samples to keep inside <see cref="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.outboundTimestampOffsets"/>.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.OffsetWeightSecurityConstant">
            <summary>
            The value of 3 provides enough security to be protected against up to 33.3% of outbound samples being malicious and all inbound being malicious.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.TimeOffsetWarningThresholdSeconds">
            <summary>Maximal value for <see cref="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.timeOffset"/> in seconds that does not trigger warnings to user.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.MaxTimeOffsetSeconds">
            <summary>
            Maximal value for <see cref="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.timeOffset"/>. If the newly calculated value is over this limit,
            the time syncing feature will be switched off.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.MinOutboundSampleCount">
            <summary>
            Minimal amount of outbound samples that should be collected before time adjustment <see cref="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.timeOffset"/> is changed.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.dateTimeProvider">
            <summary>Provider of time functions.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.asyncLoopFactory">
            <summary>Factory for creating background async loop tasks.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.nodeLifetime">
            <summary>Global application life cycle control - triggers when application shuts down.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.network">
            <summary>The network the node is running on.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.lockObject">
            <summary>Lock object to protect access to <see cref="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.timeOffset"/>, <see cref="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.inboundTimestampOffsets"/>, <see cref="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.outboundTimestampOffsets"/>,
            <see cref="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.inboundSampleSources"/>, <see cref="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.outboundSampleSources"/>.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.timeOffset">
            <summary>Time difference that the behavior adds to the system time to form adjusted time.</summary>
            <remarks>All access to this object has to be protected by <see cref="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.lockObject"/>.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.inboundTimestampOffsets">
            <summary>List of timestamp offset samples from peers that connected to our node.</summary>
            <remarks>All access to this object has to be protected by <see cref="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.lockObject"/>.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.outboundTimestampOffsets">
            <summary>List of timestamp offset samples from peers that our node connected to.</summary>
            <remarks>All access to this object has to be protected by <see cref="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.lockObject"/>.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.inboundSampleSources">
            <summary>List of IP addresses of peers that provided samples in <see cref="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.inboundSampleSources"/>.</summary>
            <remarks>All access to this object has to be protected by <see cref="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.lockObject"/>.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.outboundSampleSources">
            <summary>List of IP addresses of peers that provided samples in <see cref="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.outboundTimestampOffsets"/>.</summary>
            <remarks>All access to this object has to be protected by <see cref="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.lockObject"/>.</remarks>
        </member>
        <member name="P:Stratis.Bitcoin.Base.TimeSyncBehaviorState.SwitchedOff">
            <summary><c>true</c> if the time sync with peers has been switched off, <c>false</c> otherwise.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Base.TimeSyncBehaviorState.SwitchedOffLimitReached">
            <summary>
            <c>true</c> if the reason for switching the time sync feature off was that <see cref="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.timeOffset"/>
            went over the maximal allowed value, <c>false</c> otherwise.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.warningLoop">
            <summary>Periodically shows a console warning to inform the user that the system time needs adjustment,
            otherwise the node may not perform correctly on the network.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Base.TimeSyncBehaviorState.IsSystemTimeOutOfSync">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.Base.TimeSyncBehaviorState.#ctor(Stratis.Bitcoin.Utilities.IDateTimeProvider,Stratis.Bitcoin.Utilities.INodeLifetime,Stratis.Bitcoin.Utilities.IAsyncLoopFactory,Microsoft.Extensions.Logging.ILoggerFactory,NBitcoin.Network)">
            <summary>
            Initializes a new instance of the object.
            </summary>
            <param name="dateTimeProvider">Provider of time functions.</param>
            <param name="nodeLifetime">Global application life cycle control - triggers when application shuts down.</param>
            <param name="asyncLoopFactory">Factory for creating background async loop tasks.</param>
            <param name="loggerFactory">Factory for creating loggers.</param>
            <param name="network">The network the node is running on.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Base.TimeSyncBehaviorState.AddTimeData(System.Net.IPAddress,System.TimeSpan,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Base.TimeSyncBehaviorState.RecalculateTimeOffsetLocked">
            <summary>
            Calculates a new value for <see cref="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.timeOffset"/> based on existing samples.
            </summary>
            <remarks>
            The caller of this method is responsible for holding <see cref="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.lockObject"/>.
            <para>
            The function takes a single copy of each inbound sample and combines them with a dynamic number of
            copies of the outbound samples in order to maintain the <see cref="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.OffsetWeightSecurityConstant"/>.
            </para>
            <para>
            When there are many more inbound samples than outbound, which could be the case
            in a malicious attack, the security is still maintained by using a dynamic inbound/outbound
            ratio multiplier ratio on the outbound samples that maintains the accepted level of security.
            </para>
            <para>
            We require to have at least <see cref="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.MinOutboundSampleCount"/> outbound samples to change the value of <see cref="F:Stratis.Bitcoin.Base.TimeSyncBehaviorState.timeOffset"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Base.TimeSyncBehaviorState.StartWarningLoop">
            <summary>
            Starts a loop that warns user via console message about problems with system time settings.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Base.TimeSyncBehaviorState.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Base.TimeSyncBehavior">
            <summary>
            Node behavior that collects time offset samples from network "version" messages
            from each peer.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.TimeSyncBehavior.loggerFactory">
            <summary>Factory for creating loggers.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.TimeSyncBehavior.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.TimeSyncBehavior.state">
            <summary>Shared state among time sync behaviors that holds list of obtained samples.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.TimeSyncBehavior.dateTimeProvider">
            <summary>Provider of time functions.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Base.TimeSyncBehavior.#ctor(Stratis.Bitcoin.Base.ITimeSyncBehaviorState,Stratis.Bitcoin.Utilities.IDateTimeProvider,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the object.
            </summary>
            <param name="state">Shared state among time sync behaviors.</param>
            <param name="dateTimeProvider">Provider of time functions.</param>
            <param name="loggerFactory">Factory for creating loggers.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Base.TimeSyncBehavior.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Base.TimeSyncBehavior.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Base.TimeSyncBehavior.Clone">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Base.TimeSyncBehavior.OnMessageReceivedAsync(Stratis.Bitcoin.P2P.Peer.INetworkPeer,Stratis.Bitcoin.P2P.Protocol.IncomingMessage)">
            <summary>
            Event handler that is called when the node receives a network message from the attached peer.
            </summary>
            <param name="peer">Peer that sent us the message.</param>
            <param name="message">Received message.</param>
            <remarks>
            This handler only cares about "verack" messages, which are only sent once per node
            and at the time they are sent the time offset information is parsed by underlaying logic.
            <para>
            Note that it is not possible to use "version" message here as <see cref="T:Stratis.Bitcoin.P2P.Peer.INetworkPeer"/>
            does not deliver this message for inbound peers to node behaviors.
            </para>
            </remarks>
        </member>
        <member name="T:Stratis.Bitcoin.Base.ITipProvider">
            <summary>Interface that every tip provider that uses <see cref="T:Stratis.Bitcoin.Base.ITipsManager"/> should implement.</summary>
        </member>
        <member name="T:Stratis.Bitcoin.Base.ITipsManager">
            <summary>Component that keeps track of highest common tip between components that can have a tip.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Base.ITipsManager.Initialize(NBitcoin.ChainedHeader)">
            <summary>Initializes <see cref="T:Stratis.Bitcoin.Base.ITipsManager"/>.</summary>
            <param name="highestHeader">Tip of chain of headers.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Base.ITipsManager.RegisterTipProvider(Stratis.Bitcoin.Base.ITipProvider)">
            <summary>Registers provider of a tip.</summary>
            <remarks>Common tip is selected by finding fork point between tips provided by all registered providers.</remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Base.ITipsManager.GetLastCommonTip">
            <summary>Provides highest tip commited between all registered components.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Base.ITipsManager.CommitTipPersisted(Stratis.Bitcoin.Base.ITipProvider,NBitcoin.ChainedHeader)">
            <summary>
            Commits persisted tip of a component.
            </summary>
            <remarks>
            Commiting a particular tip would mean that in case node is killed immediately component that
            commited such a tip would be able to recover on startup to it or any tip that is ancestor to tip commited.
            </remarks>
        </member>
        <member name="F:Stratis.Bitcoin.Base.TipsManager.tipsByProvider">
            <summary>Highest commited tips mapped by their providers.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.TipsManager.lastCommonTip">
            <summary>Highest tip commited between all registered components.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.TipsManager.lockObject">
            <summary>Protects all access to <see cref="F:Stratis.Bitcoin.Base.TipsManager.tipsByProvider"/> and write access to <see cref="F:Stratis.Bitcoin.Base.TipsManager.lastCommonTip"/>.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.TipsManager.newCommonTipSetEvent">
            <summary>Triggered when <see cref="F:Stratis.Bitcoin.Base.TipsManager.lastCommonTip"/> is updated.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Base.TipsManager.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Base.TipsManager.Initialize(NBitcoin.ChainedHeader)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Base.TipsManager.PersistCommonTipContinuouslyAsync">
            <summary>Continuously persists <see cref="F:Stratis.Bitcoin.Base.TipsManager.lastCommonTip"/> to hard drive.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Base.TipsManager.RegisterTipProvider(Stratis.Bitcoin.Base.ITipProvider)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Base.TipsManager.GetLastCommonTip">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Base.TipsManager.CommitTipPersisted(Stratis.Bitcoin.Base.ITipProvider,NBitcoin.ChainedHeader)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Base.TipsManager.FindCommonFork(System.Collections.Generic.List{NBitcoin.ChainedHeader})">
            <summary>Finds common fork between multiple chains.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Base.TipsManager.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.BlockPulling.AssignedDownload">
            <summary>Represents a single download assignment to a peer.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.AssignedDownload.JobId">
            <summary>Unique identifier of a job to which this assignment belongs.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.AssignedDownload.PeerId">
            <summary>Id of a peer that was assigned to deliver a block.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.AssignedDownload.AssignedTime">
            <summary>Time when download was assigned to a peer.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.AssignedDownload.Header">
            <summary>Header of a block associated with this assignment.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.AssignedDownload.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.BlockPulling.IBlockPuller">
            <summary>
            Thread-safe block puller which allows downloading blocks from all chains that the node is aware of.
            </summary>
            <remarks>
            It implements relative quality scoring for peers that are used for delivering requested blocks.
            <para>
            If peer that was assigned an important download fails to deliver in maximum allowed time, all his assignments will be reassigned.
            Reassigned downloads are processed with high priority comparing to regular requests.
            Blocks that are close to the node's consensus tip or behind it are considered to be important.
            </para>
            <para>
            Maximum amount of blocks that can be simultaneously downloaded depends on total speed of all peers that are capable of delivering blocks.
            </para>
            <para>
            We never wait for the same block to be delivered from more than 1 peer at once, so in case peer was removed from the assignment
            and delivered after that we will discard delivered block from this peer.
            </para>
            </remarks>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.IBlockPuller.RequestPeerServices(Stratis.Bitcoin.P2P.Protocol.Payloads.NetworkPeerServices)">
            <summary>
            Adds required services to list of services that are required from all peers.
            </summary>
            <remarks>
            In case some of the peers that we are already requesting block from don't support new
            service requirements those peers will be released from their assignments.
            </remarks>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.IBlockPuller.GetAverageBlockSizeBytes">
            <summary>Gets the average size of a block based on sizes of blocks that were previously downloaded.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.IBlockPuller.OnIbdStateChanged(System.Boolean)">
            <summary>Updates puller behaviors when IDB state is changed.</summary>
            <remarks>Should be called when IBD state was changed or first calculated.</remarks>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.IBlockPuller.NewPeerTipClaimed(Stratis.Bitcoin.P2P.Peer.INetworkPeer,NBitcoin.ChainedHeader)">
            <summary>Updates puller's view of peer's tip.</summary>
            <remarks>Should be called when a peer claims a new tip.</remarks>
            <param name="peer">The peer.</param>
            <param name="newTip">New tip.</param>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.IBlockPuller.PeerDisconnected(System.Int32)">
            <summary>Removes information about the peer from the inner structures.</summary>
            <remarks>Adds download jobs that were assigned to this peer to reassign queue.</remarks>
            <param name="peerId">Unique peer identifier.</param>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.IBlockPuller.RequestBlocksDownload(System.Collections.Generic.List{NBitcoin.ChainedHeader},System.Boolean)">
            <summary>Requests the blocks for download.</summary>
            <remarks>Doesn't support asking for the same hash twice before getting a response.</remarks>
            <param name="headers">Collection of consecutive headers (but gaps are ok: a1=a2=a3=a4=a8=a9).</param>
            <param name="highPriority">If <c>true</c> headers will be assigned to peers before the headers that were asked normally.</param>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.IBlockPuller.PushBlock(NBitcoin.uint256,NBitcoin.Block,System.Int32)">
            <summary>Removes assignments for the block which has been delivered by the peer assigned to it and calls the callback.</summary>
            <remarks>
            This method is called for all blocks that were delivered. It is possible that block that wasn't requested
            from that peer or from any peer at all is delivered, in that case the block will be ignored.
            It is possible that block was reassigned from a peer who delivered it later, in that case it will be ignored from this peer.
            </remarks>
            <param name="blockHash">The block hash.</param>
            <param name="block">The block.</param>
            <param name="peerId">ID of a peer that delivered a block.</param>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPuller.StallingLoopIntervalMs">
            <summary>Interval between checking if peers that were assigned important blocks didn't deliver the block.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPuller.MinEmptySlotsPercentageToStartProcessingTheQueue">
            <summary>The minimum empty slots percentage to start processing <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.downloadJobsQueue"/>.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPuller.ImportantHeightMargin">
            <summary>
            Defines which blocks are considered to be important.
            If requested block height is less than out consensus tip height plus this value then the block is considered to be important.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPuller.MaxSecondsToDeliverBlock">
            <summary>The maximum time in seconds in which peer should deliver an assigned block.</summary>
            <remarks>If peer fails to deliver in that time his assignments will be released and the peer penalized.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPuller.PeerSpeedLimitWhenNotInIbdBytesPerSec">
            <summary>This affects quality score only. If the peer is too fast don't give him all the assignments in the world when not in IBD.</summary>
        </member>
        <member name="T:Stratis.Bitcoin.BlockPulling.BlockPuller.OnBlockDownloadedCallback">
            <param name="blockHash">Hash of the delivered block.</param>
            <param name="block">The block.</param>
            <param name="peerId">The ID of a peer that delivered the block.</param>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPuller.onDownloadedCallback">
            <summary>Callback which is called when puller received a block which it was asked for.</summary>
            <remarks>Provided by the component that creates the block puller.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPuller.reassignedJobsQueue">
            <summary>Queue of download jobs which were released from the peers that failed to deliver in time or were disconnected.</summary>
            <remarks>This object has to be protected by <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.queueLock"/>.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPuller.downloadJobsQueue">
            <summary>Queue of download jobs which should be assigned to peers.</summary>
            <remarks>This object has to be protected by <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.queueLock"/>.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPuller.assignedDownloadsByHash">
            <summary>Collection of all download assignments to the peers sorted by block height.</summary>
            <remarks>This object has to be protected by <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.assignedLock"/>.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPuller.assignedDownloadsSorted">
            <summary>Assigned downloads sorted by block height.</summary>
            <remarks>This object has to be protected by <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.assignedLock"/>.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPuller.assignedHeadersByPeerId">
            <summary>Assigned headers mapped by peer ID.</summary>
            <remarks>This object has to be protected by <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.assignedLock"/>.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPuller.pullerBehaviorsByPeerId">
            <summary>Block puller behaviors mapped by peer ID.</summary>
            <remarks>This object has to be protected by <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.peerLock"/>.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPuller.cancellationSource">
            <summary>The cancellation source that indicates that component's shutdown was triggered.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPuller.averageBlockSizeBytes">
            <summary>The average block size in bytes calculated used up to <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.AverageBlockSizeSamplesCount"/> most recent samples.</summary>
            <remarks>Write access to this object has to be protected by <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.queueLock" />.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPuller.AverageBlockSizeSamplesCount">
            <summary>Amount of samples that should be used for average block size calculation.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPuller.MinimalCountOfBlocksBeingDownloaded">
            <summary>The minimal count of blocks that we can ask for simultaneous download.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPuller.MaxBlocksBeingDownloadedMultiplier">
            <summary>The maximum blocks being downloaded multiplier. Value of <c>1.1</c> means that we will ask for 10% more than we estimated peers can deliver.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPuller.processQueuesSignal">
            <summary>Signaler that triggers <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.reassignedJobsQueue"/> and <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.downloadJobsQueue"/> processing when set.</summary>
            <remarks>This object has to be protected by <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.queueLock"/>.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPuller.nextJobId">
            <summary>Unique identifier which will be set to the next created download job.</summary>
            <remarks>This object has to be protected by <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.queueLock"/>.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPuller.peerLock">
            <summary>Locks access to <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.pullerBehaviorsByPeerId"/> and <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.networkPeerRequirement"/>.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPuller.queueLock">
            <summary>
            Locks access to <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.processQueuesSignal"/>, <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.downloadJobsQueue"/>, <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.reassignedJobsQueue"/>,
            <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.maxBlocksBeingDownloaded"/>, <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.nextJobId"/>, <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.averageBlockSizeBytes"/>.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPuller.assignedLock">
            <summary>Locks access to <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.assignedDownloadsByHash"/>, <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.assignedHeadersByPeerId"/>, <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.assignedDownloadsSorted"/>.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPuller.maxBlocksBeingDownloaded">
            <summary>
            The maximum blocks that can be downloaded simultaneously.
            Given that all peers are on the same chain they will deliver that amount of blocks in 1 seconds.
            </summary>
            <remarks>This object has to be protected by <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.queueLock"/>.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPuller.isIbd">
            <summary><c>true</c> if node is in IBD.</summary>
            <remarks>This object has to be protected by <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.peerLock"/>.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPuller.logger">
            <inheritdoc cref="T:Microsoft.Extensions.Logging.ILogger"/>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPuller.chainState">
            <inheritdoc cref="T:Stratis.Bitcoin.Base.IChainState"/>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPuller.networkPeerRequirement">
            <inheritdoc cref="T:Stratis.Bitcoin.P2P.Peer.NetworkPeerRequirement"/>
            <remarks>This object has to be protected by <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.peerLock"/>.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPuller.dateTimeProvider">
            <inheritdoc cref="T:Stratis.Bitcoin.Utilities.IDateTimeProvider"/>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPuller.random">
            <inheritdoc cref="T:System.Random"/>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPuller.assignerLoop">
            <summary>Loop that assigns download jobs to the peers.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPuller.stallingLoop">
            <summary>Loop that checks if peers failed to deliver important blocks in given time and penalizes them if they did.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.BlockPuller.Initialize(Stratis.Bitcoin.BlockPulling.BlockPuller.OnBlockDownloadedCallback)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.BlockPuller.RequestPeerServices(Stratis.Bitcoin.P2P.Protocol.Payloads.NetworkPeerServices)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.BlockPuller.GetAverageBlockSizeBytes">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.BlockPuller.OnIbdStateChanged(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.BlockPuller.NewPeerTipClaimed(Stratis.Bitcoin.P2P.Peer.INetworkPeer,NBitcoin.ChainedHeader)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.BlockPuller.PeerDisconnected(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.BlockPuller.RequestBlocksDownload(System.Collections.Generic.List{NBitcoin.ChainedHeader},System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.BlockPuller.AssignerLoopAsync">
            <summary>Loop that assigns download jobs to the peers.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.BlockPuller.StallingLoopAsync">
            <summary>Loop that continuously checks if peers failed to deliver important blocks in given time and penalizes them if they did.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.BlockPuller.AssignDownloadJobsAsync">
            <summary>Assigns downloads from <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.reassignedJobsQueue"/> and <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.downloadJobsQueue"/> to the peers that are capable of delivering blocks.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.BlockPuller.ProcessQueueLocked(System.Collections.Generic.Queue{Stratis.Bitcoin.BlockPulling.DownloadJob},System.Collections.Generic.List{Stratis.Bitcoin.BlockPulling.AssignedDownload},System.Collections.Generic.List{NBitcoin.uint256},System.Int32)">
            <summary>Processes specified queue of download jobs.</summary>
            <param name="jobsQueue">Queue of download jobs to be processed.</param>
            <param name="newAssignments">Collection of new assignments to be populated.</param>
            <param name="failedHashes">List of failed hashes to be populated if some of jobs hashes can't be assigned to any peer.</param>
            <param name="emptySlots">Max number of assignments that can be made.</param>
            <remarks>Have to be locked by <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.queueLock"/>.</remarks>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.BlockPuller.AddAssignedDownloadLocked(Stratis.Bitcoin.BlockPulling.AssignedDownload)">
            <summary>
            Adds assigned download to <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.assignedDownloadsByHash"/> and helper structures <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.assignedDownloadsSorted"/> and <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.assignedHeadersByPeerId"/>.
            </summary>
            <remarks>Have to be locked by <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.assignedLock"/>.</remarks>
            <param name="assignment">The assignment.</param>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.BlockPuller.RemoveAssignedDownloadLocked(Stratis.Bitcoin.BlockPulling.AssignedDownload)">
            <summary>
            Removes assigned download from <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.assignedDownloadsByHash"/> and helper structures <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.assignedDownloadsSorted"/> and <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.assignedHeadersByPeerId"/>.
            </summary>
            <remarks>Have to be locked by <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.assignedLock"/>.</remarks>
            <param name="assignment">Assignment that should be removed.</param>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.BlockPuller.AskPeersForBlocksAsync(System.Collections.Generic.List{Stratis.Bitcoin.BlockPulling.AssignedDownload})">
            <summary>Asks peer behaviors in parallel to deliver blocks.</summary>
            <param name="assignments">Assignments given to peers.</param>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.BlockPuller.DistributeHeadersLocked(Stratis.Bitcoin.BlockPulling.DownloadJob,System.Collections.Generic.List{NBitcoin.uint256},System.Int32)">
            <summary>Distributes download job's headers to peers that can provide blocks represented by those headers.</summary>
            <remarks>
            If some of the blocks from the job can't be provided by any peer those headers will be added to a <param name="failedHashes">.</param>
            <para>
            Have to be locked by <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.queueLock"/>.
            </para>
            <para>
            Node's quality score is being considered as a weight during the random distribution of the hashes to download among the nodes.
            </para>
            </remarks>
            <param name="downloadJob">Download job to be partially of fully consumed.</param>
            <param name="failedHashes">List of failed hashes which will be extended in case there is no peer to claim required hash.</param>
            <param name="emptySlots">Number of empty slots. This is the maximum number of assignments that can be created.</param>
            <returns>List of downloads that were distributed between the peers.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.BlockPuller.CheckStalling">
            <summary>Checks if peers failed to deliver important blocks and penalizes them if they did.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.BlockPuller.PushBlock(NBitcoin.uint256,NBitcoin.Block,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.BlockPuller.RecalculateQualityScoreLocked(Stratis.Bitcoin.BlockPulling.IBlockPullerBehavior,System.Int32)">
            <summary>Recalculates quality score of a peer or all peers if given peer has the best upload speed.</summary>
            <remarks>This method has to be protected by <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.peerLock"/>.</remarks>
            <param name="pullerBehavior">The puller behavior of a peer which quality score should be recalculated.</param>
            <param name="peerId">ID of a peer which behavior is passed.</param>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.BlockPuller.RecalculateMaxBlocksBeingDownloadedLocked">
            <summary>
            Recalculates the maximum number of blocks that can be simultaneously downloaded based
            on the average blocks size and the total speed of all peers that can deliver blocks.
            </summary>
            <remarks>This object has to be protected by <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.queueLock" />.</remarks>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.BlockPuller.ReleaseAndReassignAssignments(System.Int32)">
            <summary>
            Finds all blocks assigned to a given peer, removes assignments from <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.assignedDownloadsByHash"/>,
            adds to <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.reassignedJobsQueue"/> and signals the <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.processQueuesSignal"/>.
            </summary>
            <param name="peerId">The peer identifier.</param>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.BlockPuller.ReleaseAssignmentsLocked(System.Int32)">
            <summary>Finds all blocks assigned to a given peer, removes assignments from <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.assignedDownloadsByHash"/> and returns removed assignments.</summary>
            <remarks>Have to be locked by <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.assignedLock"/>.</remarks>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.BlockPuller.ReassignAssignmentsLocked(System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{NBitcoin.ChainedHeader}})">
            <summary>Adds items from <paramref name="headersByJobId"/> to the <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.reassignedJobsQueue"/>.</summary>
            <param name="headersByJobId">Block headers mapped by job IDs.</param>
            <remarks>Have to be locked by <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPuller.queueLock"/>.</remarks>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.BlockPuller.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.BlockPulling.IBlockPullerBehavior">
            <summary>
            Relation of the node's puller to a network peer node.
            Keeps all peer-related values that <see cref="T:Stratis.Bitcoin.BlockPulling.BlockPuller"/> needs to know about a peer.
            </summary>
            <remarks>The component is not thread safe and it is supposed to be protected by the caller.</remarks>
        </member>
        <member name="P:Stratis.Bitcoin.BlockPulling.IBlockPullerBehavior.QualityScore">
            <summary>Relative quality score of a peer.</summary>
            <remarks>It's a value from <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPullerBehavior.MinQualityScore"/> to <see cref="F:Stratis.Bitcoin.BlockPulling.BlockPullerBehavior.MaxQualityScore"/>.</remarks>
        </member>
        <member name="P:Stratis.Bitcoin.BlockPulling.IBlockPullerBehavior.SpeedBytesPerSecond">
            <summary>Upload speed of a peer in bytes per second.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.BlockPulling.IBlockPullerBehavior.Tip">
            <summary>Tip claimed by peer.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.IBlockPullerBehavior.AddSample(System.Int64,System.Double)">
            <summary>
            Adds peer performance sample that is used to estimate peer's qualities.
            </summary>
            <param name="blockSizeBytes">Block size in bytes.</param>
            <param name="delaySinceRequestedSeconds">Time in seconds it took peer to deliver a block since it was requested.</param>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.IBlockPullerBehavior.Penalize(System.Double,System.Int32)">
            <summary>Applies a penalty to a peer for not delivering a block.</summary>
            <param name="delaySeconds">Time in which peer didn't deliver assigned blocks.</param>
            <param name="notDeliveredBlocksCount">Number of blocks peer failed to deliver.</param>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.IBlockPullerBehavior.OnIbdStateChanged(System.Boolean)">
            <summary>Called when IBD state changed.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.IBlockPullerBehavior.RecalculateQualityScore(System.Int64)">
            <summary>Recalculates the quality score for this peer.</summary>
            <param name="bestSpeedBytesPerSecond">Speed in bytes per second that is considered to be the maximum speed.</param>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.IBlockPullerBehavior.RequestBlocksAsync(System.Collections.Generic.List{NBitcoin.uint256})">
            <summary>Requests blocks from this peer.</summary>
            <param name="hashes">Hashes of blocks that should be asked to be delivered.</param>
            <exception cref="T:System.OperationCanceledException">Thrown in case peer is in the wrong state or TCP connection was closed during sending a message.</exception>
        </member>
        <member name="T:Stratis.Bitcoin.BlockPulling.BlockPullerBehavior">
            <inheritdoc cref="T:Stratis.Bitcoin.BlockPulling.IBlockPullerBehavior"/>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPullerBehavior.SamplelessQualityScore">
            <summary>Default quality score used when there are no samples to calculate the quality score.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPullerBehavior.IbdSamplesCount">
            <summary>Maximum number of samples that can be used for quality score calculation when node is in IBD.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPullerBehavior.NormalSamplesCount">
            <summary>Maximum number of samples that can be used for quality score calculation when node is not in IBD.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPullerBehavior.MaxSamplesPercentageToPenalize">
            <summary>The maximum percentage of samples that can be used when peer is being penalized for not delivering blocks.</summary>
            <remarks><c>1</c> is 100%, <c>0</c> is 0%.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPullerBehavior.MaxSpeedBytesPerSecond">
            <summary>Limitation on the peer speed estimation.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.BlockPulling.BlockPullerBehavior.QualityScore">
            <inheritdoc />
        </member>
        <member name="P:Stratis.Bitcoin.BlockPulling.BlockPullerBehavior.SpeedBytesPerSecond">
            <inheritdoc />
        </member>
        <member name="P:Stratis.Bitcoin.BlockPulling.BlockPullerBehavior.Tip">
            <inheritdoc />
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPullerBehavior.averageSizeBytes">
            <summary>The average size in bytes of blocks delivered by that peer.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPullerBehavior.averageDelaySeconds">
            <summary>The average delay in seconds between asking this peer for a block and it being downloaded.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.BlockPullerBehavior.lastDeliveryTime">
            <summary>Time when the last block was delivered.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.BlockPullerBehavior.AddSample(System.Int64,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.BlockPullerBehavior.Penalize(System.Double,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.BlockPullerBehavior.OnIbdStateChanged(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.BlockPullerBehavior.RecalculateQualityScore(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.BlockPullerBehavior.RequestBlocksAsync(System.Collections.Generic.List{NBitcoin.uint256})">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.BlockPullerBehavior.Clone">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.BlockPullerBehavior.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.BlockPulling.BlockPullerBehavior.DetachCore">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.BlockPulling.DownloadJob">
            <summary>Represents consecutive collection of headers that are to be downloaded.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.DownloadJob.Id">
            <summary>Unique identifier of this job.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.BlockPulling.DownloadJob.Headers">
            <summary>Headers of blocks that are to be downloaded.</summary>
        </member>
        <member name="T:Stratis.Bitcoin.Builder.Feature.IFeatureCollection">
            <summary>
            Defines methods for collection of features of the FullNode.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Builder.Feature.IFeatureCollection.FeatureRegistrations">
            <summary>List of features already registered in the collection.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.Feature.IFeatureCollection.AddFeature``1">
            <summary>Adds a new feature to the collection provided that the feature of the same type has not been added already.</summary>
            <typeparam name="TImplementation">Type of the feature to be added to the collection.</typeparam>
            <returns>Representation of the registered feature.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Builder.Feature.FeatureCollection">
            <summary>
            Collection of features available to and/or used by the FullNode.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Builder.Feature.FeatureCollection.featureRegistrations">
            <summary>List of features already registered in the collection.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.Feature.FeatureCollection.#ctor">
            <summary>Initializes the object instance.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Builder.Feature.FeatureCollection.FeatureRegistrations">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Builder.Feature.FeatureCollection.AddFeature``1">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Builder.Feature.IFeatureRegistration">
            <summary>
            Defines methods for a representation of registered features of the FullNode.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Builder.Feature.IFeatureRegistration.FeatureStartupType">
            <summary>
            Type of the feature startup class. If it implements ConfigureServices method,
            it is invoked to configure the feature's services.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Builder.Feature.IFeatureRegistration.FeatureType">
            <summary>Type of the feature class.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.Feature.IFeatureRegistration.BuildFeature(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Initializes feature registration DI services and calls configuration delegates of each service
            and the startup type.
            </summary>
            <param name="serviceCollection">Collection of feature registration's DI services.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.Feature.IFeatureRegistration.FeatureServices(System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            Initializes the list of delegates to configure DI services of the feature registration.
            </summary>
            <param name="configureServices">List of delegates to configure DI services of the feature registration.</param>
            <returns>This interface to allow fluent code.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.Feature.IFeatureRegistration.UseStartup``1">
            <summary>
            Sets the specific startup type to be used by the feature registration.
            </summary>
            <typeparam name="TStartup">Type of feature startup class to use.</typeparam>
            <returns>This interface to allow fluent code.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.Feature.IFeatureRegistration.DependOn``1">
            <summary>
            Adds a feature type to the dependency feature list.
            </summary>
            <typeparam name="TImplementation">Type of the registered feature class.</typeparam>
            <returns>This interface to allow fluent code.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.Feature.IFeatureRegistration.EnsureDependencies(System.Collections.Generic.List{Stratis.Bitcoin.Builder.Feature.IFeatureRegistration})">
            <summary>
            Ensures dependency feature types are present in the registered features list.
            </summary>
            <param name="featureRegistrations">List of registered features.</param>
            <exception cref="T:Stratis.Bitcoin.Builder.Feature.MissingDependencyException">Thrown if feature type is missing.</exception>
        </member>
        <member name="T:Stratis.Bitcoin.Builder.Feature.FeatureRegistration`1">
            <summary>
            Default implementation of a representation of a registered feature of the FullNode.
            </summary>
            <typeparam name="TImplementation">Type of the registered feature class.</typeparam>
        </member>
        <member name="F:Stratis.Bitcoin.Builder.Feature.FeatureRegistration`1.ConfigureServicesDelegates">
            <summary>List of delegates to configure services of the feature.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.Feature.FeatureRegistration`1.#ctor">
            <summary>Initializes the instance of the object.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Builder.Feature.FeatureRegistration`1.FeatureStartupType">
            <inheritdoc />
        </member>
        <member name="P:Stratis.Bitcoin.Builder.Feature.FeatureRegistration`1.FeatureType">
            <inheritdoc />
        </member>
        <member name="F:Stratis.Bitcoin.Builder.Feature.FeatureRegistration`1.dependencies">
            <summary> List of dependency features that should be registered in order to add this feature.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.Feature.FeatureRegistration`1.BuildFeature(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Builder.Feature.FeatureRegistration`1.FeatureServices(System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Builder.Feature.FeatureRegistration`1.UseStartup``1">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Builder.Feature.FeatureRegistration`1.DependOn``1">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Builder.Feature.FeatureRegistration`1.EnsureDependencies(System.Collections.Generic.List{Stratis.Bitcoin.Builder.Feature.IFeatureRegistration})">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Builder.Feature.FeatureRegistration`1.FeatureStartup(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type)">
            <summary>
            A feature can use specified method to configure its services.
            The specified method needs to have the following signature to be invoked:
            <c>void ConfigureServices(IServiceCollection serviceCollection)</c>.
            </summary>
            <param name="serviceCollection">Collection of service descriptors to be passed to the ConfigureServices method of the feature registration startup class.</param>
            <param name="startupType">Type of the feature registration startup class. If it implements ConfigureServices method, it is invoked to configure the feature's services.</param>
        </member>
        <member name="T:Stratis.Bitcoin.Builder.Feature.FeaturesExtensions">
            <summary>
            Extensions to features collection.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.Feature.FeaturesExtensions.EnsureFeature``1(System.Collections.Generic.IEnumerable{Stratis.Bitcoin.Builder.Feature.IFullNodeFeature})">
            <summary>
            Ensures a dependency feature type is present in the feature list.
            </summary>
            <typeparam name="T">The dependency feature type.</typeparam>
            <param name="features">List of features.</param>
            <returns>List of features.</returns>
            <exception cref="T:Stratis.Bitcoin.Builder.Feature.MissingDependencyException">Thrown if feature type is missing.</exception>
        </member>
        <member name="T:Stratis.Bitcoin.Builder.Feature.IFullNodeFeature">
            <summary>
            Defines methods for features that are managed by the FullNode.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.Feature.IFullNodeFeature.InitializeAsync">
            <summary>
            Triggered when the FullNode host has fully started.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.Feature.IFullNodeFeature.ValidateDependencies(Stratis.Bitcoin.Builder.IFullNodeServiceProvider)">
            <summary>
            Validates the feature's required dependencies are all present.
            </summary>
            <exception cref="T:Stratis.Bitcoin.Builder.Feature.MissingDependencyException">should be thrown if dependency is missing</exception>
            <param name="services">Services and features registered to node.</param>
        </member>
        <member name="T:Stratis.Bitcoin.Builder.Feature.FullNodeFeature">
            <summary>
            A feature is used to extend functionality into the full node.
            It can manage its life time or use the full node disposable resources.
            <para>
            If a feature adds an option of a certain functionality to be available to be used by the node
            (it may be disabled/enabled by the configuration) the naming convention is
            <c>Add[Feature]()</c>. Conversely, when a feature is inclined to be used if included,
            the naming convention should be <c>Use[Feature]()</c>.
            </para>
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.Feature.FullNodeFeature.InitializeAsync">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Builder.Feature.FullNodeFeature.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Builder.Feature.FullNodeFeature.ValidateDependencies(Stratis.Bitcoin.Builder.IFullNodeServiceProvider)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Builder.Feature.MissingDependencyException">
            <summary>
            Exception thrown when feature dependencies are missing.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.Feature.MissingDependencyException.#ctor">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Builder.Feature.MissingDependencyException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Builder.Feature.MissingDependencyException.#ctor(System.String,System.Exception)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Builder.Feature.MissingServiceException">
            <summary>
            Exception thrown when a required service has not been registered into <see cref="T:Stratis.Bitcoin.Builder.IFullNodeServiceProvider"/>.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Builder.Feature.MissingServiceException.MissingServiceType">
            <summary>
            The Type of the missing service.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.Feature.MissingServiceException.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Stratis.Bitcoin.Builder.Feature.MissingDependencyException"/> class.
            </summary>
            <param name="missingServiceType">Type of the missing service.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.Feature.MissingServiceException.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stratis.Bitcoin.Builder.Feature.MissingDependencyException"/> class.
            </summary>
            <param name="missingServiceType">Type of the missing service.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.Feature.MissingServiceException.#ctor(System.Type,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Stratis.Bitcoin.Builder.Feature.MissingDependencyException"/> class.
            </summary>
            <param name="missingServiceType">Type of the missing service.</param>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Stratis.Bitcoin.Builder.NodeBuilderException">
            <summary>
            Exception thrown by FullNodeBuilder.Build.
            </summary>
            <seealso cref="M:Stratis.Bitcoin.Builder.FullNodeBuilder.Build"/>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.NodeBuilderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Stratis.Bitcoin.Builder.FullNodeBuilder">
            <summary>
            Full node builder allows constructing a full node using specific components.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Builder.FullNodeBuilder.configureDelegates">
            <summary>List of delegates that configure the service providers.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Builder.FullNodeBuilder.configureServicesDelegates">
            <summary>List of delegates that add services to the builder.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Builder.FullNodeBuilder.featuresRegistrationDelegates">
            <summary>List of delegates that add features to the collection.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Builder.FullNodeBuilder.fullNodeBuilt">
            <summary>true if the Build method has been called already (whether it succeeded or not), false otherwise.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Builder.FullNodeBuilder.Features">
            <summary>Collection of features available to and/or used by the node.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Builder.FullNodeBuilder.NodeSettings">
            <inheritdoc />
        </member>
        <member name="P:Stratis.Bitcoin.Builder.FullNodeBuilder.Network">
            <inheritdoc />
        </member>
        <member name="P:Stratis.Bitcoin.Builder.FullNodeBuilder.Services">
            <summary>Collection of DI services.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.FullNodeBuilder.#ctor">
            <summary>
            Initializes a default instance of the object and registers required services.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.FullNodeBuilder.#ctor(Stratis.Bitcoin.Configuration.NodeSettings)">
            <summary>
            Initializes an instance of the object using specific NodeSettings instance and registers required services.
            </summary>
            <param name="nodeSettings">User defined node settings.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.FullNodeBuilder.#ctor(Stratis.Bitcoin.Configuration.NodeSettings,System.Collections.Generic.List{System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection}},System.Collections.Generic.List{System.Action{System.IServiceProvider}},System.Collections.Generic.List{System.Action{Stratis.Bitcoin.Builder.Feature.IFeatureCollection}},Stratis.Bitcoin.Builder.Feature.IFeatureCollection)">
            <summary>
            Initializes an instance of the object using specific NodeSettings instance and configuration delegates and registers required services.
            </summary>
            <param name="nodeSettings">User defined node settings.</param>
            <param name="configureServicesDelegates">List of delegates that add services to the builder.</param>
            <param name="configureDelegates">List of delegates that configure the service providers.</param>
            <param name="featuresRegistrationDelegates">List of delegates that add features to the collection.</param>
            <param name="features">Collection of features to be available to and/or used by the node.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.FullNodeBuilder.#ctor(System.Collections.Generic.List{System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection}},System.Collections.Generic.List{System.Action{System.IServiceProvider}},System.Collections.Generic.List{System.Action{Stratis.Bitcoin.Builder.Feature.IFeatureCollection}},Stratis.Bitcoin.Builder.Feature.IFeatureCollection)">
            <summary>
            Initializes an instance of the object using specific configuration delegates.
            </summary>
            <param name="configureServicesDelegates">List of delegates that add services to the builder.</param>
            <param name="configureDelegates">List of delegates that configure the service providers.</param>
            <param name="featuresRegistrationDelegates">List of delegates that add features to the collection.</param>
            <param name="features">Collection of features to be available to and/or used by the node.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.FullNodeBuilder.ConfigureFeature(System.Action{Stratis.Bitcoin.Builder.Feature.IFeatureCollection})">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Builder.FullNodeBuilder.ConfigureServices(System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Builder.FullNodeBuilder.ConfigureServiceProvider(System.Action{System.IServiceProvider})">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Builder.FullNodeBuilder.Build">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Builder.FullNodeBuilder.BuildServices">
            <summary>
            Constructs and configures services ands features to be used by the node.
            </summary>
            <returns>Collection of registered services.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.FullNodeBuilder.ConfigureServices(System.IServiceProvider)">
            <summary>
            Configure registered services.
            </summary>
            <param name="serviceProvider"></param>
        </member>
        <member name="T:Stratis.Bitcoin.Builder.FullNodeBuilderNodeSettingsExtension">
            <summary>
            A class providing extension methods for <see cref="T:Stratis.Bitcoin.Builder.IFullNodeBuilder"/>.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.FullNodeBuilderNodeSettingsExtension.UseNodeSettings(Stratis.Bitcoin.Builder.IFullNodeBuilder,Stratis.Bitcoin.Configuration.NodeSettings)">
            <summary>
            Makes the full node builder use specific node settings.
            </summary>
            <param name="builder">Full node builder to change node settings for.</param>
            <param name="nodeSettings">Node settings to be used.</param>
            <returns>Interface to allow fluent code.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.FullNodeBuilderNodeSettingsExtension.UseDefaultNodeSettings(Stratis.Bitcoin.Builder.IFullNodeBuilder)">
            <summary>
            Makes the full node builder use the default node settings.
            </summary>
            <param name="builder">Full node builder to change node settings for.</param>
            <returns>Interface to allow fluent code.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Builder.IFullNodeFeatureExecutor">
            <summary>
            Starts and stops all features registered with a full node.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.IFullNodeFeatureExecutor.Initialize">
            <summary>
            Starts all registered features of the associated full node.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Builder.FullNodeFeatureExecutor">
            <summary>
            Starts and stops all features registered with a full node.
            </summary>
            <remarks>Borrowed from ASP.NET.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.Builder.FullNodeFeatureExecutor.node">
            <summary>Full node which features are to be managed by this executor.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Builder.FullNodeFeatureExecutor.logger">
            <summary>Object logger.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.FullNodeFeatureExecutor.#ctor(Stratis.Bitcoin.IFullNode,Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes an instance of the object with specific full node and logger factory.
            </summary>
            <param name="fullNode">Full node which features are to be managed by this executor.</param>
            <param name="loggerFactory">Factory to be used to create logger for the object.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.FullNodeFeatureExecutor.Initialize">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Builder.FullNodeFeatureExecutor.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Builder.FullNodeFeatureExecutor.Execute(System.Action{Stratis.Bitcoin.Builder.Feature.IFullNodeFeature},System.Boolean)">
            <summary>
            Executes start or stop method of all the features registered with the associated full node.
            </summary>
            <param name="callback">Delegate to run start or stop method of the feature.</param>
            <param name="disposing">Reverse the order of which the features are executed.</param>
            <exception cref="T:System.AggregateException">Thrown in case one or more callbacks threw an exception.</exception>
        </member>
        <member name="T:Stratis.Bitcoin.Builder.IFullNodeServiceProvider">
            <summary>
            Provider of access to services and features registered with the full node.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Builder.IFullNodeServiceProvider.Features">
            <summary>List of registered features.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Builder.IFullNodeServiceProvider.ServiceProvider">
            <summary>Provider to registered services.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.IFullNodeServiceProvider.IsServiceRegistered``1">
            <summary>
            Determines whether the service of the specified type T is registered.
            </summary>
            <typeparam name="T">A type to query against the service provider.</typeparam>
            <returns>
              <c>true</c> if this instance is registered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.IFullNodeServiceProvider.EnsureServiceIsRegistered``1">
            <summary>
            Guard method that check whether the service of the specified type T is registered.
            If it doesn't exists, thrown an exception.
            </summary>
            <typeparam name="T">A type to query against the service provider.</typeparam>
        </member>
        <member name="T:Stratis.Bitcoin.Builder.FullNodeServiceProvider">
            <summary>
            Provider of access to services and features registered with the full node.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Builder.FullNodeServiceProvider.featureTypes">
            <summary>List of registered feature types.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Builder.FullNodeServiceProvider.Features">
            <inheritdoc />
        </member>
        <member name="P:Stratis.Bitcoin.Builder.FullNodeServiceProvider.ServiceProvider">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Builder.FullNodeServiceProvider.#ctor(System.IServiceProvider,System.Collections.Generic.List{System.Type})">
            <summary>
            Initializes a new instance of the object with service provider and list of registered feature types.
            </summary>
            <param name="serviceProvider">Provider to registered services.</param>
            <param name="featureTypes">List of registered feature types.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.FullNodeServiceProvider.IsServiceRegistered``1">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Builder.FullNodeServiceProvider.EnsureServiceIsRegistered``1">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Builder.IFullNodeBuilder">
            <summary>
            Full node builder allows constructing a full node using specific components.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Builder.IFullNodeBuilder.NodeSettings">
            <summary>User defined node settings.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Builder.IFullNodeBuilder.Network">
            <summary>Specification of the network the node runs on - regtest/testnet/mainnet.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Builder.IFullNodeBuilder.Services">
            <summary>Collection of DI services.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Builder.IFullNodeBuilder.Features">
            <summary>Collection of features</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.IFullNodeBuilder.Build">
            <summary>
            Constructs the full node with the required features, services, and settings.
            </summary>
            <returns>Initialized full node.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.IFullNodeBuilder.ConfigureFeature(System.Action{Stratis.Bitcoin.Builder.Feature.IFeatureCollection})">
            <summary>
            Adds features to the builder.
            </summary>
            <param name="configureFeatures">A method that adds features to the collection.</param>
            <returns>Interface to allow fluent code.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.IFullNodeBuilder.ConfigureServices(System.Action{Microsoft.Extensions.DependencyInjection.IServiceCollection})">
            <summary>
            Adds services to the builder.
            </summary>
            <param name="configureServices">A method that adds services to the builder.</param>
            <returns>Interface to allow fluent code.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Builder.IFullNodeBuilder.ConfigureServiceProvider(System.Action{System.IServiceProvider})">
            <summary>
            Add configurations for the service provider.
            </summary>
            <param name="configure">A method that configures the service provider.</param>
            <returns>Interface to allow fluent code.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Configuration.DataFolder">
            <summary>
            Contains path locations to folders and files on disk.
            Used by various components of the full node.
            </summary>
            <remarks>
            Location name should describe if its a file or a folder.
            File location names end with "File" (i.e AddrMan[File]).
            Folder location names end with "Path" (i.e CoinView[Path]).
            </remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.DataFolder.#ctor(System.String)">
            <summary>
            Initializes the path locations.
            </summary>
            <param name="path">The data directory root path.</param>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.DataFolder.RootPath">
            <summary>
            The DataFolder's path.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.DataFolder.AddressManagerFilePath">
            <summary>Address manager's database of peers.</summary>
            <seealso cref="!:PeerAddressManager.SavePeers(string, string)"/>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.DataFolder.CoinViewPath">
            <summary>Path to the folder with coinview database files.</summary>
            <seealso cref="!:Consensus.CoinViews.DBreezeCoinView.DBreezeCoinView"/>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.DataFolder.ChainPath">
            <summary>Path to the folder with node's chain repository database files.</summary>
            <seealso cref="!:Base.BaseFeature.StartChain"/>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.DataFolder.KeyValueRepositoryPath">
            <summary>Path to the folder with separated key-value items managed by <see cref="T:Stratis.Bitcoin.Utilities.IKeyValueRepository"/>.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.DataFolder.BlockPath">
            <summary>Path to the folder with block repository database files.</summary>
            <seealso cref="!:Features.BlockStore.BlockRepository.BlockRepository"/>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.DataFolder.IndexPath">
            <summary>Path to the folder with block repository database files.</summary>
            <seealso cref="!:Features.IndexStore.IndexRepository.IndexRepository"/>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.DataFolder.RpcCookieFile">
            <summary>File to store RPC authorization cookie.</summary>
            <seealso cref="!:Features.RPC.Startup.Configure"/>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.DataFolder.WalletPath">
            <summary>Path to wallet files.</summary>
            <seealso cref="!:Features.Wallet.WalletManager.LoadWallet"/>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.DataFolder.LogPath">
            <summary>Path to log files.</summary>
            <seealso cref="T:Stratis.Bitcoin.Configuration.Logging.LoggingConfiguration"/>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.DataFolder.DnsMasterFilePath">
            <summary>Path to DNS masterfile.</summary>
            <seealso cref="!:Dns.IMasterFile.Save"/>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.DataFolder.SmartContractStatePath">
            <summary>Path to the folder with smart contract state database files.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.DataFolder.ProvenBlockHeaderPath">
            <summary>Path to the folder for <see cref="T:NBitcoin.ProvenBlockHeader"/> items database files.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.DataFolder.ApplicationsPath">
            <summary>Path to Stratis applications</summary>
        </member>
        <member name="T:Stratis.Bitcoin.Configuration.Logging.ExtendedLoggerFactory">
            <summary>
            An extension of the <see cref="T:Microsoft.Extensions.Logging.LoggerFactory"/> that allows access to some internal components.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.Logging.ExtendedLoggerFactory.ConsoleSettings">
            <summary>Configuration of console logger.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.Logging.ExtendedLoggerFactory.ConsoleLoggerProvider">
            <summary>Provider of console logger.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.Logging.ExtendedLoggerFactory.LoadNLogConfiguration(Stratis.Bitcoin.Configuration.DataFolder)">
            <summary>Loads the NLog.config file from the <see cref="T:Stratis.Bitcoin.Configuration.DataFolder"/>, if it exists.</summary>
        </member>
        <member name="T:Stratis.Bitcoin.Configuration.Logging.LoggingConfiguration">
            <summary>
            Integration of NLog with Microsoft.Extensions.Logging interfaces.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Configuration.Logging.LoggingConfiguration.ColumnLength">
            <summary>Width of a column for pretty console/log outputs.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Configuration.Logging.LoggingConfiguration.logSettings">
            <summary>Currently used node's log settings.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Configuration.Logging.LoggingConfiguration.folder">
            <summary>Currently used data folder to determine path to logs.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Configuration.Logging.LoggingConfiguration.keyCategories">
            <summary>Mappings of keys to class name spaces to be used when filtering log categories.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.Logging.LoggingConfiguration.#cctor">
            <summary>
            Initializes application logging.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.Logging.LoggingConfiguration.NLogConfigurationReloaded(System.Object,NLog.Config.LoggingConfigurationReloadedEventArgs)">
            <summary>
            Event handler to be called when logging <see cref="P:NLog.LogManager.Configuration"/> gets reloaded.
            </summary>
            <param name="sender">Not used.</param>
            <param name="e">Not used.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.Logging.LoggingConfiguration.AddFilters(Stratis.Bitcoin.Configuration.Settings.LogSettings,Stratis.Bitcoin.Configuration.DataFolder)">
            <summary>
            Extends the logging rules in the "NLog.config" with node log settings rules.
            </summary>
            <param name="settings">Node log settings to extend the rules from the configuration file, or null if no extension is required.</param>
            <param name="dataFolder">Data folder to determine path to log files.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.Logging.LoggingConfiguration.AddFilters(Microsoft.Extensions.Logging.ILoggerFactory,Stratis.Bitcoin.Configuration.Settings.LogSettings,Stratis.Bitcoin.Configuration.DataFolder)">
            <summary>
            Extends the logging rules in the "NLog.config" with node log settings rules.
            </summary>
            <param name="loggerFactory">Not used.</param>
            <param name="settings">Node log settings to extend the rules from the configuration file, or null if no extension is required.</param>
            <param name="dataFolder">Data folder to determine path to log files.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.Logging.LoggingConfiguration.AddConsoleWithFilters(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Configure the console logger and set it to filter logs not related to the fullnode.
            </summary>
            <param name="loggerFactory">The logger factory to add the console logger.</param>
            <returns>The new console settings.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.Logging.LoggingConfiguration.ConfigureConsoleFilters(Microsoft.Extensions.Logging.ILoggerFactory,Microsoft.Extensions.Logging.Console.ConsoleLoggerSettings,Stratis.Bitcoin.Configuration.Settings.LogSettings)">
            <summary>
            Configure the console logger and set it to filter logs not related to the fullnode.
            </summary>
            <param name="loggerFactory">Not used.</param>
            <param name="consoleLoggerSettings">Console settings to filter.</param>
            <param name="settings">Settings that hold potential debug arguments, if null no debug arguments will be loaded."/></param>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.Logging.LoggingConfiguration.GetConsoleSettings(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Obtains configuration of the console logger.
            </summary>
            <param name="loggerFactory">Logger factory interface being extended.</param>
            <returns>Console logger settings.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.Logging.LoggingConfiguration.GetConsoleLoggerProvider(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Obtains configuration of the console logger provider.
            </summary>
            <param name="loggerFactory">Logger factory interface being extended.</param>
            <returns>Console logger provider.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Configuration.NodeServerEndpoint">
            <summary>
            Description of network interface on which the node listens.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.NodeServerEndpoint.#ctor(System.Net.IPEndPoint,System.Boolean)">
            <summary>
            Initializes an instance of the object.
            </summary>
            <param name="endpoint">IP address and port number on which the node server listens.</param>
            <param name="whitelisted">If <c>true</c>, peers that connect to this interface are whitelisted.</param>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.NodeServerEndpoint.Endpoint">
            <summary>IP address and port number on which the node server listens.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.NodeServerEndpoint.Whitelisted">
            <summary>If <c>true</c>, peers that connect to this interface are whitelisted.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.NormalizeDirectorySeparatorExt.NormalizeDirectorySeparator(System.String)">
            <summary>
            Fixes incorrect directory separator characters in path (if any)
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Configuration.NodeSettings">
            <summary>
            Сontains the configuration settings for a Full Node. These settings are taken from both the application
            command line arguments and the configuration file.
            Unlike the settings held by <see cref="P:Stratis.Bitcoin.Configuration.NodeSettings.Network"/>, these settings are individualized for each Full Node.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Configuration.NodeSettings.SupportedProtocolVersion">
            <summary>The version of the protocol supported by the current implementation of the Full Node.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.NodeSettings.LoggerFactory">
            <summary>A factory responsible for creating a Full Node logger instance.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.NodeSettings.Logger">
            <summary>An instance of the Full Node logger, which reports on the Full Node's activity.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.NodeSettings.Log">
            <summary>The settings of the Full Node's logger.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.NodeSettings.DataFolder">
            <summary>A list of paths to folders which Full Node components use to store data. These folders are found
            in the <see cref="P:Stratis.Bitcoin.Configuration.NodeSettings.DataDir"/>.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.NodeSettings.DataDir">
            <summary>The path to the data directory, which contains, for example, the configuration file, wallet files,
            and the file containing the peers that the Node has connected to. This value is read-only and can only be
            set via the NodeSettings constructor's arguments.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.NodeSettings.DataDirRoot">
            <summary>The path to the root data directory, which holds all node data on the machine.
            This includes separate subfolders for different nodes that run on the machine: a Stratis folder for a
            Stratis node, a Bitcoin folder for a Bitcoin node, and folders for any sidechain nodes. This value is
            read-only and can only be set via the NodeSettings constructor's arguments.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.NodeSettings.ConfigurationFile">
            <summary>The path to the Full Node's configuration file.
            This value is read-only and can only be set via the NodeSettings constructor's arguments.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.NodeSettings.ConfigReader">
            <summary>A combination of the settings from the Full Node's configuration file and the command
            line arguments supplied to the Full Node when it was run. This places the settings from both sources
            into a single object, which is referenced at runtime.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.NodeSettings.ProtocolVersion">
            <summary>The version of the protocol supported by the Full Node.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.NodeSettings.MinProtocolVersion">
            <summary>The lowest version of the protocol which the Full Node supports.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Stratis.Bitcoin.Configuration.NodeSettings.Network" -->
        <member name="P:Stratis.Bitcoin.Configuration.NodeSettings.Agent">
            <summary>A string that is used to help identify the Full Node when it connects to other peers on a network.
            Defaults to "StratisNode".
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.NodeSettings.MinTxFeeRate">
            <summary>The minimum fee for a kB of transactions on the node.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.NodeSettings.FallbackTxFeeRate">
            <summary>The default fee for a kB of transactions on the node. This value is used if no fee is specified for
            a transaction.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.NodeSettings.MinRelayTxFeeRate">
            <summary>The minimum relay transaction fee for a kB of transactions on the node. A miner may not be prepared
            to mine a transaction for a specified fee but might be prepared to forward the transaction to another miner
            who will. In this situation, the transaction is propagated to other peers if the relay fee
            is met. For this reason, the minimum relay transaction fee is usually lower than the minimum fee.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.NodeSettings.#ctor(NBitcoin.Network,NBitcoin.Protocol.ProtocolVersion,System.String,System.String[],NBitcoin.NetworksSelector)">
            <summary>
            Initializes a new instance of the object.
            </summary>
            <param name="network">The network the node runs on - regtest/testnet/mainnet.</param>
            <param name="protocolVersion">Supported protocol version for which to create the configuration.</param>
            <param name="agent">The nodes user agent that will be shared with peers.</param>
            <param name="args">The command-line arguments.</param>
            <param name="networksSelector">A selector class that delayed load a network for either - regtest/testnet/mainnet.</param>
            <exception cref="T:Stratis.Bitcoin.Configuration.ConfigurationException">Thrown in case of any problems with the configuration file or command line arguments.</exception>
            <remarks>
            Processing depends on whether a configuration file is passed via the command line.
            There are two main scenarios here:
            - The configuration file is passed via the command line. In this case we need
              to read it earlier so that it can provide defaults for "testnet" and "regtest".
            - Alternatively, if the file name is not supplied then a network-specific file
              name would be determined. In this case we first need to determine the network.
            </remarks>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.NodeSettings.PrintHelpAndExit">
            <summary>Determines whether to print help and exit.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.NodeSettings.Default(NBitcoin.Network,NBitcoin.Protocol.ProtocolVersion)">
            <summary>
            Initializes default configuration.
            </summary>
            <param name="network">Specification of the network the node runs on - regtest/testnet/mainnet.</param>
            <param name="protocolVersion">Supported protocol version for which to create the configuration.</param>
            <returns>Default node configuration.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.NodeSettings.CreateDefaultConfigurationFile(System.Collections.Generic.List{Stratis.Bitcoin.Builder.Feature.IFeatureRegistration})">
            <summary>
            Creates the configuration file if it does not exist.
            </summary>
            <param name="features">The features for which to include settings in the configuration file.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.NodeSettings.ReadConfigurationFile">
            <summary>
            Reads the configuration file and merges it with the command line arguments.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.NodeSettings.LoadConfiguration">
            <summary>
            Loads the node settings from the application configuration.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.NodeSettings.CreateDefaultDataDirectories(System.String,NBitcoin.Network)">
            <summary>
            Creates default data directories respecting different operating system specifics.
            </summary>
            <param name="appName">Name of the node, which will be reflected in the name of the data directory.</param>
            <param name="network">Specification of the network the node runs on - regtest/testnet/mainnet.</param>
            <returns>The top-level data directory path.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.NodeSettings.PrintHelp(NBitcoin.Network)">
            <summary>
            Displays command-line help.
            </summary>
            <param name="network">The network to extract values from.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.NodeSettings.BuildDefaultConfigurationFile(System.Text.StringBuilder,NBitcoin.Network)">
            <summary>
            Get the default configuration.
            </summary>
            <param name="builder">The string builder to add the settings to.</param>
            <param name="network">The network to base the defaults off.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.NodeSettings.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Configuration.Settings.ConnectionManagerSettings">
            <summary>
            Configuration related to incoming and outgoing connections.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Configuration.Settings.ConnectionManagerSettings.DefaultMisbehavingBantimeSeconds">
            <summary>Number of seconds to keep misbehaving peers from reconnecting (Default 24-hour ban).</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Configuration.Settings.ConnectionManagerSettings.MaximumAgentPrefixLength">
            <summary>Maximum number of AgentPrefix characters to use in the Agent value.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Configuration.Settings.ConnectionManagerSettings.DefaultBlocksOnly">
            <summary>Default value for "blocksonly" option.</summary>
            <seealso cref="P:Stratis.Bitcoin.Configuration.Settings.ConnectionManagerSettings.RelayTxes"/>
        </member>
        <member name="F:Stratis.Bitcoin.Configuration.Settings.ConnectionManagerSettings.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.Settings.ConnectionManagerSettings.#ctor(Stratis.Bitcoin.Configuration.NodeSettings)">
            <summary>
            Initializes an instance of the object from the node configuration.
            </summary>
            <param name="nodeSettings">The node configuration.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.Settings.ConnectionManagerSettings.BuildDefaultConfigurationFile(System.Text.StringBuilder,NBitcoin.Network)">
            <summary>
            Get the default configuration.
            </summary>
            <param name="builder">The string builder to add the settings to.</param>
            <param name="network">The network to base the defaults off.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.Settings.ConnectionManagerSettings.PrintHelp(NBitcoin.Network)">
            <summary>
            Displays command-line help.
            </summary>
            <param name="network">The network to extract values from.</param>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.Settings.ConnectionManagerSettings.Connect">
            <summary>List of exclusive end points that the node should be connected to.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.Settings.ConnectionManagerSettings.AddNode">
            <summary>List of end points that the node should try to connect to.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.Settings.ConnectionManagerSettings.Listen">
            <summary>List of network interfaces on which the node should listen on.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.Settings.ConnectionManagerSettings.ExternalEndpoint">
            <summary>External (or public) IP address of the node.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.Settings.ConnectionManagerSettings.Port">
            <summary>Port of the node.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.Settings.ConnectionManagerSettings.BanTimeSeconds">
            <summary>Number of seconds to keep misbehaving peers from reconnecting.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.Settings.ConnectionManagerSettings.MaxOutboundConnections">
            <summary>Maximum number of outbound connections.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.Settings.ConnectionManagerSettings.MaxInboundConnections">
            <summary>Maximum number of inbound connections.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.Settings.ConnectionManagerSettings.BurstModeTargetConnections">
            <summary>Connections number after which burst connectivity mode (connection attempts with no delay in between) will be disabled.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.Settings.ConnectionManagerSettings.SyncTimeEnabled">
            <summary><c>true</c> to sync time with other peers and calculate adjusted time, <c>false</c> to use our system clock only.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.Settings.ConnectionManagerSettings.Agent">
            <summary>The node's user agent.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.Settings.ConnectionManagerSettings.RelayTxes">
            <summary><c>true</c> to enable bandwidth saving setting to send and received confirmed blocks only.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.Settings.ConnectionManagerSettings.IpRangeFiltering">
            <summary>Filter peers that are within the same IP range to prevent sybil attacks.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.Settings.ConnectionManagerSettings.Whitelist">
            <summary>List of white listed IP endpoint. The node will flags peers that connects to the node, or that the node connects to, as whitelisted.</summary>
        </member>
        <member name="T:Stratis.Bitcoin.Configuration.Settings.ConsensusSettings">
            <summary>
            Configurable settings for the consensus feature.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Configuration.Settings.ConsensusSettings.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.Settings.ConsensusSettings.UseCheckpoints">
            <summary>Whether use of checkpoints is enabled or not.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.Settings.ConsensusSettings.BlockAssumedValid">
            <summary>
            If this block is in the chain assume that it and its ancestors are valid and skip their script verification.
            Null to not assume valid blocks and therefore validate all blocks.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.Settings.ConsensusSettings.MaxTipAge">
            <summary>Maximum tip age in seconds to consider node in initial block download.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.Settings.ConsensusSettings.MaxBlockMemoryInMB">
            <summary>
            Maximum memory to use for unconsume blocks in MB.
            Used in consensus manager to set <seealso cref="!:ConsensusManager.MaxUnconsumedBlocksDataBytes"/>
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.Settings.ConsensusSettings.#ctor(Stratis.Bitcoin.Configuration.NodeSettings)">
            <summary>
            Initializes an instance of the object from the node configuration.
            </summary>
            <param name="nodeSettings">The node configuration.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.Settings.ConsensusSettings.PrintHelp(NBitcoin.Network)">
            <summary>Prints the help information on how to configure the Consensus settings to the logger.</summary>
            <param name="network">The network to use.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.Settings.ConsensusSettings.BuildDefaultConfigurationFile(System.Text.StringBuilder,NBitcoin.Network)">
            <summary>
            Get the default configuration.
            </summary>
            <param name="builder">The string builder to add the settings to.</param>
            <param name="network">The network to base the defaults off.</param>
        </member>
        <member name="T:Stratis.Bitcoin.Configuration.Settings.LogSettings">
            <summary>
            Configuration related to logging.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.Settings.LogSettings.#ctor">
            <summary>
            Initializes an instance of the object with default values.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.Settings.LogSettings.DebugArgs">
            <summary>List of categories to enable debugging information for.</summary>
            <remarks>A special value of "1" of the first category enables trace level debugging information for everything.</remarks>
        </member>
        <member name="P:Stratis.Bitcoin.Configuration.Settings.LogSettings.LogLevel">
            <summary>Level of logging details.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.Settings.LogSettings.Load(Stratis.Bitcoin.Configuration.TextFileConfiguration)">
            <summary>
            Loads the logging settings from the application configuration.
            </summary>
            <param name="config">Application configuration.</param>
        </member>
        <member name="T:Stratis.Bitcoin.Configuration.ConfigurationException">
            <summary>
            Exception that is used when a problem in command line or configuration file configuration is found.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.ConfigurationException.#ctor(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Configuration.TextFileConfiguration">
            <summary>
            Handling of application configuration.
            <para>
            This class provides the primary source of configuration for the application.
            It is used to include both the arguments from the command line as well as
            settings loaded from the configuration file.
            </para>
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Configuration.TextFileConfiguration.args">
            <summary>Application command line arguments as a mapping of argument name to list of its values.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.TextFileConfiguration.#ctor(System.String[])">
            <summary>
            Initializes the instance of the object using command line arguments.
            </summary>
            <param name="args">Application command line arguments.</param>
            <remarks>Command line arguments are expected to come in form of Name=Value, where Name can be prefixed with '-'.</remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.TextFileConfiguration.#ctor(System.String)">
            <summary>
            Initializes the instance of the object using the configuration file contents.
            </summary>
            <param name="data">Contents of the configuration file to parse and extract arguments from.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.TextFileConfiguration.Add(System.String,System.String)">
            <summary>
            Adds argument and its value to the argument list.
            <para>If the argument exists already in the list, the value is appended to the list of its values.</para>
            </summary>
            <param name="key">Name of the argument.</param>
            <param name="value">Argument value.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.TextFileConfiguration.MergeInto(Stratis.Bitcoin.Configuration.TextFileConfiguration)">
            <summary>
            Merges current instance of the configuration to the target instance.
            </summary>
            <param name="destination">Target instance to merge current instance into.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.TextFileConfiguration.GetAll(System.String,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Retrieves all values of a specific argument name (where the name excludes the dash prefix).
            </summary>
            <param name="key">Name of the argument (excluding the dash prefix).</param>
            <param name="logger">The settings logger used to log the value. Logs on Debug level.</param>
            <returns>Values for the specified argument.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.TextFileConfiguration.GetOrDefault``1(System.String,``0,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Gets typed value for a specific argument or a default value.
            </summary>
            <typeparam name="T">Type of the argument value.</typeparam>
            <param name="key">Name of the argument.</param>
            <param name="defaultValue">Default value to return if no argument value is defined.</param>
            <param name="logger">The settings logger to use to log the value. Logs on Debug level.</param>
            <returns>Value of the argument or a default value if no value was set.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Configuration.TextFileConfiguration.ConvertValue``1(System.String)">
            <summary>
            Converts a string to a typed value.
            </summary>
            <typeparam name="T">Type of the value to convert the string to.</typeparam>
            <param name="str">String representation of the value.</param>
            <returns>Typed value.</returns>
            <exception cref="T:System.NotSupportedException">Thrown if <typeparamref name="T"/> is not supported type.</exception>
            <exception cref="T:System.FormatException">Thrown if the string does not represent a valid value of <typeparamref name="T"/>.</exception>
        </member>
        <member name="F:Stratis.Bitcoin.Connection.ConnectionManager.dateTimeProvider">
            <summary>Provider of time functions.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Connection.ConnectionManager.MaxInventorySize">
            <summary>The maximum number of entries in an 'inv' protocol message.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Connection.ConnectionManager.loggerFactory">
            <summary>Logger factory to create loggers.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Connection.ConnectionManager.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.ConnectionManager.Network">
            <inheritdoc/>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.ConnectionManager.NetworkPeerFactory">
            <inheritdoc/>
        </member>
        <member name="F:Stratis.Bitcoin.Connection.ConnectionManager.nodeLifetime">
            <summary>Global application life cycle control - triggers when application shuts down.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.ConnectionManager.NodeSettings">
            <inheritdoc/>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.ConnectionManager.ConnectionSettings">
            <inheritdoc/>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.ConnectionManager.Parameters">
            <inheritdoc/>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.ConnectionManager.PeerConnectors">
            <inheritdoc/>
        </member>
        <member name="F:Stratis.Bitcoin.Connection.ConnectionManager.peerAddressManager">
            <summary>Manager class that handles peers and their respective states.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Connection.ConnectionManager.peerDiscovery">
            <summary>Async loop that discovers new peers to connect to.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Connection.ConnectionManager.selfEndpointTracker">
            <summary>Registry of endpoints used to identify this node.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Connection.ConnectionManager.networkPeerDisposer">
            <summary>Maintains a list of connected peers and ensures their proper disposal.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Connection.ConnectionManager.Initialize(Stratis.Bitcoin.Consensus.IConsensusManager)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Connection.ConnectionManager.AddExternalIpToSelfEndpoints">
            <summary>
            If -externalip was set on startup, put it in the registry of known selves so
            we can avoid connecting to our own node.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Connection.ConnectionManager.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Connection.ConnectionManager.AddConnectedPeer(Stratis.Bitcoin.P2P.Peer.INetworkPeer)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Connection.ConnectionManager.ShouldDisconnect(Stratis.Bitcoin.P2P.Peer.INetworkPeer)">
            <summary>
            Determines if the peer should be disconnected.
            Peer should be disconnected in case it's IP is from the same group in which any other peer
            is and the peer wasn't added using -connect or -addNode command line arguments.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Connection.ConnectionManager.RemoveConnectedPeer(Stratis.Bitcoin.P2P.Peer.INetworkPeer,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Connection.ConnectionManager.PeerDisconnected(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Connection.ConnectionManager.AddNodeAddress(System.Net.IPEndPoint)">
            <summary>
            Adds a node to the -addnode collection.
            <para>
            Usually called via RPC.
            </para>
            </summary>
            <param name="ipEndpoint">The endpoint of the peer to add.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Connection.ConnectionManager.RemoveNodeAddress(System.Net.IPEndPoint)">
            <summary>
            Disconnect a peer.
            <para>
            Usually called via RPC.
            </para>
            </summary>
            <param name="ipEndpoint">The endpoint of the peer to disconnect.</param>
        </member>
        <member name="F:Stratis.Bitcoin.Connection.ConnectionManagerBehavior.loggerFactory">
            <summary>Logger factory to create loggers.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Connection.ConnectionManagerBehavior.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Connection.ConnectionManagerBehavior.infoLogger">
            <summary>
            Instance logger that we use for logging of INFO level messages that are visible on the console.
            <para>Unlike <see cref="F:Stratis.Bitcoin.Connection.ConnectionManagerBehavior.logger"/>, this one is created without prefix for the nicer console output.</para>
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Connection.ConnectionManagerController">
            <summary>
            A <see cref="T:Stratis.Bitcoin.Controllers.FeatureController"/> that implements API and RPC methods for the connection manager.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Connection.ConnectionManagerController.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Connection.ConnectionManagerController.AddNodeRPC(System.String,System.String)">
            <summary>
            RPC method for adding a node connection.
            </summary>
            <param name="command">The command to run. {add, remove, onetry}</param>
            <param name="endpointStr">The endpoint in string format.</param>
            <returns><c>true</c> if successful.</returns>
            <exception cref="T:System.ArgumentException">Thrown if unsupported command given.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.Connection.ConnectionManagerController.AddNodeAPI(System.String,System.String)">
            <summary>
            Adds a node to the connection manager.
            API wrapper for RPC call.
            </summary>
            <param name="command">The command to run. {add, remove, onetry}</param>
            <param name="endpoint">The endpoint in string format.</param>
            <returns>Json formatted <c>True</c> indicating success. Returns <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> formatted exception if fails.</returns>
            <exception cref="T:System.ArgumentException">Thrown if either command not supported/empty or if endpoint is invalid/empty.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.Connection.ConnectionManagerController.GetPeerInfoRPC">
            <summary>
            RPC implementation of "getpeerinfo".
            </summary>
            <see cref="!:https://github.com/bitcoin/bitcoin/blob/0.14/src/rpc/net.cpp"/>
            <returns>List of connected peer nodes as <see cref="T:Stratis.Bitcoin.Connection.PeerNodeModel"/>.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Stratis.Bitcoin.Connection.ConnectionManagerController.GetPeerInfoAPI" -->
        <member name="T:Stratis.Bitcoin.Connection.DropNodesBehaviour">
            <summary>
            If the light wallet is only connected to nodes behind
            it cannot progress progress to the tip to get the full balance
            this behaviour will make sure place is kept for nodes higher then
            current tip.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Connection.DropNodesBehaviour.loggerFactory">
            <summary>Logger factory to create loggers.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Connection.DropNodesBehaviour.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Connection.IConnectionManager.AddNodeAddress(System.Net.IPEndPoint)">
            <summary>
            Adds a peer to the address manager's collection as well as
            the connection manager's add node collection.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Connection.IConnectionManager.AddConnectedPeer(Stratis.Bitcoin.P2P.Peer.INetworkPeer)">
            <summary>
            Adds a peer to the address manager's connected nodes collection.
            <para>
            This list is inspected by the peer connectors to determine if the peer
            isn't already connected.
            </para>
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Connection.IConnectionManager.PeerDisconnected(System.Int32)">
            <summary>Notifies other components about peer being disconnected.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Connection.IConnectionManager.Initialize(Stratis.Bitcoin.Consensus.IConsensusManager)">
            <summary>Initializes and starts each peer connection as well as peer discovery.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.IConnectionManager.Network">
            <summary>The network the node is running on.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.IConnectionManager.NetworkPeerFactory">
            <summary>Factory for creating P2P network peers.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.IConnectionManager.NodeSettings">
            <summary>User defined node settings.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.IConnectionManager.Parameters">
            <summary>The network peer parameters for the <see cref="T:Stratis.Bitcoin.Connection.IConnectionManager"/>.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.IConnectionManager.PeerConnectors">
            <summary>Includes the add node, connect and discovery peer connectors.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.IConnectionManager.ConnectionSettings">
            <summary>Connection settings.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Connection.IConnectionManager.RemoveNodeAddress(System.Net.IPEndPoint)">
            <summary>
            Remove a peer from the address manager's collection as well as
            the connection manager's add node collection.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Connection.IPeerBanning">
            <summary>
            Contract for network peer banning provider.
            </summary>
            <remarks>
            Peers are banned for <see cref="F:Stratis.Bitcoin.Configuration.Settings.ConnectionManagerSettings.DefaultMisbehavingBantimeSeconds"/> seconds (default is 24h), this value can change using configuration (-bantime=[seconds]).
            </remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Connection.IPeerBanning.BanAndDisconnectPeer(System.Net.IPEndPoint,System.Int32,System.String)">
            <summary>
            Bans and disconnects the peer.
            </summary>
            <param name="endpoint">The endpoint to set that it was banned.</param>
            <param name="banTimeSeconds">The time in seconds this peer should be banned.</param>
            <param name="reason">An optional reason for the ban, the 'reason' is only use for tracing.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Connection.IPeerBanning.BanAndDisconnectPeer(System.Net.IPEndPoint,System.String)">
            <summary>
            Bans and disconnects the peer using the connection manager's default ban interval.
            This allows features to depend solely on the peer banning interface and not the connection manager directly.
            </summary>
            <param name="endpoint">The endpoint to set that it was banned.</param>
            <param name="reason">An optional reason for the ban, the 'reason' is only use for tracing.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Connection.IPeerBanning.IsBanned(System.Net.IPEndPoint)">
            <summary>
            Check if a peer is banned.
            </summary>
            <param name="endpoint">The endpoint to check if it was banned.</param>
            <returns><c>true</c> if the peer was banned.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Connection.PeerBanning">
            <summary>
            An implementation of<see cref="T:Stratis.Bitcoin.Connection.IPeerBanning"/>.
            This will manage banning of peers and checking for banned peers.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Connection.PeerBanning.connectionManager">
            <summary>A connection manager of peers.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Connection.PeerBanning.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Connection.PeerBanning.dateTimeProvider">
            <summary>Functionality of date and time.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Connection.PeerBanning.peerAddressManager">
            <summary>Keeps a set of peers discovered on the network in cache and on disk.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Connection.PeerBanning.BanAndDisconnectPeer(System.Net.IPEndPoint,System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Connection.PeerBanning.BanAndDisconnectPeer(System.Net.IPEndPoint,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Connection.PeerBanning.IsBanned(System.Net.IPEndPoint)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Connection.PeerBanningBehavior">
            <summary>
            A behaviour that will manage the lifetime of peers.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Connection.PeerBanningBehavior.loggerFactory">
            <summary>Logger factory to create loggers.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Connection.PeerBanningBehavior.peerBanning">
            <summary>Handle the lifetime of a peer.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Connection.PeerBanningBehavior.nodeSettings">
            <summary>The node settings.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Connection.PeerBanningBehavior.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Connection.PeerBanningBehavior.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Connection.PeerBanningBehavior.Clone">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Connection.PeerBanningBehavior.AttachCore">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Connection.PeerNodeModel">
            <summary>
            Data structure for connected peer node.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.PeerNodeModel.Id">
            <summary>
             Peer index.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.PeerNodeModel.Address">
            <summary>
            The IP address and port of the peer.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.PeerNodeModel.LocalAddress">
            <summary>
            Local address as reported by the peer.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.PeerNodeModel.Services">
            <summary>
            The services offered.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.PeerNodeModel.IsRelayTransactions">
            <summary>
            Whether the peer has asked us to relay transactions to it.
            Currently not populated.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.PeerNodeModel.LastSend">
             <summary>
             The Unix epoch time of the last send from this node.
            Currently not populated.
             </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.PeerNodeModel.LastReceive">
             <summary>
             The Unix epoch time when we last received data from this node.
            Currently not populated.
             </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.PeerNodeModel.BytesSent">
             <summary>
             The total number of bytes we’ve sent to this node.
             Currently not populated.
             </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.PeerNodeModel.BytesReceived">
             <summary>
             The total number of bytes we’ve received from this node.
             Currently not populated.
             </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.PeerNodeModel.ConnectionTime">
             <summary>
             The connection time in seconds since epoch.
             Currently not populated.
             </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.PeerNodeModel.TimeOffset">
            <summary>
            The time offset in seconds.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.PeerNodeModel.PingTime">
            <summary>
            The ping time to the node in seconds.
            Currently not populated.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.PeerNodeModel.MinPing">
            <summary>
            The minimum observed ping time.
            Currently not populated.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.PeerNodeModel.PingWait">
            <summary>
            The number of seconds waiting for a ping.
            Currently not populated.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.PeerNodeModel.Version">
            <summary>
            The protocol version number used by this node.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.PeerNodeModel.SubVersion">
            <summary>
            The user agent this node sends in its version message.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.PeerNodeModel.Inbound">
            <summary>
            Whether node is inbound or outbound connection.
            Currently not populated.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.PeerNodeModel.IsAddNode">
            <summary>
            Whether connection was due to addnode.
            Currently not populated.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.PeerNodeModel.StartingHeight">
            <summary>
            The starting height (block) of the peer.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.PeerNodeModel.BanScore">
            <summary>
            The ban score for the node.
            Currently not populated.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.PeerNodeModel.SynchronizedHeaders">
             <summary>
             The last header we have in common with this peer.
             Currently not populated.
             </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.PeerNodeModel.SynchronizedBlocks">
            <summary>
            The last block we have in common with this peer.
            Currently not populated.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.PeerNodeModel.IsWhiteListed">
            <summary>
            Whether the peer is whitelisted.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.PeerNodeModel.Inflight">
            <summary>
            The heights of blocks we're currently asking from this peer.
            Currently not populated.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.PeerNodeModel.BytesSentPerMessage">
            <summary>
            Total sent bytes aggregated by message type.
            Currently not populated.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Connection.PeerNodeModel.BytesReceivedPerMessage">
            <summary>
            Total received bytes aggregated by message type.
            Currently not populated.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.BlockDownloadRequest">
            <summary>
            A request to the block puller that holds the chained headers of the blocks that are requested for download.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.BlockDownloadRequest.BlocksToDownload">
            <summary>The list of block headers to download.</summary>
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.IChainedHeaderTree">
            <summary>
            Tree of chained block headers that are being claimed by the connected peers and the node itself.
            It represents all chains we potentially can sync with.
            </summary>
            <remarks>
            This component is an extension of <see cref="T:Stratis.Bitcoin.Consensus.ConsensusManager"/> and is strongly linked to its functionality, it should never be called outside of CM.
            <para>
            View of the chains that are presented by connected peers might be incomplete because we always
            receive only a chunk of headers claimed by the peer in each message.
            </para>
            <para>
            It is a role of the <see cref="T:Stratis.Bitcoin.Consensus.ConsensusManager"/> to decide which of the presented chains is going to be treated as our best chain.
            <see cref="T:Stratis.Bitcoin.Consensus.ChainedHeaderTree"/> only advises which chains it might be interesting to download.
            </para>
            <para>
            This class is not thread safe and it the role of the component that uses this class to prevent race conditions.
            </para>
            </remarks>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.IChainedHeaderTree.UnconsumedBlocksDataBytes">
            <summary>
            Total size of unconsumed blocks data in bytes.
            It represents amount of memory which is occupied by block data that is waiting to be processed.
            </summary>
            <remarks>
            This value is increased every time a new block is downloaded.
            It's decreased when block header is being disconnected or when consensus tip is changed.
            </remarks>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.IChainedHeaderTree.UnconsumedBlocksCount">
            <summary>Total amount of unconsumed blocks.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.IChainedHeaderTree.ChainedBlocksDataBytes">
            <summary>Total size of ChainedHeaders data in bytes.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.IChainedHeaderTree.Initialize(NBitcoin.ChainedHeader)">
            <summary>
            Initialize the tree with consensus tip.
            </summary>
            <param name="consensusTip">The consensus tip.</param>
            <exception cref="T:Stratis.Bitcoin.Consensus.ConsensusException">Thrown in case where given <paramref name="consensusTip"/> is on a wrong network.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.IChainedHeaderTree.PeerDisconnected(System.Int32)">
            <summary>
            Remove a peer and the entire branch of the tree that it claims unless the
            headers are part of our consensus chain or are claimed by other peers.
            </summary>
            <param name="networkPeerId">Id of a peer that was disconnected.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.IChainedHeaderTree.FullValidationSucceeded(NBitcoin.ChainedHeader)">
            <summary>
            Mark a <see cref="T:NBitcoin.ChainedHeader"/> as <see cref="F:NBitcoin.ValidationState.FullyValidated"/>.
            </summary>
            <param name="chainedHeader">The fully validated header.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.IChainedHeaderTree.PartialValidationSucceeded(NBitcoin.ChainedHeader,System.Boolean@)">
            <summary>
            Handles situation when partial validation for block data for a given <see cref="T:NBitcoin.ChainedHeader"/> was successful.
            </summary>
            <remarks>
            In case partial validation was successful we want to partially validate all the next blocks for which we have block data for.
            <para>
            If block that was just partially validated has more cumulative chainwork than our consensus tip we want to switch our consensus tip to this block.
            </para>
            </remarks>
            <param name="chainedHeader">The chained header.</param>
            <param name="fullValidationRequired"><c>true</c> in case we want to switch our consensus tip to <paramref name="chainedHeader"/>.</param>
            <returns>List of chained header blocks with block data that should be partially validated next. Or <c>null</c> if none should be validated.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.IChainedHeaderTree.PartialOrFullValidationFailed(NBitcoin.ChainedHeader)">
            <summary>
            Handles situation when block data was considered to be invalid
            for a given header during the partial or full validation.
            </summary>
            <param name="chainedHeader">Chained header which block data failed the validation.</param>
            <returns>List of peer Ids that were claiming chain that contains an invalid block. Such peers should be banned.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.IChainedHeaderTree.ConsensusTipChanged(NBitcoin.ChainedHeader,System.Boolean)">
            <summary>
            Handles situation when consensuses tip was changed.
            </summary>
            <remarks>
            All peers are checked against max reorg violation and if they violate their chain will be reset.
            </remarks>
            <param name="newConsensusTip">The new consensus tip.</param>
            <param name="blockMined">Was the block mined or received from the network.</param>
            <returns>List of peer Ids that violate max reorg rule.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.IChainedHeaderTree.BlockDataDownloaded(NBitcoin.ChainedHeader,NBitcoin.Block)">
            <summary>
            Handles situation when the block's data is downloaded for a given chained header.
            </summary>
            <param name="chainedHeader">Chained header that represents <paramref name="block"/>.</param>
            <param name="block">Block data.</param>
            <returns><c>true</c> in the case where partial validation is required for the downloaded block, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.IChainedHeaderTree.ConnectNewHeaders(System.Int32,System.Collections.Generic.List{NBitcoin.BlockHeader})">
            <summary>
            A new list of headers are presented by a peer, the headers will try to be connected to the tree.
            Blocks associated with headers that are interesting (i.e. represent a chain with greater chainwork than our consensus tip)
            will be requested for download.
            </summary>
            <remarks>
            The headers are assumed to be in consecutive order.
            </remarks>
            <param name="networkPeerId">Id of a peer that presented the headers.</param>
            <param name="headers">The list of headers to connect to the tree.</param>
            <returns>
            Information about which blocks need to be downloaded together with information about which input headers were processed.
            Only headers that we can validate will be processed. The rest of the headers will be submitted later again for processing.
            </returns>
            <exception cref="T:Stratis.Bitcoin.Consensus.ConnectHeaderException">Thrown when first presented header can't be connected to any known chain in the tree.</exception>
            <exception cref="T:Stratis.Bitcoin.Consensus.CheckpointMismatchException">Thrown if checkpointed header doesn't match the checkpoint hash.</exception>
            <exception cref="T:Stratis.Bitcoin.Consensus.ConsensusErrorException">Thrown if header validation failed.</exception>
            <exception cref="T:Stratis.Bitcoin.Consensus.MaxReorgViolationException">Thrown in case maximum reorganization rule is violated.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.IChainedHeaderTree.CreateChainedHeaderOfMinedBlock(NBitcoin.Block)">
            <summary>
            Creates the chained header for a new block.
            </summary>
            <param name="block">The block.</param>
            <returns>Newly created and connected chained header for the specified block.</returns>
            <exception cref="T:Stratis.Bitcoin.Consensus.ConsensusErrorException">Thrown if header validation failed.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.IChainedHeaderTree.GetChainedHeaderBlock(NBitcoin.uint256)">
            <summary>
            Get the block and its chained header if it exists.
            If the header is not in the tree <see cref="T:Stratis.Bitcoin.Primitives.ChainedHeaderBlock"/> will be <c>null</c>, the <see cref="P:Stratis.Bitcoin.Primitives.ChainedHeaderBlock.Block"/> may also be null.
            </summary>
            <remarks>
            The block can be <c>null</c> when the block data has not yet been downloaded or if the block data has been persisted to the database and removed from the memory.
            </remarks>
            <returns>The block and its chained header (the <see cref="P:Stratis.Bitcoin.Primitives.ChainedHeaderBlock.Block"/> can be <c>null</c> or the <see cref="T:Stratis.Bitcoin.Primitives.ChainedHeaderBlock"/> result can be <c>null</c>).</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.IChainedHeaderTree.GetChainedHeader(NBitcoin.uint256)">
            <summary>Get the chained header.</summary>
            <returns>Chained header for specified block hash if it exists, <c>null</c> otherwise.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.IChainedHeaderTree.GetBestPeerTip">
            <summary>Gets tip of the best peer.</summary>
            <returns>Tip of the best peer or <c>null</c> if there are no peers.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.IChainedHeaderTree.BlockRewinded(Stratis.Bitcoin.Primitives.ChainedHeaderBlock)">
            <summary>
            Whenever a block is rewinded we set that block as unconsumed.
            </summary>
            <param name="disconnectedBlock">The disconnected block to set as unconsumed.</param>
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.ChainedHeaderTree">
            <inheritdoc />
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.ChainedHeaderTree.UnconsumedBlocksDataBytes">
            <inheritdoc />
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.ChainedHeaderTree.UnconsumedBlocksCount">
            <inheritdoc />
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.ChainedHeaderTree.ChainedBlocksDataBytes">
            <inheritdoc />
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.ChainedHeaderTree.LocalPeerId">
            <summary>A special peer identifier that represents our local node.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.ChainedHeaderTree.KeepBlockDataForLastBlocks">
            <summary>Specifies for how many blocks from the consensus tip the block data should be kept in the memory.</summary>
            <remarks>
            TODO: calculate the actual value based on the max block size. Set threshold in bytes. Make it configurable.
            </remarks>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.ChainedHeaderTree.peerIdsByTipHash">
            <summary>Lists of peer identifiers mapped by hashes of the block headers that are considered to be their tips.</summary>
            <remarks>
            During the consensus tip changing process, which includes both the reorganization and advancement on the same chain,
            it happens that there are two entries for <see cref="F:Stratis.Bitcoin.Consensus.ChainedHeaderTree.LocalPeerId"/>. This means that two different blocks are being
            claimed by our node as its tip. This is necessary in order to protect the new consensus tip candidate from being
            removed in case peers that were claiming it disconnect during the consensus tip changing process.
            <para>
            All the leafs of the tree have to be tips of chains presented by peers, which means that
            hashes of the leaf block headers have to be keys with non-empty values in this dictionary.
            </para>
            </remarks>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.ChainedHeaderTree.peerTipsByPeerId">
            <summary>A list of peer identifiers that are mapped to their tips.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.ChainedHeaderTree.chainedHeadersByHash">
            <summary>
            Chained headers mapped by their hashes.
            Every chained header that is connected to the tree has to have its hash in this dictionary.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ChainedHeaderTree.Initialize(NBitcoin.ChainedHeader)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ChainedHeaderTree.GetChainedHeaderBlock(NBitcoin.uint256)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ChainedHeaderTree.GetChainedHeader(NBitcoin.uint256)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ChainedHeaderTree.GetConsensusTip">
            <summary>Gets the consensus tip.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ChainedHeaderTree.PeerDisconnected(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ChainedHeaderTree.FullValidationSucceeded(NBitcoin.ChainedHeader)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ChainedHeaderTree.PartialValidationSucceeded(NBitcoin.ChainedHeader,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ChainedHeaderTree.ClaimPeerTip(System.Int32,NBitcoin.uint256)">
            <summary>Sets the tip claim for a peer.</summary>
            <param name="networkPeerId">Peer Id.</param>
            <param name="tipHash">Tip's hash.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ChainedHeaderTree.PartialOrFullValidationFailed(NBitcoin.ChainedHeader)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ChainedHeaderTree.ConsensusTipChanged(NBitcoin.ChainedHeader,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ChainedHeaderTree.FindPeersToResync(NBitcoin.ChainedHeader)">
            <summary>Checks each peer's tip if it violates max reorg rule.
            Peers that violate it must be resynced.</summary>
            <param name="consensusTip">Consensus tip.</param>
            <returns>List of peers which tips violate max reorg rule.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ChainedHeaderTree.FindForkIfChainedHeadersNotOnSameChain(NBitcoin.ChainedHeader,NBitcoin.ChainedHeader)">
            <summary>Find the fork between two headers and return the fork if the headers are not on the same chain.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ChainedHeaderTree.CleanOldBlockDataFromMemory(NBitcoin.ChainedHeader)">
            <summary>Cleans the block data for chained headers that are old. This data will still exist in the block store if it is enabled.</summary>
            <param name="consensusTip">Consensus tip.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ChainedHeaderTree.RemoveSubtree(NBitcoin.ChainedHeader)">
            <summary>
            Remove all the branches in the tree that are after the given <paramref name="subtreeRoot"/>
            including it and return all the peers that where claiming next headers.
            </summary>
            <param name="subtreeRoot">The chained header to start from.</param>
            <returns>List of peer Ids that were claiming headers on removed chains. Such peers should be banned.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ChainedHeaderTree.BlockDataDownloaded(NBitcoin.ChainedHeader,NBitcoin.Block)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ChainedHeaderTree.ConnectNewHeaders(System.Int32,System.Collections.Generic.List{NBitcoin.BlockHeader})">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ChainedHeaderTree.MarkBetterChainAsRequired(NBitcoin.ChainedHeader,NBitcoin.ChainedHeader)">
            <summary>
            A chain with more work than our current consensus tip was found so mark all it's descendants as required.
            </summary>
            <param name="lastRequiredHeader">Last header that should be required for download.</param>
            <param name="lastNewHeader">Last new header that was created.</param>
            <returns>The new headers that need to be downloaded.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ChainedHeaderTree.MarkTrustedChainAsAssumedValid(NBitcoin.ChainedHeader)">
            <summary>
            Mark the chain ending with <paramref name="chainedHeader"/> as assumed to be valid.
            </summary>
            <param name="chainedHeader">Last <see cref="T:NBitcoin.ChainedHeader"/> to be marked as assumed valid.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ChainedHeaderTree.HandleAssumedValidHeader(NBitcoin.ChainedHeader,NBitcoin.ChainedHeader,System.Boolean)">
            <summary>
            The header is assumed to be valid, the header and all of its previous headers will be marked as assumed valid.
            If the header's cumulative work is better then <see cref="P:Stratis.Bitcoin.Base.IChainState.ConsensusTip" /> the header and all its predecessors will be marked with <see cref="F:NBitcoin.BlockDataAvailabilityState.BlockRequired" />.
            </summary>
            <param name="assumedValidHeader">The header that is assumed to be valid.</param>
            <param name="latestNewHeader">The last header in the list of presented new headers.</param>
            <param name="isBelowLastCheckpoint">Set to <c>true</c> if <paramref name="assumedValidHeader"/> is below the last checkpoint,
            <c>false</c> otherwise or if checkpoints are disabled.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ChainedHeaderTree.HandleCheckpointsHeader(NBitcoin.ChainedHeader,NBitcoin.ChainedHeader,NBitcoin.CheckpointInfo,System.Int32)">
            <summary>
            When a header is checkpointed and has a correct hash, chain that ends with such a header
            will be marked as assumed valid and requested for download.
            </summary>
            <param name="chainedHeader">Checkpointed header.</param>
            <param name="latestNewHeader">The latest new header that was presented by the peer.</param>
            <param name="checkpoint">Information about the checkpoint at the height of the <paramref name="chainedHeader" />.</param>
            <param name="peerId">Peer Id that presented chain which contains checkpointed header.</param>
            <exception cref="T:Stratis.Bitcoin.Consensus.CheckpointMismatchException">Thrown if checkpointed header doesn't match the checkpoint hash.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ChainedHeaderTree.HeaderWasRequested(NBitcoin.ChainedHeader)">
            <summary>
            Check whether a header is in one of the following states
            <see cref="F:NBitcoin.BlockDataAvailabilityState.BlockAvailable"/>, <see cref="F:NBitcoin.BlockDataAvailabilityState.BlockRequired"/>.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ChainedHeaderTree.HeaderWasMarkedAsValidated(NBitcoin.ChainedHeader)">
            <summary>
            Check whether a header is in one of the following states: <see cref="F:NBitcoin.ValidationState.PartiallyValidated"/>, <see cref="F:NBitcoin.ValidationState.FullyValidated"/>
            or is assumed to be valid.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ChainedHeaderTree.RemoveUnclaimedBranch(NBitcoin.ChainedHeader)">
            <summary>
            Remove the branch of the given <see cref="!:chainedHeader"/> from the tree that is not claimed by any peer .
            </summary>
            <param name="chainedHeader">The chained header that is the top of the branch.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ChainedHeaderTree.RemovePeerClaim(System.Int32,NBitcoin.ChainedHeader)">
            <summary>
            Remove the peer's tip and all the headers claimed by this peer unless they are also claimed by other peers.
            </summary>
            <param name="networkPeerId">The peer id that is removed.</param>
            <param name="chainedHeader">The header where we start walking back the chain from.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ChainedHeaderTree.AddOrReplacePeerTip(System.Int32,NBitcoin.uint256)">
            <summary>Set a new header as a tip for this peer and remove the old tip.</summary>
            <remarks>If the old tip is equal to <paramref name="newTip"/> the method does nothing.</remarks>
            <param name="networkPeerId">The peer id that sets a new tip.</param>
            <param name="newTip">The new tip to set.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ChainedHeaderTree.CreateChainedHeaderOfMinedBlock(NBitcoin.Block)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ChainedHeaderTree.CreateNewHeaders(System.Collections.Generic.List{NBitcoin.BlockHeader},System.Boolean@)">
            <summary>
            Find the headers that are not part of the tree and try to connect them to an existing chain
            by creating new chained headers and linking them to their previous headers.
            </summary>
            <remarks>
            Header validation is performed on each header.
            It will check if the first header violates maximum reorganization rule.
            <para>When headers are connected the next pointers of their previous headers are updated.</para>
            </remarks>
            <param name="headers">The new headers that should be connected to a chain.</param>
            <param name="insufficientInfo"><c>true</c> if there wasn't enough data to validate even the first header of all presented.</param>
            <returns>A list of newly created chained headers or <c>null</c> if no new headers were found.</returns>
            <exception cref="T:Stratis.Bitcoin.Consensus.MaxReorgViolationException">Thrown in case maximum reorganization rule is violated.</exception>
            <exception cref="T:Stratis.Bitcoin.Consensus.ConnectHeaderException">Thrown if it wasn't possible to connect the first new header.</exception>
            <exception cref="T:Stratis.Bitcoin.Consensus.ConsensusErrorException">Thrown if header validation failed.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ChainedHeaderTree.CreateAndValidateNewChainedHeader(NBitcoin.BlockHeader,NBitcoin.ChainedHeader,System.Boolean@)">
            <exception cref="T:Stratis.Bitcoin.Consensus.ConsensusErrorException">Thrown if header validation failed.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ChainedHeaderTree.TryFindNewHeaderIndex(System.Collections.Generic.List{NBitcoin.BlockHeader},System.Int32@)">
            <summary>
            Find the first header in the given list of <see cref="!:headers"/> that does not exist in <see cref="F:Stratis.Bitcoin.Consensus.ChainedHeaderTree.chainedHeadersByHash"/>.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ChainedHeaderTree.CheckMaxReorgRuleViolated(NBitcoin.ChainedHeader)">
            <summary>
            Checks if switching to specified <paramref name="chainedHeader"/> would require rewinding consensus behind the finalized block height.
            </summary>
            <param name="chainedHeader">The header that needs to be checked for reorg.</param>
            <exception cref="T:Stratis.Bitcoin.Consensus.MaxReorgViolationException">Thrown in case maximum reorganization rule is violated.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ChainedHeaderTree.GetBestPeerTip">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ChainedHeaderTree.BlockRewinded(Stratis.Bitcoin.Primitives.ChainedHeaderBlock)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.ConnectNewHeadersResult">
            <summary>
            Represents the result of the <see cref="M:Stratis.Bitcoin.Consensus.ChainedHeaderTree.ConnectNewHeaders(System.Int32,System.Collections.Generic.List{NBitcoin.BlockHeader})"/> method.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.ConnectNewHeadersResult.DownloadFrom">
            <summary>The earliest header in the chain of the list of headers we are interested in downloading.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.ConnectNewHeadersResult.DownloadTo">
            <summary>The latest header in the chain of the list of headers we are interested in downloading.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.ConnectNewHeadersResult.Consumed">
            <summary>Represents the last processed header from the headers presented by the peer.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConnectNewHeadersResult.ToString">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConnectNewHeadersResult.ToArray">
            <summary>
            Convert the <see cref="P:Stratis.Bitcoin.Consensus.ConnectNewHeadersResult.DownloadFrom" /> and <see cref="P:Stratis.Bitcoin.Consensus.ConnectNewHeadersResult.DownloadTo" /> to an array
            of consecutive headers, both items are included in the array.
            </summary>
            <returns>Array of consecutive headers.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.ICheckpoints">
            <summary>
            Interface of block header hash checkpoint provider.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ICheckpoints.GetLastCheckpointHeight">
            <summary>
            Obtains a height of the last checkpointed block.
            </summary>
            <returns>Height of the last checkpointed block, or 0 if no checkpoint is available.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ICheckpoints.CheckHardened(System.Int32,NBitcoin.uint256)">
            <summary>
            Checks if a block header hash at specific height is in violation with the hardcoded checkpoints.
            </summary>
            <param name="height">Height of the block.</param>
            <param name="hash">Block header hash to check.</param>
            <returns>
            <c>true</c> if either there is no checkpoint for the given height, or if the checkpointed block header hash equals
            to the checked <paramref name="hash"/>. <c>false</c> if there is a checkpoint for the given <paramref name="height"/>,
            but the checkpointed block header hash is not the same as the checked <paramref name="hash"/>.
            </returns>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ICheckpoints.GetCheckpoint(System.Int32)">
            <summary>
            Retrieves checkpoint for a block at given height.
            </summary>
            <param name="height">Height of the block.</param>
            <returns>Checkpoint information or <c>null</c> if a checkpoint does not exist for given <paramref name="height"/>.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.Checkpoints">
            <summary>
            Checkpoints is a mechanism on how to avoid validation of historic blocks for which there
            already is a consensus on the network. This allows speeding up IBD, especially on POS networks.
            </summary>
            <remarks>
            From https://github.com/bitcoin/bitcoin/blob/b1973d6181eacfaaf45effb67e0c449ea3a436b8/src/chainparams.cpp#L66 :
            What makes a good checkpoint block? It is surrounded by blocks with reasonable timestamps
            (no blocks before with a timestamp after, none after with timestamp before). It also contains
            no strange transactions.
            </remarks>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.Checkpoints.network">
            <summary>The current network. </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.Checkpoints.consensusSettings">
            <summary>Consensus settings for the full node.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.Checkpoints.#ctor">
            <summary>
            Initializes a new instance of the object.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.Checkpoints.#ctor(NBitcoin.Network,Stratis.Bitcoin.Configuration.Settings.ConsensusSettings)">
            <summary>
            Initializes a new instance of the object.
            </summary>
            <param name="network">Specification of the network the node runs on - regtest/testnet/mainnet/stratis test/main.</param>
            <param name="consensusSettings">Consensus settings for node - used to see if checkpoints have been disabled or not.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.Checkpoints.GetLastCheckpointHeight">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.Checkpoints.GetLastCheckpoint(System.Int32@)">
            <summary>
            Gets the last checkpoint.
            </summary>
            <returns>Last <see cref="T:NBitcoin.CheckpointInfo"/> or null.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.Checkpoints.CheckHardened(System.Int32,NBitcoin.uint256)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.Checkpoints.GetCheckpoint(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.ConsensusErrorException">
            <summary>
            An exception that is used when consensus breaking errors are found.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusErrorException.#ctor(Stratis.Bitcoin.Consensus.ConsensusError)">
            <summary>
            Initialize a new instance of <see cref="T:Stratis.Bitcoin.Consensus.ConsensusErrorException"/>.
            </summary>
            <param name="error">The error that triggered this exception.</param>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.ConsensusErrorException.ConsensusError">
            <summary>The error that triggered this exception. </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.ConsensusError">
            <summary>
            A consensus error that is used to specify different types of reasons a block does not confirm to the consensus rules.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.ConsensusError.Code">
            <summary>
            The code representing this consensus error.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.ConsensusError.Message">
            <summary>
            A user friendly message to describe this error.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusError.Throw">
            <summary>
            A method that will throw a <see cref="T:Stratis.Bitcoin.Consensus.ConsensusErrorException"/> with the current consensus error.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusError.#ctor(System.String,System.String)">
            <summary>
            Initialize a new instance of <see cref="T:Stratis.Bitcoin.Consensus.ConsensusErrorException"/>.
            </summary>
            <param name="code">The error code that represents the current consensus breaking error.</param>
            <param name="message">A user friendly message to describe this error.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusError.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusError.op_Equality(Stratis.Bitcoin.Consensus.ConsensusError,Stratis.Bitcoin.Consensus.ConsensusError)">
            <summary>
            Compare two instances of <see cref="T:Stratis.Bitcoin.Consensus.ConsensusError"/> are the same.
            </summary>
            <param name="a">first instance to compare.</param>
            <param name="b">Second instance to compare.</param>
            <returns><c>true</c> if bother instances are the same.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusError.op_Inequality(Stratis.Bitcoin.Consensus.ConsensusError,Stratis.Bitcoin.Consensus.ConsensusError)">
            <summary>
            Compare two instances of <see cref="T:Stratis.Bitcoin.Consensus.ConsensusError"/> are not the same.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusError.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusError.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.ConsensusErrors">
            <summary>
            A class that holds consensus errors.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.HeaderInvalidException">
            <summary>
            This throws when the header of a previously block that failed
            partial or full validation and was marked as invalid is passed to the node.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.ConsensusRuleException">
            <summary>
            An exception that is contains exception coming from the <see cref="T:Stratis.Bitcoin.Consensus.IConsensusRuleEngine"/> execution.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.IntegrityValidationFailedException.PeerEndPoint">
            <summary>The peer this block came from.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.IntegrityValidationFailedException.Error">
            <summary>Consensus error.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.IntegrityValidationFailedException.BanDurationSeconds">
            <summary>Time for which peer should be banned.</summary>
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.ConsensusManager">
            <inheritdoc cref="T:Stratis.Bitcoin.Consensus.IConsensusManager"/>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.ConsensusManager.maxUnconsumedBlocksDataBytes">
            <summary>
            Maximum memory in bytes that can be taken by the blocks that were downloaded but
            not yet validated or included to the consensus chain.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.ConsensusManager.ConsumptionThresholdBytes">
            <summary>Queue consumption threshold in bytes.</summary>
            <remarks><see cref="F:Stratis.Bitcoin.Consensus.ConsensusManager.toDownloadQueue"/> consumption will start if only we have more than this value of free memory.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.ConsensusManager.MaxBlocksToAskFromPuller">
            <summary>The maximum amount of blocks that can be assigned to <see cref="T:Stratis.Bitcoin.BlockPulling.IBlockPuller"/> at the same time.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.ConsensusManager.ConsumptionThresholdSlots">
            <summary>The minimum amount of slots that should be available to trigger asking block puller for blocks.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.ConsensusManager.ConsensusIsConsideredToBeSyncedMargin">
            <summary>The amount of blocks from consensus the node is considered to be synced.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.ConsensusManager.connectionManager">
            <summary>Connection manager of all the currently connected peers.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.ConsensusManager.Tip">
            <inheritdoc />
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.ConsensusManager.ConsensusRules">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.ConsensusManager.DownloadedCallbacks">
            <summary>
            A container of call backs used by the download processes.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.ConsensusManager.DownloadedCallbacks.ConsensusRequested">
            <summary>The consensus code has requested this block, invoke the method <see cref="M:Stratis.Bitcoin.Consensus.ConsensusManager.ProcessDownloadedBlock(Stratis.Bitcoin.Primitives.ChainedHeaderBlock)"/> when block is delivered.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.ConsensusManager.DownloadedCallbacks.Callbacks">
            <summary>List of delegates to call when block is delivered.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.ConsensusManager.peersByPeerId">
            <summary>Peers mapped by their ID.</summary>
            <remarks>This object has to be protected by <see cref="F:Stratis.Bitcoin.Consensus.ConsensusManager.peerLock"/>.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.ConsensusManager.peerLock">
            <summary>Protects access to the <see cref="F:Stratis.Bitcoin.Consensus.ConsensusManager.blockPuller"/>, <see cref="F:Stratis.Bitcoin.Consensus.ConsensusManager.chainedHeaderTree"/>, <see cref="F:Stratis.Bitcoin.Consensus.ConsensusManager.expectedBlockSizes"/> and <see cref="F:Stratis.Bitcoin.Consensus.ConsensusManager.expectedBlockDataBytes"/>.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManager.InitializeAsync(NBitcoin.ChainedHeader)">
            <inheritdoc />
            <remarks>
            If <see cref="F:Stratis.Bitcoin.Consensus.ConsensusManager.blockStore"/> is not <c>null</c> (block store is available) then all block headers in
            <see cref="F:Stratis.Bitcoin.Consensus.ConsensusManager.chainedHeaderTree"/> will be marked as their block data is available.
            If store is not available the <see cref="T:Stratis.Bitcoin.Consensus.ConsensusManager"/> won't be able to serve blocks from disk,
            instead all block requests that are not in memory will be sent to the <see cref="F:Stratis.Bitcoin.Consensus.ConsensusManager.blockPuller"/>.
            </remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManager.HeadersPresented(Stratis.Bitcoin.P2P.Peer.INetworkPeer,System.Collections.Generic.List{NBitcoin.BlockHeader},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManager.PeerDisconnected(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManager.BlockMinedAsync(NBitcoin.Block)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManager.PeerDisconnectedLocked(System.Int32)">
            <summary>
            Called after a peer was disconnected.
            Informs underlying components about the event but only if the node is not being shut down at the moment.
            Processes any remaining blocks to download.
            </summary>
            <remarks>Have to be locked by <see cref="F:Stratis.Bitcoin.Consensus.ConsensusManager.peerLock"/>.</remarks>
            <param name="peerId">The peer that was disconnected.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManager.ProcessDownloadedBlock(Stratis.Bitcoin.Primitives.ChainedHeaderBlock)">
            <summary>
            A callback that is triggered when a block that <see cref="T:Stratis.Bitcoin.Consensus.ConsensusManager"/> requested was downloaded.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManager.OnPartialValidationSucceededAsync(NBitcoin.ChainedHeader)">
            <summary>
            Handles a situation when partial validation of a block was successful. Informs CHT about
            finishing partial validation process and starting a new partial validation or full validation.
            </summary>
            <param name="chainedHeader">Header of a block which validation was successful.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManager.NotifyBehaviorsOnConsensusTipChangedAsync">
            <summary>
            Notifies the chained header behaviors of all connected peers when a consensus tip is changed.
            Consumes headers from their caches if there are any.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManager.FullyValidateLockedAsync(NBitcoin.ChainedHeader,System.Boolean)">
            <summary>Attempt to switch to new chain, which may require rewinding blocks from the current chain.</summary>
            <remarks>
            It is possible that during connection we find out that blocks that we tried to connect are invalid and we switch back to original chain.
            Should be locked by <see cref="F:Stratis.Bitcoin.Consensus.ConsensusManager.reorgLock"/>.
            </remarks>
            <param name="newTip">Tip of the chain that will become the tip of our consensus chain if full validation will succeed.</param>
            <param name="blockMined">Was the block mined or received from the network.</param>
            <returns>Validation related information.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManager.RewindToForkPointAsync(NBitcoin.ChainedHeader,NBitcoin.ChainedHeader)">
            <summary>Rewinds to fork point.</summary>
            <param name="fork">The fork point. It can't be ahead of <paramref name="oldTip"/>.</param>
            <param name="oldTip">The old tip.</param>
            <exception cref="T:Stratis.Bitcoin.Consensus.ConsensusException">Thrown in case <paramref name="fork"/> is ahead of the <paramref name="oldTip"/>.</exception>
            <returns>List of blocks that were disconnected.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManager.ConnectChainAsync(System.Collections.Generic.List{Stratis.Bitcoin.Primitives.ChainedHeaderBlock},System.Boolean)">
            <summary>Connects new chain.</summary>
            <param name="blocksToConnect">List of blocks to connect.</param>
            <param name="blockMined">Was the block mined or received from the network.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManager.ReconnectOldChainAsync(System.Collections.Generic.List{Stratis.Bitcoin.Primitives.ChainedHeaderBlock})">
            <summary>Reconnects the old chain.</summary>
            <param name="blocksToReconnect">List of blocks to reconnect.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManager.ResyncPeersAsync(System.Collections.Generic.List{System.Int32})">
            <summary>
            Informs <see cref="T:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior"/> of each peer
            to be resynced and simulates disconnection of the peer.
            </summary>
            <param name="peerIds">List of peer IDs to resync.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManager.ConnectBlockAsync(Stratis.Bitcoin.Primitives.ChainedHeaderBlock)">
            <summary>
            Attempts to connect a block to a chain with specified tip.
            </summary>
            <param name="blockToConnect">Block to connect.</param>
            <exception cref="T:Stratis.Bitcoin.Consensus.ConsensusException">Thrown in case CHT is not in a consistent state.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManager.TryGetBlocksToConnectAsync(NBitcoin.ChainedHeader,System.Int32)">
            <summary>Try to find all blocks between two headers.</summary>
            <returns>Collection of blocks that were loaded. In case at least one block was not present <c>null</c> will be returned.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManager.SetConsensusTip(NBitcoin.ChainedHeader,System.Boolean)">
            <summary>Sets the consensus tip.</summary>
            <param name="newTip">New consensus tip.</param>
            <param name="blockMined">Was the block mined or received from the network.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManager.SetConsensusTipInternalLocked(NBitcoin.ChainedHeader)">
            <summary>Updates all internal values with the new tip.</summary>
            <remarks>Have to be locked by <see cref="F:Stratis.Bitcoin.Consensus.ConsensusManager.peerLock"/>.</remarks>
            <param name="newTip">New consensus tip.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManager.DownloadBlocks(NBitcoin.ChainedHeader[],Stratis.Bitcoin.Consensus.OnBlockDownloadedCallback)">
            <summary>
            Request a list of block headers to download their respective blocks.
            If <paramref name="chainedHeaders"/> is not an array of consecutive headers it will be split to batches of consecutive header requests.
            Callbacks of all entries are added to <see cref="F:Stratis.Bitcoin.Consensus.ConsensusManager.callbacksByBlocksRequestedHash"/>. If a block header was already requested
            to download and not delivered yet, it will not be requested again, instead just it's callback will be called when the block arrives.
            </summary>
            <param name="chainedHeaders">Array of chained headers to download.</param>
            <param name="onBlockDownloadedCallback">A callback to call when the block was downloaded.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManager.BlockDownloaded(NBitcoin.uint256,NBitcoin.Block,System.Int32)">
            <summary>Method that is provided as a callback to <see cref="T:Stratis.Bitcoin.BlockPulling.IBlockPuller"/>.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManager.GetOrDownloadBlocksAsync(System.Collections.Generic.List{NBitcoin.uint256},Stratis.Bitcoin.Consensus.OnBlockDownloadedCallback)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManager.GetBlockDataAsync(NBitcoin.uint256)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManager.ProcessDownloadQueueLocked">
            <summary>
            Processes items in the <see cref="F:Stratis.Bitcoin.Consensus.ConsensusManager.toDownloadQueue"/> and ask the block puller for blocks to download.
            If the tree has too many unconsumed blocks we will not ask block puller for more until some blocks are consumed.
            </summary>
            <remarks>
            Requests that have too many blocks will be split in batches.
            The amount of blocks in 1 batch to downloaded depends on the average value in <see cref="M:Stratis.Bitcoin.BlockPulling.IBlockPuller.GetAverageBlockSizeBytes"/>.
            Should be protected by the <see cref="F:Stratis.Bitcoin.Consensus.ConsensusManager.peerLock"/>.
            </remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManager.IsConsensusConsideredToBeSyncedLocked">
            <summary>
            Returns <c>true</c> if consensus' height is within <see cref="F:Stratis.Bitcoin.Consensus.ConsensusManager.ConsensusIsConsideredToBeSyncedMargin"/>
            blocks from the best tip's height.
            </summary>
            <remarks>Should be locked by <see cref="F:Stratis.Bitcoin.Consensus.ConsensusManager.peerLock"/></remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManager.FormatBigNumber(System.Int64)">
            <summary>Formats the big number.</summary>
            <remarks><c>123456789</c> => <c>123,456,789</c></remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManager.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior">
            <summary>Behavior that takes care of headers protocol. It also keeps the notion of peer's consensus tip.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.initialBlockDownloadState">
            <summary>Provider of IBD state.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.consensusManager">
            <inheritdoc cref="T:Stratis.Bitcoin.Consensus.ConsensusManager"/>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.chain">
            <inheritdoc cref="T:NBitcoin.ConcurrentChain"/>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.peerBanning">
            <inheritdoc cref="T:Stratis.Bitcoin.Connection.IPeerBanning"/>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.loggerFactory">
            <summary>Factory for creating loggers.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.BestReceivedTip">
            <summary>
            Our view of the peer's consensus tip constructed on peer's announcement of its tip using "headers" message.
            </summary>
            <remarks>
            The announced tip is accepted if it seems to be valid. Validation is only done on headers and so the announced tip may refer to invalid block.
            </remarks>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.BestSentHeader">
            <summary>Gets the best header sent using <see cref="T:Stratis.Bitcoin.P2P.Protocol.Payloads.HeadersPayload"/>.</summary>
            <remarks>Write access should be protected by <see cref="F:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.bestSentHeaderLock"/>.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.autosyncTimer">
            <summary>Timer that periodically tries to sync.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.AutosyncIntervalMinutes">
            <summary>Interval in minutes for the <see cref="F:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.autosyncTimer"/>.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.CacheSyncHeadersThreshold">
            <summary>Amount of headers that should be cached until we stop syncing from the peer.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.MaxItemsPerHeadersMessage">
            <summary>Maximum number of headers in <see cref="T:Stratis.Bitcoin.P2P.Protocol.Payloads.HeadersPayload"/> according to Bitcoin protocol.</summary>
            <seealso cref="!:https://en.bitcoin.it/wiki/Protocol_documentation#getheaders"/>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.cachedHeaders">
            <summary>List of block headers that were not yet consumed by <see cref="T:Stratis.Bitcoin.Consensus.ConsensusManager"/>.</summary>
            <remarks>Should be protected by <see cref="F:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.asyncLock"/>.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.asyncLock">
            <summary>Protects access to <see cref="F:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.cachedHeaders"/>.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.bestSentHeaderLock">
            <summary>Protects write access to the <see cref="P:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.BestSentHeader"/>.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.ConsensusTipChangedAsync">
            <summary>Presents cached headers to <see cref="T:Stratis.Bitcoin.Consensus.ConsensusManager"/> from the cache if any and removes consumed from the cache.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.CanConsumeCache">
            <summary>Determines whether cached headers (if any) should be pushed to consensus manager for consumption.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.OnMessageReceivedAsync(Stratis.Bitcoin.P2P.Peer.INetworkPeer,Stratis.Bitcoin.P2P.Protocol.IncomingMessage)">
            <summary>
            Processes and incoming message from the peer.
            </summary>
            <param name="peer">Peer from which the message was received.</param>
            <param name="message">Received message to process.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.ProcessGetHeadersAsync(Stratis.Bitcoin.P2P.Peer.INetworkPeer,Stratis.Bitcoin.P2P.Protocol.Payloads.GetHeadersPayload)">
            <summary>
            Processes "getheaders" message received from the peer.
            </summary>
            <param name="peer">Peer from which the message was received.</param>
            <param name="getHeadersPayload">Payload of "getheaders" message to process.</param>
            <remarks>
            "getheaders" message is sent by the peer in response to "headers" message until an empty array is received.
            <para>
            This payload notifies peers of our current best validated height, which is held by consensus tip.
            </para>
            <para>
            If the peer is behind/equal to our best height an empty array is sent back.
            </para>
            </remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.GetLastHeaderToSend(NBitcoin.ChainedHeader,NBitcoin.uint256)">
            <summary>Find last header that should be included in headers payload.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.ConstructHeadersPayload(Stratis.Bitcoin.P2P.Protocol.Payloads.GetHeadersPayload,NBitcoin.ChainedHeader@)">
            <summary>Constructs the headers from locator to consensus tip.</summary>
            <param name="getHeadersPayload">The <see cref="T:Stratis.Bitcoin.P2P.Protocol.Payloads.GetHeadersPayload"/> payload that triggered the creation of this payload.</param>
            <param name="lastHeader"><see cref="T:NBitcoin.ChainedHeader"/> of the last header that was added to the <see cref="T:Stratis.Bitcoin.P2P.Protocol.Payloads.HeadersPayload"/>.</param>
            <returns>Payload with headers from locator towards consensus tip or <c>null</c> in case locator was invalid.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.ProcessHeadersAsync(Stratis.Bitcoin.P2P.Peer.INetworkPeer,System.Collections.Generic.List{NBitcoin.BlockHeader})">
            <summary>
            Processes "headers" message received from the peer.
            </summary>
            <param name="peer">Peer from which the message was received.</param>
            <param name="headers">List of headers to process.</param>
            <remarks>
            "headers" message is sent in response to "getheaders" message or it is solicited
            by the peer when a new block is validated (unless in IBD).
            <para>
            When we receive "headers" message from the peer, we can adjust our knowledge
            of the peer's view of the chain. We update its pending tip, which represents
            the tip of the best chain we think the peer has.
            </para>
            </remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.ValidateHeadersFromPayload(Stratis.Bitcoin.P2P.Peer.INetworkPeer,System.Collections.Generic.List{NBitcoin.BlockHeader},System.String@)">
            <summary>Validates the headers payload.</summary>
            <param name="peer">The peer who sent the payload.</param>
            <param name="headers">Headers to validate.</param>
            <param name="validationError">The validation error that is set in case <c>false</c> is returned.</param>
            <returns><c>true</c> if payload was valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.PresentHeadersLockedAsync(System.Collections.Generic.List{NBitcoin.BlockHeader},System.Boolean)">
            <summary>Presents the headers to <see cref="T:Stratis.Bitcoin.Consensus.ConsensusManager"/> and handles exceptions if any.</summary>
            <remarks>Have to be locked by <see cref="F:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.asyncLock"/>.</remarks>
            <param name="headers">List of headers that the peer presented.</param>
            <param name="triggerDownload">Specifies if the download should be scheduled for interesting blocks.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.OnStateChangedAsync(Stratis.Bitcoin.P2P.Peer.INetworkPeer,Stratis.Bitcoin.P2P.Peer.NetworkPeerState)">
            <summary>Sync when handshake is finished.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.ResetPeerTipInformationAndSyncAsync">
            <summary>Resets the expected peer tip and last sent tip and triggers synchronization.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.UpdateBestSentHeader(NBitcoin.ChainedHeader)">
            <summary>Updates the best sent header but only if the new value is better or is on a different chain.</summary>
            <param name="header">The new value to set if it is better or on a different chain.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.ResyncAsync">
            <summary>Tries to sync the chain with the peer by sending it <see cref="T:Stratis.Bitcoin.P2P.Protocol.Payloads.GetHeadersPayload"/> in case peer's state is <see cref="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerState.HandShaked"/>.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.BuildGetHeadersPayload">
            <summary>
            Builds the GetHeadersPayload.
            </summary>
            <returns>The GetHeadersPayload instance. May return <c>null</c>; in such case the sync process wouldn't happen.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.ProcessInvAsync(Stratis.Bitcoin.P2P.Peer.INetworkPeer,System.Collections.Generic.List{Stratis.Bitcoin.P2P.Protocol.InventoryVector})">
            <summary>
            Processes "inv" message received from the peer.
            </summary>
            <param name="peer">Peer from which the message was received.</param>
            <param name="inventory">List of inventory vectors to process.</param>
            <remarks>
            The "inv" message is sent unsolicited by legacy nodes to announce new blocks.
            It may contain non-block hashes which should be ignored. We then need to obtain the
            headers of the announced blocks so that the header processing can be performed as
            normal. We do not request the block directly as the peer may be attempting a DoS
            attack by spamming fake inv messages.
            </remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.DetachCore">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusManagerBehavior.Clone">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.ConsensusRuleEngine">
            <inheritdoc />
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.ConsensusRuleEngine.loggerFactory">
            <summary>A factory to creates logger instances for each rule.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.ConsensusRuleEngine.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.ConsensusRuleEngine.Network">
            <summary>Specification of the network the node runs on - regtest/testnet/mainnet.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.ConsensusRuleEngine.DateTimeProvider">
            <summary>A provider of date and time.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.ConsensusRuleEngine.Chain">
            <summary>A chain of the longest block headers all the way to genesis.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.ConsensusRuleEngine.NodeDeployments">
            <summary>A deployment construction that tracks activation of features on the chain.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.ConsensusRuleEngine.ConsensusParams">
            <summary>A collection of consensus constants.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.ConsensusRuleEngine.ConsensusSettings">
            <summary>Consensus settings for the full node.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.ConsensusRuleEngine.Checkpoints">
            <summary>Provider of block header hash checkpoints.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.ConsensusRuleEngine.ChainState">
            <summary>State of the current chain that hold consensus tip.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.ConsensusRuleEngine.invalidBlockHashStore">
            <inheritdoc cref="T:Stratis.Bitcoin.Base.IInvalidBlockHashStore"/>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.ConsensusRuleEngine.performanceCounter">
            <inheritdoc cref="T:Stratis.Bitcoin.Consensus.PerformanceCounters.Rules.ConsensusRulesPerformanceCounter"/>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.ConsensusRuleEngine.headerValidationRules">
            <summary>Group of rules that are used during block header validation.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.ConsensusRuleEngine.integrityValidationRules">
            <summary>Group of rules that are used during block integrity validation.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.ConsensusRuleEngine.partialValidationRules">
            <summary>Group of rules that are used during partial block validation.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.ConsensusRuleEngine.fullValidationRules">
            <summary>Group of rules that are used during full validation (connection of a new block).</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusRuleEngine.InitializeAsync(NBitcoin.ChainedHeader)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusRuleEngine.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusRuleEngine.Register">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusRuleEngine.HeaderValidation(NBitcoin.ChainedHeader)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusRuleEngine.IntegrityValidation(NBitcoin.ChainedHeader,NBitcoin.Block)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusRuleEngine.FullValidationAsync(NBitcoin.ChainedHeader,NBitcoin.Block)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusRuleEngine.PartialValidationAsync(NBitcoin.ChainedHeader,NBitcoin.Block)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusRuleEngine.HandleConsensusError(Stratis.Bitcoin.Consensus.ValidationContext)">
            <summary>Adds block hash to a list of failed header unless specific consensus error was used that doesn't require block banning.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusRuleEngine.CreateRuleContext(Stratis.Bitcoin.Consensus.ValidationContext)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusRuleEngine.GetBlockHashAsync">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ConsensusRuleEngine.RewindAsync">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.RewindState">
            <summary>
            A class that is used to store transitions of state of consensus underline storage.
            </summary>
            <remarks>
            A transition state can have transition information of several consecutive block,
            The <see cref="P:Stratis.Bitcoin.Consensus.RewindState.BlockHash"/> parameter represents the tip of the consecutive list of blocks.
            </remarks>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.RewindState.BlockHash">
            <summary>
            The block hash that represents the tip of the transition.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.IConsensusManager">
            <summary>
            TODO add a big nice comment.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.IConsensusManager.Tip">
            <summary>The current tip of the chain that has been validated.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.IConsensusManager.ConsensusRules">
            <summary>The collection of rules.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.IConsensusManager.InitializeAsync(NBitcoin.ChainedHeader)">
            <summary>
            Set the tip of <see cref="T:Stratis.Bitcoin.Consensus.ConsensusManager"/>, if the given <paramref name="chainTip"/> is not equal to <see cref="P:Stratis.Bitcoin.Consensus.IConsensusManager.Tip"/>
            then rewind consensus until a common header is found.
            </summary>
            <param name="chainTip">Last common header between chain repository and block store if it's available,
            if the store is not available it is the chain repository tip.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.IConsensusManager.HeadersPresented(Stratis.Bitcoin.P2P.Peer.INetworkPeer,System.Collections.Generic.List{NBitcoin.BlockHeader},System.Boolean)">
            <summary>
            A list of headers are presented from a given peer,
            we'll attempt to connect the headers to the tree and if new headers are found they will be queued for download.
            </summary>
            <param name="peer">The peer that providing the headers.</param>
            <param name="headers">The list of new headers.</param>
            <param name="triggerDownload">Specifies if the download should be scheduled for interesting blocks.</param>
            <returns>Information about consumed headers.</returns>
            <exception cref="T:Stratis.Bitcoin.Consensus.ConnectHeaderException">Thrown when first presented header can't be connected to any known chain in the tree.</exception>
            <exception cref="T:Stratis.Bitcoin.Consensus.CheckpointMismatchException">Thrown if checkpointed header doesn't match the checkpoint hash.</exception>
            <exception cref="T:Stratis.Bitcoin.Consensus.MaxReorgViolationException">Thrown in case maximum reorganization rule is violated.</exception>
            <exception cref="T:Stratis.Bitcoin.Consensus.ConsensusErrorException">Thrown if header validation failed.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.IConsensusManager.PeerDisconnected(System.Int32)">
            <summary>
            Called after a peer was disconnected.
            Informs underlying components about the even.
            Processes any remaining blocks to download.
            </summary>
            <param name="peerId">The peer that was disconnected.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.IConsensusManager.GetOrDownloadBlocksAsync(System.Collections.Generic.List{NBitcoin.uint256},Stratis.Bitcoin.Consensus.OnBlockDownloadedCallback)">
            <summary>
            Provides block data for the given block hashes.
            </summary>
            <remarks>
            First we check if the block exists in chained header tree, then it check the block store and if it wasn't found there the block will be scheduled for download.
            Given callback is called when the block is obtained. If obtaining the block fails the callback will be called with <c>null</c>.
            </remarks>
            <param name="blockHashes">The block hashes to download.</param>
            <param name="onBlockDownloadedCallback">The callback that will be called for each downloaded block.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.IConsensusManager.GetBlockDataAsync(NBitcoin.uint256)">
            <summary>Loads the block data from <see cref="!:chainedHeaderTree"/> or block store if it's enabled.</summary>
            <param name="blockHash">The block hash.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.IConsensusManager.BlockMinedAsync(NBitcoin.Block)">
            <summary>
            A new block was mined by the node and is attempted to connect to tip.
            </summary>
            <param name="block">Block that was mined.</param>
            <exception cref="T:Stratis.Bitcoin.Consensus.ConsensusErrorException">Thrown if header validation failed.</exception>
            <exception cref="T:Stratis.Bitcoin.Consensus.ConsensusException">Thrown if partial or full validation failed or if full validation wasn't required.</exception>
            <returns><see cref="T:NBitcoin.ChainedHeader"/> of a block that was mined.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.OnBlockDownloadedCallback">
            <summary>
            A delegate that is used to send callbacks when a block is downloaded from the queued requests to downloading blocks.
            </summary>
            <param name="chainedHeaderBlock">The pair of the block and its chained header.</param>
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.IConsensusRuleEngine">
            <summary>
            An engine that enforce the execution and validation of consensus rule.
            </summary>
            <remarks>
            In order for a block to be valid it has to successfully pass the rules checks.
            A block  that is not valid will result in the <see cref="P:Stratis.Bitcoin.Consensus.ValidationContext.Error"/> as not <c>null</c>.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Stratis.Bitcoin.Consensus.IConsensusRuleEngine.InitializeAsync(NBitcoin.ChainedHeader)" -->
        <member name="M:Stratis.Bitcoin.Consensus.IConsensusRuleEngine.Register">
            <summary>
            Register a new rule to the engine
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.IConsensusRuleEngine.GetRule``1">
            <summary>
            Gets the consensus rule that is assignable to the supplied generic type.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.IConsensusRuleEngine.CreateRuleContext(Stratis.Bitcoin.Consensus.ValidationContext)">
            <summary>
            Create an instance of the <see cref="T:Stratis.Bitcoin.Consensus.Rules.RuleContext"/> to be used by consensus validation.
            </summary>
            <remarks>
            Each network type can specify it's own <see cref="T:Stratis.Bitcoin.Consensus.Rules.RuleContext"/>.
            </remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.IConsensusRuleEngine.GetBlockHashAsync">
            <summary>
            Retrieves the block hash of the current tip of the chain.
            </summary>
            <returns>Block hash of the current tip of the chain.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.IConsensusRuleEngine.RewindAsync">
            <summary>
            Rewinds the chain to the last saved state.
            <para>
            This operation includes removing the recent transactions
            and restoring the chain to an earlier state.
            </para>
            </summary>
            <returns>Hash of the block header which is now the tip of the chain.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.IConsensusRuleEngine.HeaderValidation(NBitcoin.ChainedHeader)">
            <summary>Execute header validation rules.</summary>
            <param name="header">The chained header that is going to be validated.</param>
            <returns>Context that contains validation result related information.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.IConsensusRuleEngine.IntegrityValidation(NBitcoin.ChainedHeader,NBitcoin.Block)">
            <summary>Execute integrity validation rules.</summary>
            <param name="header">The chained header that is going to be validated.</param>
            <param name="block">The block that is going to be validated.</param>
            <returns>Context that contains validation result related information.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.IConsensusRuleEngine.PartialValidationAsync(NBitcoin.ChainedHeader,NBitcoin.Block)">
            <summary>Execute partial validation rules.</summary>
            <param name="header">The chained header that is going to be validated.</param>
            <param name="block">The block that is going to be validated.</param>
            <returns>Context that contains validation result related information.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.IConsensusRuleEngine.FullValidationAsync(NBitcoin.ChainedHeader,NBitcoin.Block)">
            <summary>Execute full validation rules.</summary>
            <param name="header">The chained header that is going to be validated.</param>
            <param name="block">The block that is going to be validated.</param>
            <returns>Context that contains validation result related information.</returns>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.PerformanceCounters.ConsensusManager.ConsensusManagerPerformanceCounter.currentSnapshot">
            <summary>Snapshot that is currently being populated.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.PerformanceCounters.ConsensusManager.ConsensusManagerPerformanceCounter.MeasureTotalConnectionTime">
            <summary>
            Measures time to execute <c>OnPartialValidationSucceededAsync</c>.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.PerformanceCounters.ConsensusManager.ConsensusManagerPerformanceCounter.TakeSnapshot">
            <summary>Takes current snapshot.</summary>
            <remarks>Not thread-safe. Caller should ensure that it's not called from different threads at once.</remarks>
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.PerformanceCounters.ConsensusManager.ConsensusManagerPerformanceSnapshot">
            <summary>Snapshot of <see cref="N:Stratis.Bitcoin.Consensus.PerformanceCounters.ConsensusManager"/> performance.</summary>
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.PerformanceCounters.Rules.ConsensusRulesPerformanceCounter">
            <summary>Measures rules average execution time.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.PerformanceCounters.Rules.ConsensusRulesPerformanceCounter.registeredRules">
            <summary>List of rules registered for performance tracking.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.PerformanceCounters.Rules.ConsensusRulesPerformanceCounter.currentSnapshot">
            <summary>Snapshot that is currently being populated.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.PerformanceCounters.Rules.ConsensusRulesPerformanceCounter.MeasureRuleExecutionTime(NBitcoin.Rules.IConsensusRuleBase)">
            <summary>Measures the rule execution time and adds this sample to performance counter.</summary>
            <param name="rule">Rule being measured.</param>
            <returns><see cref="T:System.IDisposable"/> that should be disposed after rule has finished it's execution.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.PerformanceCounters.Rules.ConsensusRulesPerformanceCounter.TakeSnapshot">
            <summary>Takes current snapshot.</summary>
            <remarks>Not thread-safe. Caller should ensure that it's not called from different threads at once.</remarks>
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.PerformanceCounters.Rules.ConsensusRulesPerformanceSnapshot">
            <summary>Snapshot of rule's performance.</summary>
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.PerformanceCounters.Rules.RuleItem">
            <summary>Container of info related to a consensus rule.</summary>
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.PerformanceCounters.Rules.RulePerformance">
            <summary>
            Container of general information about the consensus rule as well as
            amount of times it was executed and sum of execution times.
            </summary>
            <seealso cref="T:Stratis.Bitcoin.Consensus.PerformanceCounters.Rules.RuleItem" />
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.Rules.ConsensusRuleBase.Logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.Rules.ConsensusRuleBase.Parent">
            <summary>The engine this rule belongs to.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.Rules.ConsensusRuleBase.Initialize">
            <summary>
            Allow a rule to initialize itself.
            The rule can verify that other rules are present using the <see cref="!:IConsensusRuleEngine.Rules"/>.
            The rule can internally initialize its state.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.Rules.SyncConsensusRule">
            <summary>An abstract rule for implementing consensus rules.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.Rules.SyncConsensusRule.Run(Stratis.Bitcoin.Consensus.Rules.RuleContext)">
            <summary>
            Execute the logic in the current rule.
            If the validation of the rule fails a <see cref="T:Stratis.Bitcoin.Consensus.ConsensusErrorException"/> will be thrown.
            </summary>
            <param name="context">The context that has all info that needs to be validated.</param>
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.Rules.AsyncConsensusRule">
            <summary>An abstract rule for implementing consensus rules.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.Rules.AsyncConsensusRule.RunAsync(Stratis.Bitcoin.Consensus.Rules.RuleContext)">
            <summary>
            Execute the logic in the current rule in an async approach.
            If the validation of the rule fails a <see cref="T:Stratis.Bitcoin.Consensus.ConsensusErrorException"/> will be thrown.
            </summary>
            <param name="context">The context that has all info that needs to be validated.</param>
            <returns>The execution task.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.Rules.IRuleRegistration">
            <summary>
            An interface that will allow the registration of bulk consensus rules in to the engine.
            </summary>
            <remarks>
            It is important to note that there is high importance to the order the rules are registered
            with the engine, this is important for rules with dependencies on other rules.
            Rules are executed in the same order they are registered with the engine.
            </remarks>
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.Rules.RuleContext">
            <summary>
            Context that contains variety of information regarding blocks validation and execution.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.Rules.RuleContext.SkipValidation">
            <summary>Whether to skip block validation for this block due to either a checkpoint or assumevalid hash set.</summary>
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.ScriptAddressReader">
            <inheritdoc cref="T:Stratis.Bitcoin.Interfaces.IScriptAddressReader"/>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ScriptAddressReader.GetAddressFromScriptPubKey(NBitcoin.Network,NBitcoin.Script)">
            <inheritdoc cref="M:Stratis.Bitcoin.Interfaces.IScriptAddressReader.GetAddressFromScriptPubKey(NBitcoin.Network,NBitcoin.Script)"/>
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.ValidationContext">
            <summary>
            A context that is used by consensus that is required for validation, in case validation failed the <see cref="P:Stratis.Bitcoin.Consensus.ValidationContext.Error"/> property will be set.
            It is used when a new block is downloaded or mined.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.ValidationContext.BanDurationNoBan">
            <summary>A value indicating the peer should not be banned.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Consensus.ValidationContext.BanDurationDefaultBan">
            <summary>A value indicating the peer ban time should be <see cref="P:Stratis.Bitcoin.Configuration.Settings.ConnectionManagerSettings.BanTimeSeconds"/>.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.ValidationContext.ChainedHeaderToValidate">
            <summary>Chained header of the block being validated.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.ValidationContext.BlockToValidate">
            <summary>Downloaded or mined block to be validated.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.ValidationContext.Error">
            <summary>If the block validation failed this will be set with the reason of failure.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.ValidationContext.RejectUntil">
            <summary>
            If the block validation failed with <see cref="P:Stratis.Bitcoin.Consensus.ConsensusErrors.BlockTimestampTooFar"/>
            then this is set to a time until which the block should be marked as invalid. Otherwise it is <c>null</c>.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.ValidationContext.BanDurationSeconds">
            <summary>
            If the block validation failed with a <see cref="T:Stratis.Bitcoin.Consensus.ConsensusError"/> that is considered malicious the peer will get banned.
            The ban, unless specified otherwise, will default to <see cref="P:Stratis.Bitcoin.Configuration.Settings.ConnectionManagerSettings.BanTimeSeconds"/>.
            </summary>
            <remarks>
            Setting this value to be <see cref="F:Stratis.Bitcoin.Consensus.ValidationContext.BanDurationNoBan"/> will prevent the peer from being banned.
            Setting this value to be <see cref="F:Stratis.Bitcoin.Consensus.ValidationContext.BanDurationDefaultBan"/> will default to <see cref="P:Stratis.Bitcoin.Configuration.Settings.ConnectionManagerSettings.BanTimeSeconds"/>.
            </remarks>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.ValidationContext.MissingServices">
            <summary>Services that are missing from the peers.</summary>
            <remarks>
            Set in case some information is missing from the block which leads
            to inability to validate the block properly. Set to <c>null</c> otherwise.
            </remarks>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.ValidationContext.InsufficientHeaderInformation">
            <summary>Gets or sets flag indicating if we do not have enough information to validate UTOX.</summary>
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.ValidationResults.ConnectBlocksResult">
            <summary>
            Information related to the block full validation process.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.ValidationResults.ConnectBlocksResult.PeersToBan">
            <summary>List of peer IDs to be banned and disconnected.</summary>
            <remarks><c>null</c> in case <see cref="P:Stratis.Bitcoin.Consensus.ValidationResults.ValidationResult.Succeeded"/> is <c>false</c>.</remarks>
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.ValidationResults.PartialValidationResult">
            <summary>
            Feedback specific to a partial block validation.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ValidationResults.PartialValidationResult.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.ValidationResults.ValidationResult">
            <summary>
            Feedback after a block was validated.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.ValidationResults.ValidationResult.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.Validators.OnPartialValidationCompletedAsyncCallback">
            <summary>
            A callback that is invoked when <see cref="M:Stratis.Bitcoin.Consensus.Validators.IPartialValidator.StartPartialValidation(NBitcoin.ChainedHeader,NBitcoin.Block,Stratis.Bitcoin.Consensus.Validators.OnPartialValidationCompletedAsyncCallback)"/> completes validation of a block.
            </summary>
            <param name="validationContext">Result of the validation including information about banning if necessary.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.Validators.IHeaderValidator.ValidateHeader(NBitcoin.ChainedHeader)">
            <summary>
            Validates a block header.
            </summary>
            <param name="chainedHeader">The chained header to be validated.</param>
            <returns>Context that contains validation result related information.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.Validators.IPartialValidator.StartPartialValidation(NBitcoin.ChainedHeader,NBitcoin.Block,Stratis.Bitcoin.Consensus.Validators.OnPartialValidationCompletedAsyncCallback)">
            <summary>
            Schedules a block for background partial validation.
            <para>
            Partial validation doesn't involve change to the underlying store like rewinding or updating the database.
            </para>
            </summary>
            <param name="header">The chained header that is going to be validated.</param>
            <param name="block">The block that is going to be validated.</param>
            <param name="onPartialValidationCompletedAsyncCallback">A callback that is called when validation is complete.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.Validators.IPartialValidator.ValidateAsync(NBitcoin.ChainedHeader,NBitcoin.Block)">
            <summary>
            Executes the partial validation rule set on a block.
            <para>
            Partial validation doesn't involve change to the underlying store like rewinding or updating the database.
            </para>
            </summary>
            <param name="header">The chained header that is going to be validated.</param>
            <param name="block">The block that is going to be validated.</param>
            <returns>Context that contains validation result related information.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.Validators.IFullValidator.ValidateAsync(NBitcoin.ChainedHeader,NBitcoin.Block)">
            <summary>
            Executes the full validation rule set on a block.
            <para>
            Full validation may involve changes to the underlying store like rewinding or updating the database.
            </para>
            </summary>
            <param name="header">The chained header that is going to be validated.</param>
            <param name="block">The block that is going to be validated.</param>
            <returns>Context that contains validation result related information.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.Validators.IIntegrityValidator.VerifyBlockIntegrity(NBitcoin.ChainedHeader,NBitcoin.Block)">
            <summary>
            Verifies that the block data corresponds to the chain header.
            </summary>
            <remarks>
            This validation represents minimal required validation for every block that we download.
            It should be performed even if the block is behind last checkpoint or part of assume valid chain.
            </remarks>
            <param name="header">The chained header that is going to be validated.</param>
            <param name="block">The block that is going to be validated.</param>
            <returns>Context that contains validation result related information.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.Validators.HeaderValidator">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.Validators.HeaderValidator.ValidateHeader(NBitcoin.ChainedHeader)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.Validators.IntegrityValidator">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.Validators.IntegrityValidator.VerifyBlockIntegrity(NBitcoin.ChainedHeader,NBitcoin.Block)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.Validators.PartialValidator">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.Validators.PartialValidator.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.Validators.PartialValidator.StartPartialValidation(NBitcoin.ChainedHeader,NBitcoin.Block,Stratis.Bitcoin.Consensus.Validators.OnPartialValidationCompletedAsyncCallback)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.Validators.PartialValidator.ValidateAsync(NBitcoin.ChainedHeader,NBitcoin.Block)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.Validators.PartialValidator.PartialValidationItem">
            <summary>
            Holds information related to partial validation.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.Validators.PartialValidator.PartialValidationItem.ChainedHeader">
            <summary>The header to be partially validated.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.Validators.PartialValidator.PartialValidationItem.Block">
            <summary>The block to be partially validated.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Consensus.Validators.PartialValidator.PartialValidationItem.PartialValidationCompletedAsyncCallback">
            <summary>After validation a call back will be invoked asynchronously.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.Validators.PartialValidator.PartialValidationItem.ToString">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Consensus.Validators.FullValidator">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Consensus.Validators.FullValidator.ValidateAsync(NBitcoin.ChainedHeader,NBitcoin.Block)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Controllers.Converters.BtcDecimalJsonConverter">
            <summary>
            Converts a decimal value to a string with the minimum number of decimals used by bitcoin (8).
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Controllers.Converters.BtcDecimalJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Method for writing a string formatted decimal to Json that truncates at <see cref="F:Stratis.Bitcoin.Controllers.Converters.BtcDecimalJsonConverter.MinDecimals"/> decimal points.</summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter"/> instance.</param>
            <param name="value">The value to be written.</param>
            <param name="serializer">A <see cref="T:Newtonsoft.Json.JsonSerializer"/> instance.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Controllers.Converters.BtcDecimalJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            A method for reading a string formatted decimal in Json that was truncated at <see cref="F:Stratis.Bitcoin.Controllers.Converters.BtcDecimalJsonConverter.MinDecimals"/> decimals.
            </summary>
            <remarks>Not implemented.</remarks>
        </member>
        <member name="T:Stratis.Bitcoin.Controllers.DashboardController">
            <summary>
            Controller providing HTML Dashboard
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Controllers.DashboardController.Stats">
            <summary>
            Returns a web page to act as a dashboard
            </summary>
            <returns>text/html content</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Controllers.Models.BlockHeaderModel">
            <summary>
            Data structure for block headers.
            Copied from RPC
            <see cref="!:https://bitcoin.org/en/developer-reference#getblockheader"/>
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Controllers.Models.BlockHeaderModel.#ctor(NBitcoin.BlockHeader)">
            <summary>
            Constructs a BlockHeaderModel from a block header object.
            </summary>
            <param name="blockHeader">The block header.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Controllers.Models.BlockHeaderModel.#ctor">
            <summary>
            Constructs a BlockHeaderModel.
            Used when deserializing block header from Json.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.BlockHeaderModel.Version">
            <summary>
            The blocks version number.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.BlockHeaderModel.MerkleRoot">
            <summary>
            The merkle root for this block encoded as hex in RPC byte order.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.BlockHeaderModel.Nonce">
            <summary>
            The nonce which was successful at turning this particular block
            into one that could be added to the best block chain.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.BlockHeaderModel.Bits">
            <summary>
            The target threshold this block's header had to pass.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.BlockHeaderModel.PreviousBlockHash">
            <summary>
            The hash of the header of the previous block,
            encoded as hex in RPC byte order.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.BlockHeaderModel.Time">
            <summary>
            The block time in seconds since epoch (Jan 1 1970 GMT).
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Controllers.Models.BlockHeaderModel.GetBytes(System.UInt32)">
            <summary>
            Convert compact of miner challenge to byte format,
            serialized for transmission via RPC.
            </summary>
            <param name="compact">Compact representation of challenge.</param>
            <returns>Byte representation of challenge.</returns>
            <seealso cref="T:NBitcoin.Target"/>
        </member>
        <member name="M:Stratis.Bitcoin.Controllers.Models.BlockModel.#ctor">
            <summary>
            Creates a block model
            Used for deserializing from Json
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Controllers.Models.ConnectedPeerModel">
            <summary>
            Represents a connected peer.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.ConnectedPeerModel.IsInbound">
            <summary>A value indicating whether this peer is connected via an inbound or outbound connection.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.ConnectedPeerModel.Version">
            <summary>The version this peer is running.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.ConnectedPeerModel.RemoteSocketEndpoint">
            <summary>The endpoint where this peer is located.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.ConnectedPeerModel.TipHeight">
            <summary>The height of this connected peer's tip.</summary>
        </member>
        <member name="T:Stratis.Bitcoin.Controllers.Models.DecodeRawTransactionModel">
            <summary>Contains a transaction in hex format prior to being decoded to JSON.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.DecodeRawTransactionModel.RawHex">
            <summary>The transaction to be decoded, in hex format.</summary>
        </member>
        <member name="T:Stratis.Bitcoin.Controllers.Models.GetTxOutModel">
            <summary>
            A model returned by a gettxout request
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Controllers.Models.GetTxOutModel.#ctor(Stratis.Bitcoin.Utilities.UnspentOutputs,System.UInt32,NBitcoin.Network,NBitcoin.ChainedHeader)">
            <summary>
            Initializes a GetTxOutModel instance.
            </summary>
            <param name="unspentOutputs">The <see cref="T:Stratis.Bitcoin.Utilities.UnspentOutputs"/>.</param>
            <param name="vout">The output index.</param>
            <param name="network">The network the transaction occurred on.</param>
            <param name="tip">The current consensus tip's <see cref="T:NBitcoin.ChainedHeader"/>.</param>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.GetTxOutModel.BestBlock">
            <summary>The block hash of the consensus tip.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.GetTxOutModel.Confirmations">
            <summary>The number of confirmations for the unspent output.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.GetTxOutModel.Value">
            <summary>The value of the output.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.GetTxOutModel.ScriptPubKey">
            <summary>The output's <see cref="P:Stratis.Bitcoin.Controllers.Models.GetTxOutModel.ScriptPubKey"/></summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.GetTxOutModel.Coinbase">
            <summary>Boolean indicating if the unspent output is a coinbase transaction.</summary>
        </member>
        <member name="T:Stratis.Bitcoin.Controllers.Models.StatusModel">
            <summary>
            Class representing the status of the currently running node.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Controllers.Models.StatusModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stratis.Bitcoin.Controllers.Models.StatusModel"/> class.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.StatusModel.Agent">
            <summary>The node's user agent that will be shared with peers in the version handshake.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.StatusModel.Version">
            <summary>The node's version.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.StatusModel.Network">
            <summary>The network the current node is running on.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.StatusModel.CoinTicker">
            <summary>The coin ticker to use with external applications.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.StatusModel.ProcessId">
            <summary>System identifier of the node's process.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.StatusModel.ConsensusHeight">
            <summary>The height of the consensus.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.StatusModel.BlockStoreHeight">
            <summary>Height of the most recent block in persistent storage.</summary>
            <seealso cref="!:Stratis.Bitcoin.Features.BlockRepository.HighestPersistedBlock.Height"/>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.StatusModel.InboundPeers">
            <summary>A collection of inbound peers.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.StatusModel.OutboundPeers">
            <summary>A collection of outbound peers.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.StatusModel.EnabledFeatures">
            <summary>A collection of all the features enabled by this node.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.StatusModel.DataDirectoryPath">
            <summary>The path to the directory where the data is saved.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.StatusModel.RunningTime">
            <summary>Time this node has been running.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.StatusModel.Difficulty">
            <summary>The current network difficulty target.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.StatusModel.ProtocolVersion">
            <summary>The node's protocol version</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.StatusModel.Testnet">
            <summary>Is the node on the testnet.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.StatusModel.RelayFee">
            <summary>The current transaction relay fee.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.StatusModel.State">
            <summary>Returns the status of the node.</summary>
        </member>
        <member name="T:Stratis.Bitcoin.Controllers.Models.TransactionModel">
            <summary>
            A class representing a transaction.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Controllers.Models.TransactionModel.#ctor(NBitcoin.Transaction)">
            <summary>
            Creates a <see cref="T:Stratis.Bitcoin.Controllers.Models.TransactionModel"/> containing the hash of the given transaction.
            </summary>
            <param name="trx">A valid <see cref="T:NBitcoin.Transaction"/></param>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.TransactionModel.Hex">
            <summary>The hashed transaction.</summary>
        </member>
        <member name="T:Stratis.Bitcoin.Controllers.Models.TransactionBriefModel">
            <summary>
            Creates a concise transaction model containing the hashed transaction.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Controllers.Models.TransactionVerboseModel">
            <summary>
            Creates a more robust transaction model.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Controllers.Models.TransactionVerboseModel.#ctor(NBitcoin.Transaction,NBitcoin.Network,NBitcoin.ChainedHeader,NBitcoin.ChainedHeader)">
            <summary>
            Initializes a new instance of the <see cref="T:Stratis.Bitcoin.Controllers.Models.TransactionVerboseModel"/> class.
            </summary>
            <param name="trx">The transaction.</param>
            <param name="network">The network the transaction occurred on.</param>
            <param name="block">A <see cref="T:NBitcoin.ChainedHeader"/> of the block that contains the transaction.</param>
            <param name="tip">A <see cref="T:NBitcoin.ChainedHeader"/> of the current tip.</param>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.TransactionVerboseModel.TxId">
            <summary>The transaction id.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.TransactionVerboseModel.Size">
            <summary>The serialized transaction size.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.TransactionVerboseModel.Version">
            <summary>The transaction version number (typically 1).</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.TransactionVerboseModel.LockTime">
            <summary>If nonzero, block height or timestamp when transaction is final.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.TransactionVerboseModel.VIn">
            <summary>A list of inputs.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.TransactionVerboseModel.VOut">
            <summary>A list of outputs.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.TransactionVerboseModel.BlockHash">
            <summary>The hash of the block containing this transaction.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.TransactionVerboseModel.Confirmations">
            <summary>The number of confirmations of the transaction.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.TransactionVerboseModel.Time">
            <summary>The time the transaction was added to a block.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.TransactionVerboseModel.BlockTime">
            <summary>The time the block was confirmed.</summary>
        </member>
        <member name="T:Stratis.Bitcoin.Controllers.Models.Vin">
            <summary>
            A class describing a transaction input.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Controllers.Models.Vin.#ctor(NBitcoin.OutPoint,NBitcoin.Sequence,NBitcoin.Script)">
            <summary>
            Initializes a <see cref="T:Stratis.Bitcoin.Controllers.Models.Vin"/> instance.
            </summary>
            <param name="prevOut">The previous output being used as an input.</param>
            <param name="sequence">The transaction's sequence number.</param>
            <param name="scriptSig">The scriptSig</param>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.Vin.Coinbase">
            <summary>The scriptsig if this was a coinbase transaction.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.Vin.TxId">
            <summary>The transaction ID.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.Vin.VOut">
            <summary>The index of the output.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.Vin.ScriptSig">
            <summary>The transaction's scriptsig.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.Vin.Sequence">
            <summary>The transaction's sequence number. <see cref="!:https://bitcoin.org/en/developer-guide#locktime-and-sequence-number"/></summary>
        </member>
        <member name="T:Stratis.Bitcoin.Controllers.Models.Vout">
            <summary>
            A class describing a transaction output.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Controllers.Models.Vout.#ctor(System.Int32,NBitcoin.TxOut,NBitcoin.Network)">
            <summary>
            Initializes an instance of the <see cref="T:Stratis.Bitcoin.Controllers.Models.Vout"/> class.
            </summary>
            <param name="n">The index of the output.</param>
            <param name="txout">A <see cref="T:NBitcoin.TxOut"/></param>
            <param name="network">The network where the transaction occured.</param>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.Vout.Value">
            <summary>The value of the output.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.Vout.N">
            <summary>The index of the output.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.Vout.ScriptPubKey">
            <summary>The output's scriptpubkey.</summary>
        </member>
        <member name="T:Stratis.Bitcoin.Controllers.Models.Script">
            <summary>
            A class describing a transaction script.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Controllers.Models.Script.#ctor(NBitcoin.Script)">
            <summary>
            Initializes a transaction <see cref="T:Stratis.Bitcoin.Controllers.Models.Script"/>, which contains the assembly and a hexadecimal representation of the script.
            </summary>
            <param name="script">A <see cref="T:NBitcoin.Script"/>.</param>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.Script.Asm">
            <summary>The script's assembly.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.Script.Hex">
            <summary>A hexadecimal representation of the script.</summary>
        </member>
        <member name="T:Stratis.Bitcoin.Controllers.Models.ScriptPubKey">
            <summary>
            A class describing a ScriptPubKey.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Controllers.Models.ScriptPubKey.#ctor(NBitcoin.Script,NBitcoin.Network)">
            <summary>
            Initializes an instance of the <see cref="T:Stratis.Bitcoin.Controllers.Models.ScriptPubKey"/> class.
            </summary>
            <param name="script">The script.</param>
            <param name="network">The network where the transaction was conducted.</param>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.ScriptPubKey.ReqSigs">
            <summary>The number of required sigs.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.ScriptPubKey.Type">
            <summary>The type of script.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Controllers.Models.ScriptPubKey.Addresses">
            <summary>A list of output addresses.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Controllers.Models.ScriptPubKey.GetScriptType(NBitcoin.ScriptTemplate)">
            <summary>
            A method that returns a script type description.
            </summary>
            <param name="template">A <see cref="T:NBitcoin.ScriptTemplate"/> used for the script.</param>
            <returns>A string describin the script type.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Controllers.NodeController">
            <summary>
            Provides methods that interact with the full node.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Controllers.NodeController.fullNode">
            <summary>Full Node.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Controllers.NodeController.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Controllers.NodeController.chainState">
            <summary>Information about node's chain.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Controllers.NodeController.dateTimeProvider">
            <summary>Provider of date and time functions.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Controllers.NodeController.nodeSettings">
            <summary>The settings for the node.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Controllers.NodeController.connectionManager">
            <summary>The connection manager.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Controllers.NodeController.chain">
            <summary>Thread safe access to the best chain of block headers from genesis.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Controllers.NodeController.networkDifficulty">
            <summary>An interface implementation used to retrieve the network's difficulty target.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Controllers.NodeController.pooledTransaction">
            <summary>An interface implementaiton used to retrieve a pooled transaction.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Controllers.NodeController.pooledGetUnspentTransaction">
            <summary>An interface implementation used to retrieve unspent transactions from a pooled source.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Controllers.NodeController.getUnspentTransaction">
            <summary>An interface implementation used to retrieve unspent transactions.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Controllers.NodeController.network">
            <summary>Specification of the network the node runs on.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Controllers.NodeController.blockStore">
            <summary>An interface implementation for the blockstore.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Controllers.NodeController.Status">
            <summary>
            Returns some general information about the status of the underlying node.
            </summary>
            <returns>A <see cref="T:Stratis.Bitcoin.Controllers.Models.StatusModel"/> with information about the node.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Controllers.NodeController.GetBlockHeader(System.String,System.Boolean)">
            <summary>
            Gets the block header of the block identified by the hash.
            API implementation of RPC call.
            </summary>
            <param name="hash">The block hash.</param>
            <param name="isJsonFormat"><c>True to return Json formatted block header.</c></param>
            <returns>Json formatted <see cref="T:Stratis.Bitcoin.Controllers.Models.BlockHeaderModel"/>. <c>null</c> if block not found. Returns <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> formatted error if fails.</returns>
            <exception cref="T:System.NotImplementedException">Thrown if isJsonFormat = false</exception>"
            <exception cref="T:System.ArgumentException">Thrown if hash is empty.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if logger is not provided.</exception>
            <remarks>Binary serialization is not supported with this method.</remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Controllers.NodeController.GetRawTransactionAsync(System.String,System.Boolean)">
            <summary>
            Gets a raw, possibly pooled, transaction from the full node.
            API implementation of RPC call.
            </summary>
            <param name="trxid">The transaction hash.</param>
            <param name="verbose"><c>True if <see cref="T:Stratis.Bitcoin.Controllers.Models.TransactionVerboseModel"/> is wanted.</c></param>
            <returns>Json formatted <see cref="T:Stratis.Bitcoin.Controllers.Models.TransactionBriefModel"/> or <see cref="T:Stratis.Bitcoin.Controllers.Models.TransactionVerboseModel"/>. <c>null</c> if transaction not found. Returns <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> formatted error if otherwise fails.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if fullNode, network, or chain are not available.</exception>
            <exception cref="T:System.ArgumentException">Thrown if trxid is empty or not a valid<see cref="T:NBitcoin.uint256"/>.</exception>
            <remarks>Requires txindex=1, otherwise only txes that spend or create UTXOs for a wallet can be returned.</remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Controllers.NodeController.DecodeRawTransaction(Stratis.Bitcoin.Controllers.Models.DecodeRawTransactionModel)">
            <summary>
            Return the JSON representation for a given transaction in hex format.
            </summary>
            <param name="rawHex">The raw hexadecimal form of the transaction.</param>
            <returns>The JSON representation of the transaction.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Controllers.NodeController.ValidateAddress(System.String)">
            <summary>
            Returns information about a bech32 or base58 bitcoin address.
            API implementation of RPC call.
            </summary>
            <param name="address">A valid address in string format.</param>
            <returns>Json formatted <see cref="T:NBitcoin.ValidatedAddress"/> containing a boolean indicating address validity. Returns <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> formatted error if fails.</returns>
            <exception cref="T:System.ArgumentException">Thrown if address provided is empty.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if network is not provided.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.Controllers.NodeController.GetTxOutAsync(System.String,System.UInt32,System.Boolean)">
            <summary>
            Gets the unspent outputs given a transaction id and vout number.
            API implementation of RPC call.
            </summary>
            <param name="trxid">The transaction ID as hash string.</param>
            <param name="vout">The vout to get unspent outputs.</param>
            <param name="includeMemPool">Boolean to look in Mempool.</param>
            <returns>Json formatted <see cref="T:Stratis.Bitcoin.Controllers.Models.GetTxOutModel"/>. <c>null</c> if no unspent outputs given parameters. Returns <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> formatted error if fails.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if network or chain not provided.</exception>
            <exception cref="T:System.ArgumentException">Thrown if trxid is empty or not a valid <see cref="T:NBitcoin.uint256"/></exception>
        </member>
        <member name="M:Stratis.Bitcoin.Controllers.NodeController.Shutdown(System.Boolean)">
            <summary>
            Triggers a shutdown of the currently running node.
            </summary>
            <param name="corsProtection">This body parameter is here to prevent a CORS call from triggering method execution.</param>
            <remarks>
            <seealso cref="!:https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests"/>
            </remarks>
            <returns><see cref="T:Microsoft.AspNetCore.Mvc.OkResult"/></returns>
        </member>
        <member name="M:Stratis.Bitcoin.Controllers.NodeController.GetTransactionBlockAsync(NBitcoin.uint256,Stratis.Bitcoin.IFullNode,NBitcoin.ChainBase)">
            <summary>
            Retrieves a transaction block given a valid hash.
            This function is used by other methods in this class and not explicitly by RPC/API.
            </summary>
            <param name="trxid">A valid uint256 hash</param>
            <param name="fullNode">The full node. Used to access <see cref="T:Stratis.Bitcoin.Interfaces.IBlockStore"/>.</param>
            <param name="chain">The full node's chain. Used to get <see cref="T:NBitcoin.ChainedHeader"/> block.</param>
            <returns>A <see cref="T:NBitcoin.ChainedHeader"/> for the given transaction hash. Returns <c>null</c> if fails.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if fullnode is not provided.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.Controllers.NodeController.GetNetworkDifficulty(Stratis.Bitcoin.Interfaces.INetworkDifficulty)">
            <summary>
            Retrieves the difficulty target of the full node's network.
            </summary>
            <param name="networkDifficulty">The network difficulty interface.</param>
            <returns>A network difficulty <see cref="T:NBitcoin.Target"/>. Returns <c>null</c> if fails.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.IFinalizedBlockInfoRepository">
            <summary>Provider of the last finalized block's height and hash.</summary>
            <remarks>
            Finalized block height is the height of the last block that can't be reorged.
            Blocks with height greater than finalized height can be reorged.
            <para>Finalized block height value is always <c>0</c> for blockchains without max reorg property.</para>
            </remarks>
        </member>
        <member name="M:Stratis.Bitcoin.IFinalizedBlockInfoRepository.GetFinalizedBlockInfo">
            <summary>Gets the finalized block hash and height.</summary>
            <returns>Hash and height of a block that can't be reorged away from.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.IFinalizedBlockInfoRepository.LoadFinalizedBlockInfoAsync(NBitcoin.Network)">
            <summary>Loads the finalised block hash and height from the database.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.IFinalizedBlockInfoRepository.SaveFinalizedBlockHashAndHeight(NBitcoin.uint256,System.Int32)">
            <summary>Saves the finalized block hash and height to the database if height is greater than the previous value.</summary>
            <param name="hash">Block hash.</param>
            <param name="height">Block height.</param>
            <returns><c>true</c> if new value was set, <c>false</c> if <paramref name="height"/> is lower or equal than current value.</returns>
        </member>
        <member name="F:Stratis.Bitcoin.FinalizedBlockInfoRepository.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.FinalizedBlockInfoRepository.finalizedBlockKey">
            <summary>Database key under which the block height of the last finalized block height is stored.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.FinalizedBlockInfoRepository.finalizedBlockInfo">
            <summary>Height and hash of a block that can't be reorged away from.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.FinalizedBlockInfoRepository.finalizedBlockInfosToSave">
            <summary>Queue of finalized infos to save.</summary>
            <remarks>All access should be protected by <see cref="F:Stratis.Bitcoin.FinalizedBlockInfoRepository.queueLock"/></remarks>
        </member>
        <member name="F:Stratis.Bitcoin.FinalizedBlockInfoRepository.queueLock">
            <summary>Protects access to <see cref="F:Stratis.Bitcoin.FinalizedBlockInfoRepository.finalizedBlockInfosToSave"/>.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.FinalizedBlockInfoRepository.finalizedBlockInfoPersistingTask">
            <summary>Task that continously persists finalized block info to the database.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.FinalizedBlockInfoRepository.GetFinalizedBlockInfo">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.FinalizedBlockInfoRepository.LoadFinalizedBlockInfoAsync(NBitcoin.Network)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.FinalizedBlockInfoRepository.SaveFinalizedBlockHashAndHeight(NBitcoin.uint256,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.FinalizedBlockInfoRepository.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.FullNode">
            <summary>
            Node providing all supported features of the blockchain and its network.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.FullNode.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.FullNode.loggerFactory">
            <summary>Factory for creating loggers.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.FullNode.fullNodeFeatureExecutor">
            <summary>Component responsible for starting and stopping all the node's features.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.FullNode.Settings">
            <summary>Node command line and configuration file settings.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.FullNode.ChainBehaviorState">
            <summary>Information about the best chain.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.FullNode.InitialBlockDownloadState">
            <summary>Provider of IBD state.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.FullNode.Signals">
            <summary>Provider of notification about newly available blocks and transactions.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.FullNode.RPCHost">
            <summary>ASP.NET Core host for RPC server.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.FullNode.State">
            <inheritdoc />
        </member>
        <member name="P:Stratis.Bitcoin.FullNode.StartTime">
            <inheritdoc />
        </member>
        <member name="P:Stratis.Bitcoin.FullNode.ConnectionManager">
            <summary>Component responsible for connections to peers in P2P network.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.FullNode.Chain">
            <summary>Best chain of block headers from genesis.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.FullNode.AsyncLoopFactory">
            <summary>Factory for creating and execution of asynchronous loops.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.FullNode.Network">
            <summary>Specification of the network the node runs on - regtest/testnet/mainnet.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.FullNode.DataFolder">
            <summary>Contains path locations to folders and files on disk.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.FullNode.DateTimeProvider">
            <summary>Provider of date time functionality.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.FullNode.nodeLifetime">
            <summary>Application life cycle control - triggers when application shuts down.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.FullNode.NodeStats">
            <see cref="T:Stratis.Bitcoin.Utilities.INodeStats"/>
        </member>
        <member name="P:Stratis.Bitcoin.FullNode.NodeLifetime">
            <inheritdoc />
        </member>
        <member name="P:Stratis.Bitcoin.FullNode.Services">
            <inheritdoc />
        </member>
        <member name="P:Stratis.Bitcoin.FullNode.Version">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.FullNode.#ctor">
            <summary>Creates new instance of the <see cref="T:Stratis.Bitcoin.FullNode"/>.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.FullNode.Initialize(Stratis.Bitcoin.Builder.IFullNodeServiceProvider)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.FullNode.Start">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.FullNode.StartPeriodicLog">
            <summary>
            Starts a loop to periodically log statistics about node's status very couple of seconds.
            <para>
            These logs are also displayed on the console.
            </para>
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.FullNode.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.IFullNode">
            <summary>
            Contract for the full node built by full node builder.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.IFullNode.NodeLifetime">
            <summary>Global application life cycle control - triggers when application shuts down.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.IFullNode.DateTimeProvider">
            <summary>Provider of date time functionality.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.IFullNode.Services">
            <summary>Access to DI services and features registered for the full node.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.IFullNode.Network">
            <summary>Specification of the network the node runs on - regtest/testnet/mainnet.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.IFullNode.Version">
            <summary>Software version of the full node.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.IFullNode.RPCHost">
            <summary>ASP.NET Core host for RPC server.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.IFullNode.State">
            <summary>Provides current state of the node.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.IFullNode.StartTime">
            <summary>Time the node started.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.IFullNode.Start">
            <summary>
            Starts the full node and all its features.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.IFullNode.Initialize(Stratis.Bitcoin.Builder.IFullNodeServiceProvider)">
            <summary>
            Initializes DI services that the node needs.
            </summary>
            <param name="serviceProvider">Provider of DI services.</param>
            <returns>Full node itself to allow fluent code.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.IFullNode.NodeService``1(System.Boolean)">
            <summary>
            Find a service of a particular type
            </summary>
            <typeparam name="T">Class of type</typeparam>
            <param name="failWithDefault">Set to true to return null instead of throwing an error</param>
            <returns></returns>
        </member>
        <member name="M:Stratis.Bitcoin.IFullNode.NodeFeature``1(System.Boolean)">
            <summary>
            Find a feature of a particular type or having a given interface
            </summary>
            <typeparam name="T">Class of interface type</typeparam>
            <param name="failWithError">Set to false to return null instead of throwing an error</param>
            <returns></returns>
        </member>
        <member name="T:Stratis.Bitcoin.FullNodeState">
            <summary>Represents <see cref="T:Stratis.Bitcoin.IFullNode"/> state.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.FullNodeState.Created">
            <summary>Assigned when <see cref="T:Stratis.Bitcoin.IFullNode"/> instance is created.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.FullNodeState.Initializing">
            <summary>Assigned when <see cref="M:Stratis.Bitcoin.IFullNode.Initialize(Stratis.Bitcoin.Builder.IFullNodeServiceProvider)"/> is called.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.FullNodeState.Initialized">
            <summary>Assigned when <see cref="M:Stratis.Bitcoin.IFullNode.Initialize(Stratis.Bitcoin.Builder.IFullNodeServiceProvider)"/> finished executing.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.FullNodeState.Starting">
            <summary>Assigned when <see cref="M:Stratis.Bitcoin.IFullNode.Start"/> is called.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.FullNodeState.Started">
            <summary>Assigned when <see cref="M:Stratis.Bitcoin.IFullNode.Start"/> finished executing.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.FullNodeState.Disposing">
            <summary>Assigned when <see cref="!:IFullNode.Dispose"/> is called.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.FullNodeState.Disposed">
            <summary>Assigned when <see cref="!:IFullNode.Dispose"/> finished executing.</summary>
        </member>
        <member name="T:Stratis.Bitcoin.Interfaces.IBlockStore">
            <summary>
            Represent access to the store of <see cref="T:NBitcoin.Block"/>.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Interfaces.IBlockStore.InitializeAsync">
            <summary>
            Initializes the blockchain storage and ensure the genesis block has been created in the database.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Interfaces.IBlockStore.GetTransactionByIdAsync(NBitcoin.uint256)">
            <summary>
            Retrieve the transaction information asynchronously using transaction id.
            </summary>
            <param name="trxid">The transaction id to find.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Interfaces.IBlockStore.GetBlockIdByTransactionIdAsync(NBitcoin.uint256)">
            <summary>
            Get the corresponding block hash by using transaction hash.
            </summary>
            <param name="trxid">The transaction hash.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Interfaces.IBlockStore.GetBlockAsync(NBitcoin.uint256)">
            <summary>
            Get the block from the database by using block hash.
            </summary>
            <param name="blockHash">The block hash.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Interfaces.IBlockStoreQueue.AddToPending(Stratis.Bitcoin.Primitives.ChainedHeaderBlock)">
            <summary>Adds a block to the saving queue.</summary>
            <param name="chainedHeaderBlock">The block and its chained header pair to be added to pending storage.</param>
        </member>
        <member name="P:Stratis.Bitcoin.Interfaces.IBlockStoreQueue.BlockStoreCacheTip">
            <summary>The highest stored block in the block store cache or <c>null</c> if block store feature is not enabled.</summary>
        </member>
        <member name="T:Stratis.Bitcoin.Interfaces.IBlockStoreQueueFlushCondition">
            <summary>
            Determines whether or not <see cref="!:BlockStoreQueue"/> should flush it's batch to disk.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Interfaces.IBlockStoreQueueFlushCondition.ShouldFlush">
            <summary>
            Should block store flush to disk.
            <para>
            If consensus tip in IBD or store tip is a distance of more then 5 blocks from consensus tip this will return <c>false</c>.
            </para>
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Interfaces.IGetUnspentTransaction">
            <summary>
            An interface used to retrieve unspent transactions
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Interfaces.IGetUnspentTransaction.GetUnspentTransactionAsync(NBitcoin.uint256)">
            <summary>
            Returns the unspent outputs for a specific transaction
            </summary>
            <param name="trxid">Hash of the transaction to query.</param>
            <returns>Unspent Outputs</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Interfaces.IInitialBlockDownloadState">
            <summary>
            Provides IBD (Initial Block Download) state.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Interfaces.IInitialBlockDownloadState.IsInitialBlockDownload">
            <summary>
            Checks whether the node is currently in the process of initial block download.
            </summary>
            <returns><c>true</c> if the node is currently doing IBD, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Interfaces.IPooledGetUnspentTransaction">
            <summary>
            An interface used to retrieve unspent transactions from a pooled source
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Interfaces.IProvenBlockHeaderProvider">
            <summary>
            Interface <see cref="T:NBitcoin.ProvenBlockHeader"/> provider.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Interfaces.IProvenBlockHeaderProvider.GetAsync(System.Int32)">
            <summary>
            Get a <see cref="T:NBitcoin.ProvenBlockHeader"/> corresponding to a block.
            </summary>
            <param name="blockHeight"> Height used to retrieve the <see cref="T:NBitcoin.ProvenBlockHeader"/>.</param>
            <returns><see cref="T:NBitcoin.ProvenBlockHeader"/> retrieved.</returns>
        </member>
        <member name="P:Stratis.Bitcoin.Interfaces.IProvenBlockHeaderProvider.TipHashHeight">
            <summary>
            Height of the block which is currently the tip of the <see cref="T:NBitcoin.ProvenBlockHeader"/>.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Interfaces.IProvenBlockHeaderRepository">
            <summary>
            Interface to insert and retrieve <see cref="T:NBitcoin.ProvenBlockHeader"/> items from the database repository.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Interfaces.IProvenBlockHeaderRepository.InitializeAsync">
            <summary>
            Initializes <see cref="T:NBitcoin.ProvenBlockHeader"/> items database.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Interfaces.IProvenBlockHeaderRepository.PutAsync(System.Collections.Generic.SortedDictionary{System.Int32,NBitcoin.ProvenBlockHeader},Stratis.Bitcoin.Utilities.HashHeightPair)">
            <summary>
            Persists <see cref="T:NBitcoin.ProvenBlockHeader"/> items to the database.
            </summary>
            <param name="provenBlockHeaders">List of <see cref="T:NBitcoin.ProvenBlockHeader"/> items.</param>
            <param name="newTip">Block hash and height tip.</param>
            <returns><c>true</c> when a <see cref="T:NBitcoin.ProvenBlockHeader"/> is saved to disk, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Interfaces.IProvenBlockHeaderStore">
            <summary>
            Cache layer for <see cref="T:NBitcoin.ProvenBlockHeader"/>s.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Interfaces.IProvenBlockHeaderStore.InitializeAsync(NBitcoin.ChainedHeader)">
            <summary>
            Initializes the <see cref="T:Stratis.Bitcoin.Interfaces.IProvenBlockHeaderStore"/> at the last common header between <paramref name="chainedHeader"/> and <see cref="P:Stratis.Bitcoin.Interfaces.IProvenBlockHeaderProvider.TipHashHeight"/>.
            </summary>
            <param name="chainedHeader"><see cref="T:NBitcoin.ChainedHeader"/> consensus tip after <see cref="T:Stratis.Bitcoin.Consensus.IConsensusManager"/> initialization.</param>
            <returns>Tip at which store was initialized.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Interfaces.IProvenBlockHeaderStore.AddToPendingBatch(NBitcoin.ProvenBlockHeader,Stratis.Bitcoin.Utilities.HashHeightPair)">
            <summary>
            Adds <see cref="T:NBitcoin.ProvenBlockHeader"/> items to the pending batch. Ready for saving to disk.
            </summary>
            <param name="provenBlockHeader">A <see cref="T:NBitcoin.ProvenBlockHeader"/> item to add.</param>
            <param name="newTip">Hash and height pair that represent the tip of <see cref="T:Stratis.Bitcoin.Interfaces.IProvenBlockHeaderStore"/>.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Interfaces.IProvenBlockHeaderStore.SaveAsync">
            <summary>
            Saves pending <see cref="T:NBitcoin.ProvenBlockHeader"/> items to the <see cref="T:Stratis.Bitcoin.Interfaces.IProvenBlockHeaderRepository"/>, then removes the items from the pending batch.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Interfaces.IScriptAddressReader">
            <summary>
            A reader for extracting an address from a Script
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Interfaces.IScriptAddressReader.GetAddressFromScriptPubKey(NBitcoin.Network,NBitcoin.Script)">
            <summary>
            Extracts an address from a given Script, if available. Otherwise returns <see cref="F:System.String.Empty"/>
            </summary>
            <param name="network"></param>
            <param name="script"></param>
            <returns></returns>
        </member>
        <member name="T:Stratis.Bitcoin.Mining.IBlockProvider">
            <summary>
            The block provider class is called by <see cref="!:PosMinting"/> and <see cref="!:PowMining"/>
            to create a block based on whether or not the node is mining or staking.
            <para>
            The create block logic is abstracted away from the miner or staker so that
            different implementations can be injected via dependency injection.
            </para>
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Mining.IBlockProvider.BuildPowBlock(NBitcoin.ChainedHeader,NBitcoin.Script)">
            <summary>Builds a proof of work block.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Mining.IBlockProvider.BuildPosBlock(NBitcoin.ChainedHeader,NBitcoin.Script)">
            <summary>Builds a signed proof of stake block with the next difficulty target included in the block header.</summary>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.IPeerAddressManager">
            <summary>Contract for <see cref="T:Stratis.Bitcoin.P2P.PeerAddressManager"/>.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.IPeerAddressManager.PeerFilePath">
            <summary>Data folder of where the json peer file is located.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.IPeerAddressManager.Peers">
            <summary>A collection of all discovered peers.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.IPeerAddressManager.AddPeer(System.Net.IPEndPoint,System.Net.IPAddress)">
            <summary>
            Adds a peer to the <see cref="P:Stratis.Bitcoin.P2P.IPeerAddressManager.Peers"/> dictionary.
            <para>
            Only routable IP addresses will be added. See <see cref="M:NBitcoin.IpExtensions.IsRoutable(System.Net.IPAddress,System.Boolean)"/>.
            </para>
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.IPeerAddressManager.AddPeers(System.Collections.Generic.IEnumerable{System.Net.IPEndPoint},System.Net.IPAddress)">
            <summary>
            Add a set of peers to the <see cref="P:Stratis.Bitcoin.P2P.IPeerAddressManager.Peers"/> dictionary.
            <para>
            Only routable IP addresses will be added. <see cref="M:NBitcoin.IpExtensions.IsRoutable(System.Net.IPAddress,System.Boolean)"/>
            </para>
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.IPeerAddressManager.RemovePeer(System.Net.IPEndPoint)">
            <summary>
            Remove a peer from the <see cref="P:Stratis.Bitcoin.P2P.IPeerAddressManager.Peers"/> dictionary.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.IPeerAddressManager.FindPeer(System.Net.IPEndPoint)">
            <summary>Find a peer by endpoint.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.IPeerAddressManager.FindPeersByIp(System.Net.IPEndPoint)">
            <summary>Find peers by IP (the port is irrelevant).</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.IPeerAddressManager.LoadPeers">
            <summary>Loads peers from a json formatted file on disk.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.IPeerAddressManager.SavePeers">
            <summary>Persist peers to disk in json format.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.IPeerAddressManager.PeerAttempted(System.Net.IPEndPoint,System.DateTime)">
            <summary>
            A connection attempt was made to a peer.
            <para>
            Increments <see cref="P:Stratis.Bitcoin.P2P.PeerAddress.ConnectionAttempts"/> of the peer as well as the <see cref="P:Stratis.Bitcoin.P2P.PeerAddress.LastConnectionSuccess"/>
            </para>
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.IPeerAddressManager.PeerConnected(System.Net.IPEndPoint,System.DateTimeOffset)">
            <summary>
            A peer was successfully connected to.
            <para>
            Resets the <see cref="P:Stratis.Bitcoin.P2P.PeerAddress.ConnectionAttempts"/> and <see cref="P:Stratis.Bitcoin.P2P.PeerAddress.LastAttempt"/> of the peer.
            Sets the peer's <see cref="P:Stratis.Bitcoin.P2P.PeerAddress.LastConnectionSuccess"/> to now.
            </para>
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.IPeerAddressManager.PeerDiscoveredFrom(System.Net.IPEndPoint,System.DateTime)">
            <summary>
            Sets the last time the peer was asked for addresses via discovery.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.IPeerAddressManager.PeerHandshaked(System.Net.IPEndPoint,System.DateTimeOffset)">
            <summary>
            A version handshake between two peers was successful.
            <para>
            Sets the peer's <see cref="P:Stratis.Bitcoin.P2P.PeerAddress.LastConnectionHandshake"/> time to now.
            </para>
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.IPeerAddressManager.PeerSeen(System.Net.IPEndPoint,System.DateTime)">
            <summary>
            Sets the last time the peer was seen.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.IPeerAddressManager.PeerSelector">
            <summary>Peer selector instance, used to select peers to connect to.</summary>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.ISelfEndpointTracker">
            <summary>
            Tracker for endpoints known to be self.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.ISelfEndpointTracker.UpdateAndAssignMyExternalAddress(System.Net.IPEndPoint,System.Boolean,System.Int32)">
            <summary>Update external IP address and peer score of the node.</summary>
            <param name="ipEndPoint">The endpoint to add.</param>
            <param name="suppliedEndPointIsFinal">Whether the <paramref name="ipEndPoint"/> supplied should be marked final on the endpoint tracker.</param>
            <param name="ipEndPointPeerScore">Peer score of the <paramref name="ipEndPoint"/> supplied. Default value of 1.</param>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.ISelfEndpointTracker.MyExternalAddress">
            <summary>External IP address of the node.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.ISelfEndpointTracker.Add(System.Net.IPEndPoint)">
            <summary>Adds an endpoint to the currently known list.</summary>
            <param name="ipEndPoint">The endpoint to add.</param>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.ISelfEndpointTracker.IsSelf(System.Net.IPEndPoint)">
            <summary>Checks if endpoint is known to be itself against the pruned dictionary.</summary>
            <param name="ipEndPoint">The endpoint to check.</param>
            <returns><c>true</c> if self, <c>false</c> if unknown.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Peer.INetworkPeer">
            <summary>
            Represents a counterparty of the node on the network. This is usually another node, but it can be
            a wallet, an analytical robot, or any other network client or server that understands the protocol.
            <para>The network peer is connected either inbound, if it was the counterparty that established
            the connection to our node's listener, or outbound, if our node was the one connecting to a remote server.
            </para>
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.INetworkPeer.State">
            <summary>State of the network connection to the peer.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.INetworkPeer.RemoteSocketEndpoint">
            <summary>IP address and port of the connected peer.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.INetworkPeer.RemoteSocketAddress">
            <summary>IP address part of <see cref="P:Stratis.Bitcoin.P2P.Peer.INetworkPeer.RemoteSocketEndpoint"/>.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.INetworkPeer.RemoteSocketPort">
            <summary>Port part of <see cref="P:Stratis.Bitcoin.P2P.Peer.INetworkPeer.RemoteSocketEndpoint"/>.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.INetworkPeer.Inbound">
            <summary><c>true</c> if the peer connected to the node, <c>false</c> if the node connected to the peer.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.INetworkPeer.Behaviors">
            <summary>List of node's modules attached to the peer to receive notifications about various events related to the peer.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.INetworkPeer.PeerEndPoint">
            <summary>IP address and port on the side of the peer.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.INetworkPeer.TimeOffset">
            <summary>Difference between the local clock and the clock that peer claims, or <c>null</c> if this information has not been initialized yet.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.INetworkPeer.Connection">
            <summary>Component representing the network connection to the peer that is responsible for sending and receiving messages.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.INetworkPeer.Counter">
            <summary>Statistics about the number of bytes transferred from and to the peer.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.INetworkPeer.Version">
            <summary>
            The negotiated protocol version (minimum of supported version between <see cref="P:Stratis.Bitcoin.P2P.Peer.INetworkPeer.MyVersion"/> and the <see cref="P:Stratis.Bitcoin.P2P.Peer.INetworkPeer.PeerVersion"/>).
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.INetworkPeer.IsConnected">
            <summary><c>true</c> if the connection to the peer is considered active, <c>false</c> otherwise, including any case of error.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.INetworkPeer.MyVersion">
            <summary>Node's version message payload that is sent to the peer.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.INetworkPeer.PeerVersion">
            <summary>Version message payload received from the peer.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.INetworkPeer.SupportedTransactionOptions">
            <summary>Transaction options supported by the peer.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.INetworkPeer.DisconnectReason">
            <summary>When a peer is disconnected this is set to human readable information about why it happened.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.INetworkPeer.Network">
            <summary>Specification of the network the node runs on - regtest/testnet/mainnet.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.INetworkPeer.StateChanged">
            <summary>Event that is triggered when the peer's network state is changed.</summary>
            <remarks>Do not dispose the peer from this callback.</remarks>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.INetworkPeer.MessageReceived">
            <summary>Event that is triggered when a new message is received from a network peer.</summary>
            <remarks>Do not dispose the peer from this callback.</remarks>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.INetworkPeer.ConnectionParameters">
            <summary>Various settings and requirements related to how the connections with peers are going to be established.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.INetworkPeer.MessageProducer">
            <summary>Queue of the connections' incoming messages distributed to message consumers.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.INetworkPeer.ConnectAsync(System.Threading.CancellationToken)">
            <summary>
            Connects the node to an outbound peer using already initialized information about the peer and starts receiving messages in a separate task.
            </summary>
            <param name="cancellation">Cancellation that allows aborting establishing the connection with the peer.</param>
            <exception cref="T:System.OperationCanceledException">Thrown when the cancellation token has been cancelled.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.INetworkPeer.SendMessage(Stratis.Bitcoin.P2P.Protocol.Payloads.Payload)">
            <summary>
            Send a message by putting it in a send queue.
            </summary>
            <param name="payload">The payload to send.</param>
            <exception cref="T:System.OperationCanceledException">Thrown when the peer has been disconnected or the cancellation token has been cancelled.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.INetworkPeer.SendMessageAsync(Stratis.Bitcoin.P2P.Protocol.Payloads.Payload,System.Threading.CancellationToken)">
            <summary>
            Send a message to the peer asynchronously.
            </summary>
            <param name="payload">The payload to send.</param>
            <param name="cancellation">Cancellation token that allows aborting the sending operation.</param>
            <exception cref="T:System.OperationCanceledException">Thrown when the peer has been disconnected or the cancellation token has been cancelled.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.INetworkPeer.VersionHandshakeAsync(System.Threading.CancellationToken)">
            <summary>
            Exchanges "version" and "verack" messages with the peer.
            <para>Both parties have to send their "version" messages to the other party
            as well as to acknowledge that they are happy with the other party's "version" information.</para>
            </summary>
            <param name="cancellationToken">Cancellation that allows aborting the operation at any stage.</param>
            <exception cref="T:NBitcoin.Protocol.ProtocolException">Thrown when the peer rejected our "version" message.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown during the shutdown or when the peer disconnects.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.INetworkPeer.VersionHandshakeAsync(Stratis.Bitcoin.P2P.Peer.NetworkPeerRequirement,System.Threading.CancellationToken)">
            <summary>
            Exchanges "version" and "verack" messages with the peer.
            <para>Both parties have to send their "version" messages to the other party
            as well as to acknowledge that they are happy with the other party's "version" information.</para>
            </summary>
            <param name="requirements">Protocol requirement for network peers the node wants to be connected to.</param>
            <param name="cancellationToken">Cancellation that allows aborting the operation at any stage.</param>
            <exception cref="T:NBitcoin.Protocol.ProtocolException">Thrown when the peer rejected our "version" message.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown during the shutdown or when the peer disconnects.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.INetworkPeer.RespondToHandShakeAsync(System.Threading.CancellationToken)">
            <summary>
            Sends "version" message to the peer and waits for the response in form of "verack" or "reject" message.
            </summary>
            <param name="cancellationToken">Cancellation that allows aborting the operation at any stage.</param>
            <exception cref="T:NBitcoin.Protocol.ProtocolException">Thrown when the peer rejected our "version" message.</exception>
            <exception cref="T:System.OperationCanceledException">Thrown during the shutdown or when the peer disconnects.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.INetworkPeer.Disconnect(System.String,System.Exception)">
            <summary>
            Disconnects the peer and cleans up.
            </summary>
            <param name="reason">Human readable reason for disconnecting.</param>
            <param name="exception">Exception because of which the disconnection happened, or <c>null</c> if there were no exception.</param>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.INetworkPeer.AddSupportedOptions(Stratis.Bitcoin.P2P.Protocol.InventoryType)">
            <summary>
            Add supported option to the inventory type.
            </summary>
            <param name="inventoryType">Inventory type to extend.</param>
            <returns>Inventory type possibly extended with new options.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.INetworkPeer.Behavior``1">
            <summary>
            Finds all behaviors of a specific behavior type among the peer's behaviors.
            </summary>
            <typeparam name="T">Type of the behavior to find.</typeparam>
            <returns>Collection of behaviors of specific type.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Peer.NetworkPeerState">
            <summary>
            State of the network connection to a peer.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerState.Created">
            <summary>Initial state of an outbound peer.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerState.Connected">
            <summary>Network connection with the peer has been established.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerState.HandShaked">
            <summary>The node and the peer exchanged version information.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerState.Disconnecting">
            <summary>Process of disconnecting the peer has been initiated.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerState.Offline">
            <summary>Shutdown has been initiated, the node went offline.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerState.Failed">
            <summary>An error occurred during a network operation.</summary>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Peer.NetworkPeerDisconnectReason">
            <summary>
            Explanation of why a peer was disconnected.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeerDisconnectReason.Reason">
            <summary>Human readable reason for disconnecting.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeerDisconnectReason.Exception">
            <summary>Exception because of which the disconnection happened, or <c>null</c> if there were no exceptions.</summary>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Peer.NetworkPeerRequirement">
            <summary>
            Protocol requirement for network peers the node wants to be connected to.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeerRequirement.MinVersion">
            <summary>Minimal protocol version that the peer must support or <c>null</c> if there is no requirement for minimal protocol version.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeerRequirement.RequiredServices">
            <summary>Specification of network services that the peer must provide.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerRequirement.Check(Stratis.Bitcoin.P2P.Protocol.Payloads.VersionPayload,System.String@)">
            <summary>
            Checks a version payload from a peer against the requirements.
            </summary>
            <param name="version">Version payload to check.</param>
            <param name="reason">The reason the check failed.</param>
            <returns><c>true</c> if the version payload satisfies the protocol requirements, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Peer.NetworkPeer">
            <inheritdoc/>
            <remarks>
            All instances of this object must be disposed or disconnected. <see cref="M:Stratis.Bitcoin.P2P.Peer.NetworkPeer.Disconnect(System.String,System.Exception)"/> and disposing methods
            have the same functionality and the disconnecting method is provided only for better readability of the code.
            <para>It is safe to try to disconnect or dispose this object multiple times, only the first call will be processed.</para>
            </remarks>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Peer.NetworkPeer.DisconnectedExecutionAsyncContext">
            <summary>
            Execution context holding information about the current status of the execution
            in order to recognize if <see cref="F:Stratis.Bitcoin.P2P.Peer.NetworkPeer.onDisconnected"/> callback was requested from the same async context.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeer.DisconnectedExecutionAsyncContext.DisconnectCallbackRequested">
            <summary>
            Set to <c>true</c> if <see cref="F:Stratis.Bitcoin.P2P.Peer.NetworkPeer.onDisconnected"/> was
            called from within the current async context, set to <c>false</c> otherwise.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeer.selfEndpointTracker">
            <summary>Tracker for endpoints known to be self. </summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeer.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeer.dateTimeProvider">
            <summary>Provider of time functions.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeer.State">
            <inheritdoc/>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeer.stateTransitionTable">
            <summary>Table of valid transitions between peer states.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeer.RemoteSocketEndpoint">
            <inheritdoc/>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeer.RemoteSocketAddress">
            <inheritdoc/>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeer.RemoteSocketPort">
            <inheritdoc/>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeer.Inbound">
            <inheritdoc/>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeer.Behaviors">
            <inheritdoc/>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeer.PeerEndPoint">
            <inheritdoc/>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeer.TimeOffset">
            <inheritdoc/>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeer.Connection">
            <inheritdoc/>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeer.counter">
            <summary>Statistics about the number of bytes transferred from and to the peer.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeer.Counter">
            <inheritdoc/>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeer.Version">
            <inheritdoc/>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeer.IsConnected">
            <inheritdoc/>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeer.advertize">
            <summary><c>true</c> to advertise "addr" message with our external endpoint to the peer when passing to <see cref="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerState.HandShaked"/> state.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeer.MyVersion">
            <inheritdoc/>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeer.PeerVersion">
            <inheritdoc/>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeer.disconnected">
            <summary>Set to <c>1</c> if the peer disconnection has been initiated, <c>0</c> otherwise.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeer.disposed">
            <summary>Set to <c>1</c> if the peer disposal has been initiated, <c>0</c> otherwise.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeer.onDisconnectedAsyncContext">
            <summary>
            Async context to allow to recognize whether <see cref="F:Stratis.Bitcoin.P2P.Peer.NetworkPeer.onDisconnected"/> callback execution is scheduled in this async context.
            <para>
            It is not <c>null</c> if one of the following callbacks is in progress: <see cref="P:Stratis.Bitcoin.P2P.Peer.NetworkPeer.StateChanged"/>, <see cref="P:Stratis.Bitcoin.P2P.Peer.NetworkPeer.MessageReceived"/>,
            set to <c>null</c> otherwise.
            </para>
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeer.preferredTransactionOptions">
            <summary>Transaction options we would like.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeer.SupportedTransactionOptions">
            <inheritdoc/>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeer.DisconnectReason">
            <inheritdoc/>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeer.Network">
            <inheritdoc/>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeer.StateChanged">
            <inheritdoc/>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeer.MessageReceived">
            <inheritdoc/>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeer.ConnectionParameters">
            <inheritdoc/>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeer.MessageProducer">
            <inheritdoc/>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeer.onDisconnected">
            <summary>Callback that is invoked when peer has finished disconnecting, or <c>null</c> when no notification after the disconnection is required.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeer.onSendingMessage">
            <summary>Callback that is invoked just before a message is to be sent to a peer, or <c>null</c> when nothing needs to be called.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeer.asyncQueue">
            <summary>A queue for sending payload messages to peers.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeer.#ctor(System.Boolean,System.Net.IPEndPoint,NBitcoin.Network,Stratis.Bitcoin.P2P.Peer.NetworkPeerConnectionParameters,Stratis.Bitcoin.Utilities.IDateTimeProvider,Microsoft.Extensions.Logging.ILoggerFactory,Stratis.Bitcoin.P2P.ISelfEndpointTracker,System.Action{Stratis.Bitcoin.P2P.Peer.INetworkPeer},System.Action{System.Net.IPEndPoint,Stratis.Bitcoin.P2P.Protocol.Payloads.Payload})">
            <summary>
            Initializes parts of the object that are common for both inbound and outbound peers.
            </summary>
            <param name="inbound"><c>true</c> for inbound peers, <c>false</c> for outbound peers.</param>
            <param name="peerEndPoint">IP address and port on the side of the peer.</param>
            <param name="network">Specification of the network the node runs on - regtest/testnet/mainnet.</param>
            <param name="parameters">Various settings and requirements related to how the connections with peers are going to be established, or <c>null</c> to use default parameters.</param>
            <param name="dateTimeProvider">Provider of time functions.</param>
            <param name="loggerFactory">Factory for creating loggers.</param>
            <param name="selfEndpointTracker">Tracker for endpoints known to be self.</param>
            <param name="onDisconnected">Callback that is invoked when peer has finished disconnecting, or <c>null</c> when no notification after the disconnection is required.</param>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeer.#ctor(System.Net.IPEndPoint,NBitcoin.Network,Stratis.Bitcoin.P2P.Peer.NetworkPeerConnectionParameters,Stratis.Bitcoin.P2P.Peer.INetworkPeerFactory,Stratis.Bitcoin.Utilities.IDateTimeProvider,Microsoft.Extensions.Logging.ILoggerFactory,Stratis.Bitcoin.P2P.ISelfEndpointTracker,System.Action{Stratis.Bitcoin.P2P.Peer.INetworkPeer},System.Action{System.Net.IPEndPoint,Stratis.Bitcoin.P2P.Protocol.Payloads.Payload})">
            <summary>
            Initializes an instance of the object for outbound network peers.
            </summary>
            <param name="peerEndPoint">IP address and port on the side of the peer.</param>
            <param name="network">Specification of the network the node runs on - regtest/testnet/mainnet.</param>
            <param name="parameters">Various settings and requirements related to how the connections with peers are going to be established, or <c>null</c> to use default parameters.</param>
            <param name="networkPeerFactory">Factory for creating P2P network peers.</param>
            <param name="dateTimeProvider">Provider of time functions.</param>
            <param name="loggerFactory">Factory for creating loggers.</param>
            <param name="selfEndpointTracker">Tracker for endpoints known to be self.</param>
            <param name="onDisconnected">Callback that is invoked when peer has finished disconnecting, or <c>null</c> when no notification after the disconnection is required.</param>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeer.#ctor(System.Net.IPEndPoint,NBitcoin.Network,Stratis.Bitcoin.P2P.Peer.NetworkPeerConnectionParameters,System.Net.Sockets.TcpClient,Stratis.Bitcoin.Utilities.IDateTimeProvider,Stratis.Bitcoin.P2P.Peer.INetworkPeerFactory,Microsoft.Extensions.Logging.ILoggerFactory,Stratis.Bitcoin.P2P.ISelfEndpointTracker,System.Action{Stratis.Bitcoin.P2P.Peer.INetworkPeer},System.Action{System.Net.IPEndPoint,Stratis.Bitcoin.P2P.Protocol.Payloads.Payload})">
            <summary>
            Initializes an instance of the object for inbound network peers with already established connection.
            </summary>
            <param name="peerEndPoint">IP address and port on the side of the peer.</param>
            <param name="network">Specification of the network the node runs on - regtest/testnet/mainnet.</param>
            <param name="parameters">Various settings and requirements related to how the connections with peers are going to be established, or <c>null</c> to use default parameters.</param>
            <param name="client">Already connected network client.</param>
            <param name="dateTimeProvider">Provider of time functions.</param>
            <param name="networkPeerFactory">Factory for creating P2P network peers.</param>
            <param name="loggerFactory">Factory for creating loggers.</param>
            <param name="selfEndpointTracker">Tracker for endpoints known to be self.</param>
            <param name="onDisconnected">Callback that is invoked when peer has finished disconnecting, or <c>null</c> when no notification after the disconnection is required.</param>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeer.SetStateAsync(Stratis.Bitcoin.P2P.Peer.NetworkPeerState)">
            <summary>
            Sets a new network state of the peer.
            </summary>
            <param name="newState">New network state to be set.</param>
            <remarks>This method is not thread safe.</remarks>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeer.ConnectAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeer.OnStateChangedAsync(Stratis.Bitcoin.P2P.Peer.NetworkPeerState)">
            <summary>
            Calls event handlers when the network state of the peer is changed.
            </summary>
            <param name="previous">Previous network state of the peer.</param>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeer.ProcessMessageAsync(Stratis.Bitcoin.P2P.Protocol.IncomingMessage,System.Threading.CancellationToken)">
            <summary>
            Processes an incoming message from the peer and calls subscribed event handlers.
            </summary>
            <param name="message">Message received from the peer.</param>
            <param name="cancellation">Cancellation token to abort message processing.</param>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeer.ProcessVersionMessageAsync(Stratis.Bitcoin.P2P.Protocol.Payloads.VersionPayload,System.Threading.CancellationToken)">
            <summary>
            Processes a "version" message received from a peer.
            </summary>
            <param name="version">Version message received from a peer.</param>
            <param name="cancellation">Cancellation token to abort message processing.</param>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeer.ProcessInitialVersionPayloadAsync(Stratis.Bitcoin.P2P.Protocol.Payloads.VersionPayload,System.Threading.CancellationToken)">
            <summary>
            Processes an initial "version" message received from a peer.
            </summary>
            <param name="version">Version message received from a peer.</param>
            <param name="cancellation">Cancellation token to abort message processing.</param>
            <exception cref="T:System.OperationCanceledException">Thrown if the response to our "version" message is not received on time.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeer.InitDefaultBehaviors(Stratis.Bitcoin.P2P.Peer.NetworkPeerConnectionParameters)">
            <summary>
            Initializes behaviors from the default template.
            </summary>
            <param name="parameters">Various settings and requirements related to how the connections with peers are going to be established, including the default behaviors template.</param>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeer.SendMessage(Stratis.Bitcoin.P2P.Protocol.Payloads.Payload)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeer.SendMessageHandledAsync(Stratis.Bitcoin.P2P.Protocol.Payloads.Payload,System.Threading.CancellationToken)">
            <summary>
            This is used by the asyncQueue to send payloads messages to peers under a separate thread.
            If a message is sent inside the state change even and the send fails this could cause a deadlock,
            to avoid that if there is any danger of a deadlock it better to use the SendMessage method and go via the queue.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeer.SendMessageAsync(Stratis.Bitcoin.P2P.Protocol.Payloads.Payload,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeer.VersionHandshakeAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeer.VersionHandshakeAsync(Stratis.Bitcoin.P2P.Peer.NetworkPeerRequirement,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeer.RespondToHandShakeAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeer.Disconnect(System.String,System.Exception)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeer.ExecuteDisconnectedCallbackWhenSafe">
            <summary>
            Executes <see cref="F:Stratis.Bitcoin.P2P.Peer.NetworkPeer.onDisconnected"/> callback if no callbacks are currently executing in the same async context,
            schedules <see cref="F:Stratis.Bitcoin.P2P.Peer.NetworkPeer.onDisconnected"/> execution after the callback otherwise.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeer.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeer.AddSupportedOptions(Stratis.Bitcoin.P2P.Protocol.InventoryType)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeer.Behavior``1">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.IReadOnlyNetworkPeerCollection.FindByIp(System.Net.IPAddress)">
            <summary>
            Returns all connected peers from a given IP address (the port is irrelevant).
            </summary>
            <param name="ip">The IP address to filter on.</param>
            <returns>The set of connected peers that matched the given IP address.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Peer.NetworkPeerCollection.NetworkPeerComparer">
            <summary>
            Provides a comparer to specify how peers are compared for equality.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Peer.NetworkPeerConnection">
            <summary>
            Represents a network connection to a peer. It is responsible for reading incoming messages
            from the peer and sending messages from the node to the peer.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerConnection.loggerFactory">
            <summary>Logger factory to create loggers.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerConnection.payloadProvider">
            <summary>A provider of network payload messages.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerConnection.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerConnection.network">
            <summary>Specification of the network the node runs on - regtest/testnet/mainnet.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerConnection.dateTimeProvider">
            <summary>Provider of time functions.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerConnection.messageListener">
            <summary>Consumer of messages coming from connected clients.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerConnection.messageProducerRegistration">
            <summary>Registration to the message producer of the connected peer.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeerConnection.Id">
            <summary>Unique identifier of a client.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerConnection.tcpClient">
            <summary>Underlaying TCP client.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerConnection.writeLock">
            <summary>Prevents parallel execution of multiple write operations on <see cref="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerConnection.stream"/>.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerConnection.stream">
            <summary>Stream to send and receive messages through established TCP connection.</summary>
            <remarks>Write operations on the stream have to be protected by <see cref="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerConnection.writeLock"/>.</remarks>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeerConnection.RemoteEndPoint">
            <summary>Address of the end point the client is connected to, or <c>null</c> if the client has not connected yet.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerConnection.peer">
            <summary>Network peer this connection connects to.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeerConnection.CancellationSource">
            <summary>Cancellation to be triggered at shutdown to abort all pending operations on the connection.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerConnection.receiveMessageTask">
            <summary>Task responsible for reading incoming messages from the stream.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeerConnection.MessageProducer">
            <summary>Queue of incoming messages distributed to message consumers.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerConnection.disposed">
            <summary>Set to <c>1</c> if the peer disposal has been initiated, <c>0</c> otherwise.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerConnection.#ctor(NBitcoin.Network,Stratis.Bitcoin.P2P.Peer.INetworkPeer,System.Net.Sockets.TcpClient,System.Int32,Stratis.Bitcoin.P2P.Protocol.ProcessMessageAsync{Stratis.Bitcoin.P2P.Protocol.IncomingMessage},Stratis.Bitcoin.Utilities.IDateTimeProvider,Microsoft.Extensions.Logging.ILoggerFactory,Stratis.Bitcoin.P2P.Protocol.Payloads.PayloadProvider)">
            <summary>
            Initializes an instance of the object.
            </summary>
            <param name="network">Specification of the network the node runs on - regtest/testnet/mainnet.</param>
            <param name="peer">Network peer the node is connected to, or will connect to.</param>
            <param name="client">Initialized TCP client, which may or may not be already connected.</param>
            <param name="clientId">Unique identifier of the connection.</param>
            <param name="processMessageAsync">Callback to be called when a new message arrives from the peer.</param>
            <param name="dateTimeProvider">Provider of time functions.</param>
            <param name="loggerFactory">Factory for creating loggers.</param>
            <param name="payloadProvider">A provider of network payload messages.</param>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerConnection.StartReceiveMessages">
            <summary>
            Starts waiting for incoming messages.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerConnection.ReceiveMessagesAsync">
            <summary>
            Reads messages from the connection stream.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerConnection.ConnectAsync(System.Net.IPEndPoint,System.Threading.CancellationToken)">
            <summary>
            Connects the network client to the target server.
            </summary>
            <param name="endPoint">IP address and port to connect to.</param>
            <param name="cancellation">Cancellation token that allows aborting the operation.</param>
            <exception cref="T:System.OperationCanceledException">Thrown when the connection attempt was aborted.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerConnection.SendAsync(Stratis.Bitcoin.P2P.Protocol.Payloads.Payload,System.Threading.CancellationToken)">
            <summary>
            Sends message to the connected counterparty.
            </summary>
            <param name="payload">Payload of the message to send.</param>
            <param name="cancellation">Cancellation token that allows aborting the sending operation.</param>
            <exception cref="T:System.OperationCanceledException">Thrown when the peer has been disconnected
            or the cancellation token has been cancelled or another error occurred.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerConnection.SendAsync(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Sends data over the established connection.
            </summary>
            <param name="data">Data to send.</param>
            <param name="cancellation">Cancellation token that allows aborting the operation.</param>
            <exception cref="T:System.OperationCanceledException">Thrown when the connection was terminated or the cancellation token was cancelled.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerConnection.ReadMessageAsync(NBitcoin.Protocol.ProtocolVersion,System.Threading.CancellationToken)">
            <summary>
            Reads raw message in binary form from the connection stream.
            </summary>
            <param name="protocolVersion">Version of the protocol that defines the message format.</param>
            <param name="cancellation">Cancellation token that allows aborting the read operation.</param>
            <returns>Binary message received from the connected counterparty.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown if the operation was cancelled or the end of the stream was reached.</exception>
            <exception cref="T:System.Net.ProtocolViolationException">Thrown if the incoming message is too big.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerConnection.ReadMagicAsync(System.Byte[],System.Threading.CancellationToken)">
            <summary>
            Seeks and reads the magic value from the connection stream.
            </summary>
            <param name="magic">Magic value that starts the message.</param>
            <param name="cancellation">Cancellation token that allows aborting the read operation.</param>
            <exception cref="T:System.OperationCanceledException">Thrown if the operation was cancelled or the end of the stream was reached.</exception>
            <remarks>
            Each networkm message starts with the magic value. If the connection stream is in unknown state,
            the next bytes to read might not be the magic. Therefore we read from the stream until we find the magic value.
            </remarks>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerConnection.ReadBytesAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Reads a specific number of bytes from the connection stream into a buffer.
            </summary>
            <param name="buffer">Buffer to read incoming data to.</param>
            <param name="offset">Position in the buffer where to write the data.</param>
            <param name="bytesToRead">Number of bytes to read.</param>
            <param name="cancellation">Cancellation token that allows aborting the read operation.</param>
            <returns>Binary data received from the connected counterparty.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown if the operation was cancelled or the end of the stream was reached.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerConnection.ReadAndParseMessageAsync(NBitcoin.Protocol.ProtocolVersion,System.Threading.CancellationToken)">
            <summary>
            Reads a raw binary message from the connection stream and formats it to a structured message.
            </summary>
            <param name="protocolVersion">Version of the protocol that defines the message format.</param>
            <param name="cancellation">Cancellation token that allows aborting the read operation.</param>
            <returns>Binary message received from the connected counterparty.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown if the operation was cancelled or the end of the stream was reached.</exception>
            <exception cref="T:System.FormatException">Thrown if the incoming message is too big.</exception>
            <remarks>
            TODO: Currently we rely on <see cref="!:Message.ReadNext(System.IO.Stream, Network, ProtocolVersion, CancellationToken, byte[], out PerformanceCounter)"/>
            for parsing the message from binary data. That method need stream to read from, so to achieve that we create a memory stream from our data,
            which is not efficient. This should be improved.
            </remarks>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerConnection.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerConnection.Disconnect">
            <summary>
            Closes TCP connection and disposes it's stream.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeerConnectionParameters.Advertize">
            <summary>Send addr unsollicited message of the AddressFrom peer when passing to Handshaked state.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeerConnectionParameters.IsRelay">
            <summary>If true, the node will receive all incoming transactions if no bloomfilter are set.</summary>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Peer.NetworkPeerDisposer">
            <summary>Maintains a list of connected peers and ensures their proper disposal.</summary>
            <remarks>
            Each component that creates instances of <see cref="T:Stratis.Bitcoin.P2P.Peer.NetworkPeer"/> should be responsible for disposing it.
            <para>
            Implementing this functionality in such components will lead to having similar code in these components.
            Instead, this class could be used in order to provide such functionality.
            This means that the responsibility for destroying the peer can delegated to this class, which simplifies the
            code of the owning component.
            </para>
            <para>
            When a new peer is created (and the <see cref="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerDisposer.OnPeerDisconnectedHandler(Stratis.Bitcoin.P2P.Peer.INetworkPeer)"/> callback is used as an <see cref="F:Stratis.Bitcoin.P2P.Peer.NetworkPeer.onDisconnected"/> in the constructor)
            by a component that utilizes this class, <see cref="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerDisposer.AddPeer(Stratis.Bitcoin.P2P.Peer.INetworkPeer)"/> should be used to inform  this class about it. Once the peer is added, the owning component no
            longer needs to care about this peer's disposal.
            When a peer disconnects, this class will invoke peer's disposal in a separated task.
            Also when <see cref="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerDisposer.Dispose"/> is called, all connected peers added to this component will be disposed.
            </para>
            </remarks>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerDisposer.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerDisposer.onPeerDisposed">
            <summary>Callback that is called before the peer is disposed.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerDisposer.peersToDispose">
            <summary>Queue of disconnected peers to be disposed.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerDisposer.connectedPeers">
            <summary>Mapping of connected peers by their connection ID.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeerDisposer.ConnectedPeersCount">
            <summary>Gets the connected peers count.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeerDisposer.ConnectedInboundPeersCount">
            <summary>Gets the connected inbound peers count.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerDisposer.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,System.Action{Stratis.Bitcoin.P2P.Peer.INetworkPeer})">
            <summary>
            Initializes a new instance of the <see cref="T:Stratis.Bitcoin.P2P.Peer.NetworkPeerDisposer" /> class.
            </summary>
            <param name="loggerFactory">Factory for creating loggers.</param>
            <param name="onPeerDisposed">Callback that is called before the peer is disposed.</param>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerDisposer.OnEnqueueAsync(Stratis.Bitcoin.P2P.Peer.INetworkPeer,System.Threading.CancellationToken)">
            <summary>
            Callback that is invoked whenever a new peer is added to the <see cref="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerDisposer.peersToDispose" />.
            </summary>
            <param name="peer">The peer.</param>
            <param name="cancellationToken">Cancellation token.</param>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerDisposer.OnPeerDisconnectedHandler(Stratis.Bitcoin.P2P.Peer.INetworkPeer)">
            <summary>Handles peer's disconnection.</summary>
            <param name="peer">Peer which disposal should be safely handled.</param>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerDisposer.AddPeer(Stratis.Bitcoin.P2P.Peer.INetworkPeer)">
            <summary>
            Adds the peer to the collection of connected peers.
            </summary>
            <param name="peer">The peer to add.</param>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerDisposer.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Peer.INetworkPeerFactory">
            <summary>
            Contract for factory for creating P2P network peers.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.INetworkPeerFactory.CreateNetworkPeer(System.Net.Sockets.TcpClient,Stratis.Bitcoin.P2P.Peer.NetworkPeerConnectionParameters,Stratis.Bitcoin.P2P.Peer.NetworkPeerDisposer)">
            <summary>
            Creates a network peer using already established network connection.
            </summary>
            <param name="client">Already connected network client.</param>
            <param name="parameters">Parameters of the established connection, or <c>null</c> to use default parameters.</param>
            <param name="networkPeerDisposer">Maintains a list of connected peers and ensures their proper disposal. Or <c>null</c> if case disposal should be handled from user code.</param>
            <returns>New network peer that is connected via the established connection.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.INetworkPeerFactory.CreateConnectedNetworkPeerAsync(System.String,NBitcoin.Protocol.ProtocolVersion,System.Boolean,System.Threading.CancellationToken,Stratis.Bitcoin.P2P.Peer.NetworkPeerDisposer)">
            <summary>
            Creates a new network peer which is connected to a specified counterparty.
            </summary>
            <param name="endPoint">Address and port of the counterparty to connect to.</param>
            <param name="myVersion">Version of the protocol that the node supports.</param>
            <param name="isRelay">Whether the remote peer should announce relayed transactions or not. See <see cref="P:Stratis.Bitcoin.P2P.Protocol.Payloads.VersionPayload.Relay"/> for more information.</param>
            <param name="cancellation">Cancallation token that allows to interrupt establishing of the connection.</param>
            <param name="networkPeerDisposer">Maintains a list of connected peers and ensures their proper disposal. Or <c>null</c> if case disposal should be handled from user code.</param>
            <returns>Network peer connected to the specified counterparty.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.INetworkPeerFactory.CreateConnectedNetworkPeerAsync(System.Net.IPEndPoint,Stratis.Bitcoin.P2P.Peer.NetworkPeerConnectionParameters,Stratis.Bitcoin.P2P.Peer.NetworkPeerDisposer)">
            <summary>
            Creates a new network peer which is connected to a specified counterparty.
            </summary>
            <param name="peerEndPoint">Address and port of the counterparty to connect to.</param>
            <param name="parameters">Parameters specifying how the connection with the counterparty should be established, or <c>null</c> to use default parameters.</param>
            <param name="networkPeerDisposer">Maintains a list of connected peers and ensures their proper disposal. Or <c>null</c> if case disposal should be handled from user code.</param>
            <returns>Network peer connected to the specified counterparty.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.INetworkPeerFactory.CreateNetworkPeerServer(System.Net.IPEndPoint,System.Net.IPEndPoint,NBitcoin.Protocol.ProtocolVersion)">
            <summary>
            Creates a new network peer server.
            <para>When created, the server is ready to be started, but this method does not start listening.</para>
            </summary>
            <param name="localEndPoint">IP address and port to listen on.</param>
            <param name="externalEndPoint">IP address and port that the server is reachable from the Internet on.</param>
            <param name="version">Version of the network protocol that the server should run.</param>
            <returns>Newly created network peer server, which is ready to be started.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.INetworkPeerFactory.CreateNetworkPeerConnection(Stratis.Bitcoin.P2P.Peer.INetworkPeer,System.Net.Sockets.TcpClient,Stratis.Bitcoin.P2P.Protocol.ProcessMessageAsync{Stratis.Bitcoin.P2P.Protocol.IncomingMessage})">
            <summary>
            Creates a new representation of the network connection using TCP client object.
            </summary>
            <param name="peer">Network peer the node is connected to, or will connect to.</param>
            <param name="client">Initialized and possibly connected TCP client to the peer.</param>
            <param name="processMessageAsync">Callback to be called when a new message arrives from the peer.</param>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.INetworkPeerFactory.RegisterOnSendingMessageCallback(System.Action{System.Net.IPEndPoint,Stratis.Bitcoin.P2P.Protocol.Payloads.Payload})">
            <summary>
            Registers a callback that will be passed to all created peers. It gets called prior to sending messages to the peer.
            </summary>
            <param name="callback">The callback to be used by each peer.</param>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Peer.NetworkPeerFactory">
            <summary>
            Factory for creating P2P network peers.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerFactory.loggerFactory">
            <summary>Factory for creating loggers.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerFactory.payloadProvider">
            <summary>A provider of network payload messages.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerFactory.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerFactory.dateTimeProvider">
            <summary>Provider of time functions.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerFactory.network">
            <summary>Specification of the network the node runs on - regtest/testnet/mainnet.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerFactory.lastClientId">
            <summary>Identifier of the last network peer client this factory produced.</summary>
            <remarks>When a new client is created, the ID is incremented so that each client has its own unique ID.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerFactory.initialBlockDownloadState">
            <summary>Provider of IBD state.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerFactory.connectionManagerSettings">
            <summary>Configuration related to incoming and outgoing connections.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerFactory.onSendingMessage">
            <summary>Callback that is invoked just before a message is to be sent to a peer, or <c>null</c> when nothing needs to be called.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerFactory.#ctor(NBitcoin.Network,Stratis.Bitcoin.Utilities.IDateTimeProvider,Microsoft.Extensions.Logging.ILoggerFactory,Stratis.Bitcoin.P2P.Protocol.Payloads.PayloadProvider,Stratis.Bitcoin.P2P.ISelfEndpointTracker,Stratis.Bitcoin.Interfaces.IInitialBlockDownloadState,Stratis.Bitcoin.Configuration.Settings.ConnectionManagerSettings)">
            <summary>
            Initializes a new instance of the factory.
            </summary>
            <param name="network">Specification of the network the node runs on - regtest/testnet/mainnet.</param>
            <param name="dateTimeProvider">Provider of time functions.</param>
            <param name="loggerFactory">Factory for creating loggers.</param>
            <param name="payloadProvider">A provider of network payload messages.</param>
            <param name="selfEndpointTracker">Tracker for endpoints known to be self.</param>
            <param name="initialBlockDownloadState">Provider of IBD state.</param>
            <param name="connectionManagerSettings">Configuration related to incoming and outgoing connections.</param>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerFactory.CreateNetworkPeer(System.Net.Sockets.TcpClient,Stratis.Bitcoin.P2P.Peer.NetworkPeerConnectionParameters,Stratis.Bitcoin.P2P.Peer.NetworkPeerDisposer)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerFactory.CreateConnectedNetworkPeerAsync(System.String,NBitcoin.Protocol.ProtocolVersion,System.Boolean,System.Threading.CancellationToken,Stratis.Bitcoin.P2P.Peer.NetworkPeerDisposer)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerFactory.CreateConnectedNetworkPeerAsync(System.Net.IPEndPoint,Stratis.Bitcoin.P2P.Peer.NetworkPeerConnectionParameters,Stratis.Bitcoin.P2P.Peer.NetworkPeerDisposer)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerFactory.CreateNetworkPeerServer(System.Net.IPEndPoint,System.Net.IPEndPoint,NBitcoin.Protocol.ProtocolVersion)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerFactory.CreateNetworkPeerConnection(Stratis.Bitcoin.P2P.Peer.INetworkPeer,System.Net.Sockets.TcpClient,Stratis.Bitcoin.P2P.Protocol.ProcessMessageAsync{Stratis.Bitcoin.P2P.Protocol.IncomingMessage})">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerFactory.RegisterOnSendingMessageCallback(System.Action{System.Net.IPEndPoint,Stratis.Bitcoin.P2P.Protocol.Payloads.Payload})">
            <inheritdoc/>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Peer.NetworkPeerListener">
            <summary>
            Message listener that waits until a specific payload is received and returns it to the caller.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerListener.asyncQueue">
            <summary>Queue of unprocessed messages.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerListener.peer">
            <summary>Connected network peer that we receive messages from.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerListener.messageProducerRegistration">
            <summary>Registration to the message producer of the connected peer.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerListener.#ctor(Stratis.Bitcoin.P2P.Peer.INetworkPeer)">
            <summary>
            Initializes the instance of the object and subscribes to the peer's message producer.
            </summary>
            <param name="peer">Connected network peer that we receive messages from.</param>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerListener.PushMessage(Stratis.Bitcoin.P2P.Protocol.IncomingMessage)">
            <inheritdoc/>
            <remarks>Adds the newly received message to the queue.</remarks>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerListener.ReceivePayloadAsync``1(System.Threading.CancellationToken)">
            <summary>
            Waits until a message with a specific payload arrives from the peer.
            </summary>
            <typeparam name="TPayload">Type of payload to wait for.</typeparam>
            <param name="cancellationToken">Cancellation token to abort the waiting operation.</param>
            <returns>Payload of the specific type received from the peer.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown if the peer is not connected when the method is called, or when <see cref="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerListener.Dispose"/>
            has been called while we are waiting for the message.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerListener.Dispose">
            <inheritdoc />
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerServer.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerServer.networkPeerFactory">
            <summary>Factory for creating P2P network peers.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeerServer.Network">
            <summary>Specification of the network the node runs on - regtest/testnet/mainnet.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeerServer.Version">
            <summary>Version of the protocol that the server is running.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeerServer.InboundNetworkPeerConnectionParameters">
            <summary>The parameters that will be cloned and applied for each peer connecting to <see cref="T:Stratis.Bitcoin.P2P.Peer.NetworkPeerServer"/>.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeerServer.LocalEndpoint">
            <summary>IP address and port, on which the server listens to incoming connections.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Peer.NetworkPeerServer.ExternalEndpoint">
            <summary>IP address and port of the external network interface that is accessible from the Internet.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerServer.tcpListener">
            <summary>TCP server listener accepting inbound connections.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerServer.serverCancel">
            <summary>Cancellation that is triggered on shutdown to stop all pending operations.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerServer.networkPeerDisposer">
            <summary>Maintains a list of connected peers and ensures their proper disposal.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerServer.acceptTask">
            <summary>Task accepting new clients in a loop.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerServer.initialBlockDownloadState">
            <summary>Provider of IBD state.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Peer.NetworkPeerServer.connectionManagerSettings">
            <summary>Configuration related to incoming and outgoing connections.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerServer.#ctor(NBitcoin.Network,System.Net.IPEndPoint,System.Net.IPEndPoint,NBitcoin.Protocol.ProtocolVersion,Microsoft.Extensions.Logging.ILoggerFactory,Stratis.Bitcoin.P2P.Peer.INetworkPeerFactory,Stratis.Bitcoin.Interfaces.IInitialBlockDownloadState,Stratis.Bitcoin.Configuration.Settings.ConnectionManagerSettings)">
            <summary>
            Initializes instance of a network peer server.
            </summary>
            <param name="network">Specification of the network the node runs on - regtest/testnet/mainnet.</param>
            <param name="localEndPoint">IP address and port to listen on.</param>
            <param name="externalEndPoint">IP address and port that the server is reachable from the Internet on.</param>
            <param name="version">Version of the network protocol that the server should run.</param>
            <param name="loggerFactory">Factory for creating loggers.</param>
            <param name="networkPeerFactory">Factory for creating P2P network peers.</param>
            <param name="initialBlockDownloadState">Provider of IBD state.</param>
            <param name="connectionManagerSettings">Configuration related to incoming and outgoing connections.</param>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerServer.Listen">
            <summary>
            Starts listening on the server's initialized endpoint.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerServer.AcceptClientsAsync">
            <summary>
            Implements loop accepting connections from newly connected clients.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerServer.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerServer.CreateNetworkPeerConnectionParameters">
            <summary>
            Initializes connection parameters using the server's initialized values.
            </summary>
            <returns>Initialized connection parameters.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Peer.NetworkPeerServer.AllowClientConnection(System.Net.Sockets.TcpClient)">
            <summary>
            Check if the client is allowed to connect based on certain criteria.
            </summary>
            <returns>When criteria is met returns <c>true</c>, to allow connection.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.PeerAddress">
            <summary>
            A class which holds data on a peer's (IPEndPoint) attempts, connections and successful handshake events.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerAddress.AttemptThreshold">
            <summary>
            The maximum amount of times a peer can be attempted within a give time frame.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerAddress.AttemptHandshakeThreshold">
            <summary>
            The maximum amount of times handshake can be attempted within a give time frame.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerAddress.AttempThresholdHours">
            <summary>
            The amount of hours we will wait before selecting an attempted peer again,
            if it hasn't yet reached the <see cref="F:Stratis.Bitcoin.P2P.PeerAddress.AttemptThreshold"/> amount of attempts.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerAddress.AttemptResetThresholdHours">
            <summary>
            The amount of hours after which the peer's failed connection attempts
            will be reset to zero.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.PeerAddress.Endpoint">
            <summary>Endpoint of this peer.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerAddress.addressTime">
            <summary>Used to construct the <see cref="!:NetworkAddress"/> after deserializing this peer.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerAddress.loopback">
            <summary>The source address of this peer.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.PeerAddress.ConnectionAttempts">
            <summary>
            The amount of connection attempts.
            <para>
            This gets reset when a connection was successful.</para>
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.PeerAddress.HandshakedAttempts">
            <summary>
            The amount of handshake attempts.
            <para>
            This gets reset when a handshake was successful.</para>
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.PeerAddress.LastConnectionHandshake">
            <summary>
            The last successful version handshake.
            <para>
            This is set when the connection attempt was successful and a handshake was done.
            </para>
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.PeerAddress.LastHandshakeAttempt">
            <summary>
            The last handshake attempt.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.PeerAddress.LastSeen">
            <summary>
            The last time this peer was seen.
            <para>
            This is set via <see cref="T:Stratis.Bitcoin.P2P.Protocol.Behaviors.PingPongBehavior"/> to ensure that a peer is live.
            </para>
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.PeerAddress.BanTimeStamp">
            <summary>
            UTC DateTime when a peer is banned.
            </summary>
            <remarks>
            This is set in <see cref="!:PeerBanning"/>.
            </remarks>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.PeerAddress.BanUntil">
            <summary>
            UTC DateTime when the ban expires against the peer.
            </summary>
            <remarks>
            This is set in <see cref="!:PeerBanning"/>.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Stratis.Bitcoin.P2P.PeerAddress.BanReason" -->
        <member name="P:Stratis.Bitcoin.P2P.PeerAddress.BanScore">
            <summary>
            Maintain a count of bad behaviour.
            <para>
            Once a certain score is reached ban the peer.
            </para>
            </summary>
            <remarks>
            The logic around this has not yet been implemented.
            This is set in <see cref="!:PeerBanning"/>.
            </remarks>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.PeerAddress.Attempted">
            <summary>
            <c>True</c> if the peer has had connection attempts but none successful.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.PeerAddress.Connected">
            <summary>
            <c>True</c> if the peer has had a successful connection attempt.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.PeerAddress.Fresh">
            <summary>
            <c>True</c> if the peer has never had connection attempts.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.PeerAddress.Handshaked">
            <summary>
            <c>True</c> if the peer has had a successful connection attempt and handshaked.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.PeerAddress.LastAttempt">
            <summary>
            The last connection attempt.
            <para>
            This is set regardless of whether or not the connection attempt was successful or not.
            </para>
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.PeerAddress.LastConnectionSuccess">
            <summary>
            The last successful connection attempt.
            <para>
            This is set when the connection attempt was successful (but not necessarily handshaked).
            </para>
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.PeerAddress.LastDiscoveredFrom">
            <summary>
            The last time this peer was discovered from.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerAddress.ResetAttempts">
            <summary>
            Resets the amount of <see cref="P:Stratis.Bitcoin.P2P.PeerAddress.ConnectionAttempts"/>.
            <para>
            This is reset when the amount of failed connection attempts reaches
            the <see cref="F:Stratis.Bitcoin.P2P.PeerAddress.AttemptThreshold"/> and the last attempt was
            made more than <see cref="F:Stratis.Bitcoin.P2P.PeerAddress.AttemptResetThresholdHours"/> ago.
            </para>
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerAddress.ResetHandshakeAttempts">
            <summary>
            Resets the amount of <see cref="P:Stratis.Bitcoin.P2P.PeerAddress.HandshakedAttempts"/>.
            <para>
            This is reset when the amount of failed handshake attempts reaches
            the <see cref="P:Stratis.Bitcoin.P2P.PeerAddress.HandshakedAttempts"/> and the last attempt was
            made more than <see cref="F:Stratis.Bitcoin.P2P.PeerAddress.AttempThresholdHours"/> ago.
            </para>
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerAddress.SetAttempted(System.DateTime)">
            <summary>
            Increments <see cref="P:Stratis.Bitcoin.P2P.PeerAddress.ConnectionAttempts"/> and sets the <see cref="P:Stratis.Bitcoin.P2P.PeerAddress.LastAttempt"/>.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerAddress.SetHandshakeAttempted(System.DateTimeOffset)">
            <summary>
            Increments <see cref="P:Stratis.Bitcoin.P2P.PeerAddress.HandshakedAttempts"/> and sets the <see cref="P:Stratis.Bitcoin.P2P.PeerAddress.LastHandshakeAttempt"/>.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerAddress.SetConnected(System.DateTimeOffset)">
            <summary>
            Sets the <see cref="P:Stratis.Bitcoin.P2P.PeerAddress.LastConnectionSuccess"/>, <see cref="F:Stratis.Bitcoin.P2P.PeerAddress.addressTime"/> and <see cref="!:NetworkAddress.Time"/> properties.
            <para>
            Resets <see cref="P:Stratis.Bitcoin.P2P.PeerAddress.ConnectionAttempts"/> and <see cref="P:Stratis.Bitcoin.P2P.PeerAddress.LastAttempt"/>.
            </para>
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerAddress.SetDiscoveredFrom(System.DateTime)">
            <summary>Sets the <see cref="P:Stratis.Bitcoin.P2P.PeerAddress.LastDiscoveredFrom"/> time.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerAddress.SetHandshaked(System.DateTimeOffset)">
            <summary>Sets the <see cref="P:Stratis.Bitcoin.P2P.PeerAddress.LastConnectionHandshake"/> date.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerAddress.SetLastSeen(System.DateTime)">
            <summary>Sets the <see cref="P:Stratis.Bitcoin.P2P.PeerAddress.LastSeen"/> date.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerAddress.Create(System.Net.IPEndPoint)">
            <summary>
            Creates a new peer address instance.
            </summary>
            <param name="endPoint">The end point of the peer.</param>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerAddress.Create(System.Net.IPEndPoint,System.Net.IPAddress)">
            <summary>
            Creates a new peer address instance and sets the loopback address (source).
            </summary>
            <param name="endPoint">The end point of the peer.</param>
            <param name="loopback">The loopback (source) of the peer.</param>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.PeerAddressManager">
            <summary>
            This manager keeps a set of peers discovered on the network in cache and on disk.
            <para>
            The manager updates peer state according to how recent they have been connected to or not.
            </para>
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerAddressManager.dateTimeProvider">
            <summary>Provider of time functions.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerAddressManager.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerAddressManager.peerInfoByPeerAddress">
            <summary>Key value store that indexes all discovered peers by their end point.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.PeerAddressManager.Peers">
            <inheritdoc />
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerAddressManager.PeerFileName">
            <summary>The file name of the peers file.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.PeerAddressManager.PeerFilePath">
            <inheritdoc />
        </member>
        <member name="P:Stratis.Bitcoin.P2P.PeerAddressManager.PeerSelector">
            <summary>Peer selector instance, used to select peers to connect to.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerAddressManager.fileStorage">
            <summary>An object capable of storing a list of <see cref="T:Stratis.Bitcoin.P2P.PeerAddress"/>s to the file system.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerAddressManager.#ctor(Stratis.Bitcoin.Utilities.IDateTimeProvider,Stratis.Bitcoin.Configuration.DataFolder,Microsoft.Extensions.Logging.ILoggerFactory,Stratis.Bitcoin.P2P.ISelfEndpointTracker)">
            <summary>Constructor used by dependency injection.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerAddressManager.LoadPeers">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerAddressManager.SavePeers">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerAddressManager.AddPeer(System.Net.IPEndPoint,System.Net.IPAddress)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerAddressManager.AddPeers(System.Collections.Generic.IEnumerable{System.Net.IPEndPoint},System.Net.IPAddress)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerAddressManager.RemovePeer(System.Net.IPEndPoint)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerAddressManager.PeerAttempted(System.Net.IPEndPoint,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerAddressManager.PeerConnected(System.Net.IPEndPoint,System.DateTimeOffset)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerAddressManager.PeerDiscoveredFrom(System.Net.IPEndPoint,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerAddressManager.PeerHandshaked(System.Net.IPEndPoint,System.DateTimeOffset)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerAddressManager.PeerSeen(System.Net.IPEndPoint,System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerAddressManager.FindPeer(System.Net.IPEndPoint)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerAddressManager.FindPeersByIp(System.Net.IPEndPoint)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerAddressManager.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.P2P.PeerAddressManagerBehaviour">
            <summary>
            Behaviour implementation that encapsulates <see cref="T:Stratis.Bitcoin.P2P.IPeerAddressManager"/>.
            <para>
            Subscribes to state change events from <see cref="T:Stratis.Bitcoin.P2P.Peer.INetworkPeer"/> and relays connection and handshake attempts to
            the <see cref="T:Stratis.Bitcoin.P2P.IPeerAddressManager"/> instance.
            </para>
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerAddressManagerBehaviour.dateTimeProvider">
            <summary>Provider of time functions.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerAddressManagerBehaviour.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerAddressManagerBehaviour.loggerFactory">
            <summary>Builds loggers.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.PeerAddressManagerBehaviour.Mode">
            <summary>See <see cref="T:Stratis.Bitcoin.P2P.PeerAddressManagerBehaviourMode"/> for the different modes and their explanations.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerAddressManagerBehaviour.peerAddressManager">
            <summary>Peer address manager instance, see <see cref="T:Stratis.Bitcoin.P2P.IPeerAddressManager"/>.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerAddressManagerBehaviour.MaxAddressesPerAddrPayload">
            <summary>The maximum amount of addresses per addr payload. </summary>
            <remarks><see cref="!:https://en.bitcoin.it/wiki/Protocol_documentation#addr"/>.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerAddressManagerBehaviour.addrPayloadSent">
            <summary>Flag to make sure <see cref="T:Stratis.Bitcoin.P2P.Protocol.Payloads.GetAddrPayload"/> is only sent once.</summary>
            TODO how does it help against peer reconnecting to reset the flag?
        </member>
        <member name="T:Stratis.Bitcoin.P2P.PeerAddressManagerBehaviourMode">
            <summary>
            Specifies how messages related to network peer discovery are handled.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerAddressManagerBehaviourMode.None">
            <summary>Do not advertise nor discover new peers.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerAddressManagerBehaviourMode.Advertise">
            <summary>Only advertise known peers.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerAddressManagerBehaviourMode.Discover">
            <summary>Only discover peers.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerAddressManagerBehaviourMode.AdvertiseDiscover">
            <summary>Advertise known peer and discover peer.</summary>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.IPeerConnector">
            <summary>Contract for <see cref="T:Stratis.Bitcoin.P2P.PeerConnector"/>.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.IPeerConnector.ConnectorPeers">
            <summary>The collection of peers the connector is currently connected to.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.IPeerConnector.Initialize(Stratis.Bitcoin.Connection.IConnectionManager)">
            <summary>Peer connector initialization as called by the <see cref="T:Stratis.Bitcoin.Connection.ConnectionManager"/>.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.IPeerConnector.MaxOutboundConnections">
            <summary>The maximum amount of peers the node can connect to (defaults to 8).</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.IPeerConnector.Requirements">
            <summary>Specification of requirements the <see cref="T:Stratis.Bitcoin.P2P.PeerConnector"/> has when connecting to other peers.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.IPeerConnector.StartConnectAsync">
            <summary>
            Starts an asynchronous loop that connects to peers in one second intervals.
            <para>
            If the maximum amount of connections has been reached (<see cref="P:Stratis.Bitcoin.P2P.IPeerConnector.MaxOutboundConnections"/>), the action gets skipped.
            </para>
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.PeerConnector">
            <summary>
            Connects to peers asynchronously.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerConnector.asyncLoop">
            <summary>The async loop we need to wait upon before we can dispose of this connector.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerConnector.asyncLoopFactory">
            <summary>Factory for creating background async loop tasks.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerConnector.dateTimeProvider">
            <summary>Provider of time functions.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerConnector.connectionManager">
            <summary>
            Collection of connected peers that is managed by the <see cref="T:Stratis.Bitcoin.Connection.ConnectionManager"/>.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.PeerConnector.ConnectorPeers">
            <inheritdoc/>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.PeerConnector.CurrentParameters">
            <summary>The parameters cloned from the connection manager.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerConnector.loggerFactory">
            <summary>Logger factory to create loggers.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerConnector.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.PeerConnector.MaxOutboundConnections">
            <inheritdoc/>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerConnector.nodeLifetime">
            <summary>Global application life cycle control - triggers when application shuts down.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerConnector.ConnectionSettings">
            <summary>User defined connection settings.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerConnector.network">
            <summary>The network the node is running on.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerConnector.peerAddressManager">
            <summary>Peer address manager instance, see <see cref="T:Stratis.Bitcoin.P2P.IPeerAddressManager"/>.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerConnector.selfEndpointTracker">
            <summary>Tracker for endpoints known to be self.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerConnector.networkPeerFactory">
            <summary>Factory for creating P2P network peers.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.PeerConnector.Requirements">
            <inheritdoc/>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerConnector.defaultConnectionInterval">
            <summary>Default time interval between making a connection attempt.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerConnector.burstConnectionInterval">
            <summary>Burst time interval between making a connection attempt.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerConnector.networkPeerDisposer">
            <summary>Maintains a list of connected peers and ensures their proper disposal.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerConnector.#ctor(Stratis.Bitcoin.Utilities.IAsyncLoopFactory,Stratis.Bitcoin.Utilities.IDateTimeProvider,Microsoft.Extensions.Logging.ILoggerFactory,NBitcoin.Network,Stratis.Bitcoin.P2P.Peer.INetworkPeerFactory,Stratis.Bitcoin.Utilities.INodeLifetime,Stratis.Bitcoin.Configuration.NodeSettings,Stratis.Bitcoin.Configuration.Settings.ConnectionManagerSettings,Stratis.Bitcoin.P2P.IPeerAddressManager,Stratis.Bitcoin.P2P.ISelfEndpointTracker)">
            <summary>Constructor for dependency injection.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerConnector.Initialize(Stratis.Bitcoin.Connection.IConnectionManager)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerConnector.AddPeer(Stratis.Bitcoin.P2P.Peer.INetworkPeer)">
            <summary>
            Adds a peer to the <see cref="P:Stratis.Bitcoin.P2P.PeerConnector.ConnectorPeers"/>.
            <para>
            This will only happen if the peer successfully handshaked with another.
            </para>
            </summary>
            <param name="peer">Peer to be added.</param>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerConnector.RemovePeer(Stratis.Bitcoin.P2P.Peer.INetworkPeer)">
            <summary>
            Removes a given peer from the <see cref="P:Stratis.Bitcoin.P2P.PeerConnector.ConnectorPeers"/>.
            <para>
            This will happen if the peer state changed to "disconnecting", "failed" or "offline".
            </para>
            </summary>
            <param name="peer">Peer to be removed.</param>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.PeerConnector.CanStartConnect">
            <summary>Determines whether or not a connector can be started.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerConnector.OnInitialize">
            <summary>Initialization logic specific to each concrete implementation of this class.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerConnector.OnStartConnect">
            <summary>Start up logic specific to each concrete implementation of this class.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerConnector.OnConnectAsync">
            <summary>Connect logic specific to each concrete implementation of this class.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerConnector.IsPeerConnected(System.Net.IPEndPoint)">
            <summary>
            <c>true</c> if the peer is already connected.
            </summary>
            <param name="ipEndpoint">The endpoint to check.</param>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerConnector.StartConnectAsync">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerConnector.ConnectAsync(Stratis.Bitcoin.P2P.PeerAddress)">
            <summary>Attempts to connect to a random peer.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerConnector.OnPeerDisposed(Stratis.Bitcoin.P2P.Peer.INetworkPeer)">
            <summary>
            Callback that is called before the peer is disposed.
            </summary>
            <param name="peer">Peer that is being disposed.</param>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerConnector.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.PeerConnectorAddNode">
            <summary>
            The connector used to connect to peers specified with the -addnode argument
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerConnectorAddNode.#ctor(Stratis.Bitcoin.Utilities.IAsyncLoopFactory,Stratis.Bitcoin.Utilities.IDateTimeProvider,Microsoft.Extensions.Logging.ILoggerFactory,NBitcoin.Network,Stratis.Bitcoin.P2P.Peer.INetworkPeerFactory,Stratis.Bitcoin.Utilities.INodeLifetime,Stratis.Bitcoin.Configuration.NodeSettings,Stratis.Bitcoin.Configuration.Settings.ConnectionManagerSettings,Stratis.Bitcoin.P2P.IPeerAddressManager,Stratis.Bitcoin.P2P.ISelfEndpointTracker)">
            <summary>Constructor for dependency injection.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerConnectorAddNode.OnInitialize">
            <inheritdoc/>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.PeerConnectorAddNode.CanStartConnect">
            <summary>This connector is always started.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerConnectorAddNode.OnStartConnect">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerConnectorAddNode.OnConnectAsync">
            <summary>
            Only connect to nodes as specified in the -addnode arg.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.PeerConnectorConnectNode">
            <summary>
            The connector used to connect to peers specified with the -connect argument
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerConnectorConnectNode.#ctor(Stratis.Bitcoin.Utilities.IAsyncLoopFactory,Stratis.Bitcoin.Utilities.IDateTimeProvider,Microsoft.Extensions.Logging.ILoggerFactory,NBitcoin.Network,Stratis.Bitcoin.P2P.Peer.INetworkPeerFactory,Stratis.Bitcoin.Utilities.INodeLifetime,Stratis.Bitcoin.Configuration.NodeSettings,Stratis.Bitcoin.Configuration.Settings.ConnectionManagerSettings,Stratis.Bitcoin.P2P.IPeerAddressManager,Stratis.Bitcoin.P2P.ISelfEndpointTracker)">
            <summary>Constructor for dependency injection.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerConnectorConnectNode.OnInitialize">
            <inheritdoc/>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.PeerConnectorConnectNode.CanStartConnect">
            <summary>This connector is only started if there are peers in the -connect args.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerConnectorConnectNode.OnStartConnect">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerConnectorConnectNode.OnConnectAsync">
            <summary>
            Only connect to nodes as specified in the -connect node arg.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.PeerConnectorDiscovery">
            <summary>
            The connector used to connect to peers added via peer discovery.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerConnectorDiscovery.MaximumPeerSelectionAttempts">
            <summary>Maximum peer selection attempts.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerConnectorDiscovery.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerConnectorDiscovery.#ctor(Stratis.Bitcoin.Utilities.IAsyncLoopFactory,Stratis.Bitcoin.Utilities.IDateTimeProvider,Microsoft.Extensions.Logging.ILoggerFactory,NBitcoin.Network,Stratis.Bitcoin.P2P.Peer.INetworkPeerFactory,Stratis.Bitcoin.Utilities.INodeLifetime,Stratis.Bitcoin.Configuration.NodeSettings,Stratis.Bitcoin.Configuration.Settings.ConnectionManagerSettings,Stratis.Bitcoin.P2P.IPeerAddressManager,Stratis.Bitcoin.P2P.ISelfEndpointTracker)">
            <summary>Parameterless constructor for dependency injection.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerConnectorDiscovery.OnInitialize">
            <inheritdoc/>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.PeerConnectorDiscovery.CanStartConnect">
            <summary>This connector is only started if there are NO peers in the -connect args.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerConnectorDiscovery.OnStartConnect">
            <inheritdoc/>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.IPeerDiscovery">
            <summary>
            Contract for <see cref="T:Stratis.Bitcoin.P2P.PeerDiscovery"/>.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.IPeerDiscovery.DiscoverPeers(Stratis.Bitcoin.Connection.IConnectionManager)">
            <summary>
            Starts the peer discovery process.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.PeerDiscovery">
            <summary>Async loop that discovers new peers to connect to.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerDiscovery.asyncLoop">
            <summary>The async loop we need to wait upon before we can shut down this connector.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerDiscovery.asyncLoopFactory">
            <summary>Factory for creating background async loop tasks.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerDiscovery.currentParameters">
            <summary>The parameters cloned from the connection manager.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerDiscovery.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerDiscovery.loggerFactory">
            <summary>Logger factory to create loggers.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerDiscovery.nodeLifetime">
            <summary>Global application life cycle control - triggers when application shuts down.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerDiscovery.nodeSettings">
            <summary>User defined node settings.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerDiscovery.peerAddressManager">
            <summary>Peer address manager instance, see <see cref="T:Stratis.Bitcoin.P2P.IPeerAddressManager"/>.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerDiscovery.peersToFind">
            <summary>The amount of peers to find.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerDiscovery.network">
            <summary>The network the node is running on.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerDiscovery.networkPeerFactory">
            <summary>Factory for creating P2P network peers.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerDiscovery.isSeedAndDnsAttempted">
            <summary>Indicates the dns and seed nodes were attempted.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerDiscovery.DiscoverPeers(Stratis.Bitcoin.Connection.IConnectionManager)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerDiscovery.DiscoverPeersAsync">
            <summary>
            See <see cref="M:Stratis.Bitcoin.P2P.PeerDiscovery.DiscoverPeers(Stratis.Bitcoin.Connection.IConnectionManager)"/>
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerDiscovery.AddDNSSeedNodes(System.Collections.Generic.List{System.Net.IPEndPoint})">
            <summary>
            Add peers to the address manager from the network DNS's seed nodes.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerDiscovery.AddSeedNodes(System.Collections.Generic.List{System.Net.IPEndPoint})">
            <summary>
            Add peers to the address manager from the network's seed nodes.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerDiscovery.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.P2P.IPeerSelector">
            <summary>
            Contract for <see cref="T:Stratis.Bitcoin.P2P.PeerSelector"/>.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.IPeerSelector.SelectPeer">
            <summary>
            Selects a random peer, via a selection algorithm, from the address
            manager to connect to.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.IPeerSelector.SelectPeersForDiscovery(System.Int32)">
            <summary>
            Select a random set of peers from the address manager for peer discovery.
            </summary>
            <param name="peerCount">The amount of peers to return.</param>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.IPeerSelector.SelectPeersForGetAddrPayload(System.Int32)">
            <summary>
            Select preferred peers from the address manager for sending
            via address payload.
            </summary>
            <param name="peerCount">The amount of peers to return.</param>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.IPeerSelector.Attempted">
            <summary>
            Return peers which have had connection attempts, but none successful.
            <para>
            The result filters out peers which satisfies the above condition within the
            last 60 seconds and that has had more than 10 failed attempts.
            </para>
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.IPeerSelector.Connected">
            <summary>
            Return peers which have had successful connection attempts.
            <para>
            The result filters out peers which satisfies the above condition within the
            last 60 seconds.
            </para>
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.IPeerSelector.NotBanned">
            <summary>Returns peers that are not banned.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.IPeerSelector.Fresh">
            <summary>
            Return peers which have never had connection attempts.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.IPeerSelector.Handshaked">
            <summary>
            Return peers where a successful connection and handshake was achieved.
            <para>
            The result filters out peers which satisfies the above condition within the
            last 60 seconds.
            </para>
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.IPeerSelector.FilterBadHandshakedPeers(System.Collections.Generic.IEnumerable{Stratis.Bitcoin.P2P.PeerAddress})">
            <summary>
            <para>
            Filter peers by handshake failures.
            </para>
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.IPeerSelector.HasAllPeersReachedConnectionThreshold">
            <summary>Determines whether all not banned peers reached connection attempts threshold.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.IPeerSelector.ResetConnectionAttemptsOnNotBannedPeers">
            <summary>Resets connection attempts count for all not banned peers.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerSelector.dateTimeProvider">
            <summary>Provider of time functions.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerSelector.DiscoveryThresholdHours">
            <summary>The amount of hours we should wait before we try and discover from a peer again.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerSelector.loggerFactory">
            <summary>Logger factory to create loggers.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerSelector.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerSelector.peerAddresses">
            <summary>
            The address manager instance that holds the peer list to be queried.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerSelector.random">
            <summary>Random number generator used when selecting and ordering peers.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.PeerSelector.selfEndpointTracker">
            <summary>Keeps track of and allows querying whether an IPEndoint is itself.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerSelector.#ctor(Stratis.Bitcoin.Utilities.IDateTimeProvider,Microsoft.Extensions.Logging.ILoggerFactory,System.Collections.Concurrent.ConcurrentDictionary{System.Net.IPEndPoint,Stratis.Bitcoin.P2P.PeerAddress},Stratis.Bitcoin.P2P.ISelfEndpointTracker)">
            <summary>
            Constructor for the peer selector.
            </summary>
            <param name="dateTimeProvider">Provider of datetime.</param>
            <param name="loggerFactory">Logger factory.</param>
            <param name="peerAddresses">The collection of peer address as managed by the peer address manager.</param>
            <param name="selfEndpointTracker">Self endpoint tracker.</param>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerSelector.SelectPeer">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerSelector.SelectPreferredPeers">
            <summary>
            Filtering logic for selecting peers to connect to via the <see cref="T:Stratis.Bitcoin.P2P.PeerConnector"/> classes.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerSelector.HasAllPeersReachedConnectionThreshold">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerSelector.ResetConnectionAttemptsOnNotBannedPeers">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerSelector.SelectPeersForDiscovery(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerSelector.SelectPeersForGetAddrPayload(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerSelector.Random(System.Collections.Generic.IEnumerable{Stratis.Bitcoin.P2P.PeerAddress})">
            <summary>Return a random peer from a given set of peers.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerSelector.Attempted">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerSelector.FilterBadHandshakedPeers(System.Collections.Generic.IEnumerable{Stratis.Bitcoin.P2P.PeerAddress})">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerSelector.Connected">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerSelector.Fresh">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerSelector.Handshaked">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.PeerSelector.IsBanned(Stratis.Bitcoin.P2P.PeerAddress)">
            <summary>
            <c>True</c> if <see cref="P:Stratis.Bitcoin.P2P.PeerAddress.BanUntil"/> is in the future.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Protocol.Behaviors.NetworkPeerBehavior.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Protocol.Behaviors.PingPongBehavior">
            <summary>
            The PingPongBehavior is responsible for firing ping message every PingInterval and responding with pong message, and close the connection if the Ping has not been completed after TimeoutInterval.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Protocol.Behaviors.PingPongBehavior.Mode">
            <summary>
            Whether the behavior send Ping and respond with Pong (Default : Both)
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Protocol.Behaviors.PingPongBehavior.TimeoutInterval">
            <summary>
            Interval after which an unresponded Ping will result in a disconnection. (Default : 20 minutes)
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Protocol.Behaviors.PingPongBehavior.PingInterval">
            <summary>
            Interval after which a Ping message is fired after the last received Pong (Default : 2 minutes)
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Protocol.Behaviors.PingPongBehavior.callbacksRegistered">
            <summary>
            Set to <c>true</c> if the attached peer callbacks have been registered and they should be unregistered,
            <c>false</c> if the callbacks are not registered.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Protocol.Behaviors.PingPongBehavior.Probe">
            <summary>
            Send a ping asynchronously.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Protocol.Behaviors.PingPongBehavior.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Protocol.ProcessMessageAsync`1">
            <summary>
            Represents a callback rountine to be called when a new message arrives to the listener.
            <para>
            It is guaranteed that only execution of the callback routine is executed at the time.
            </para>
            </summary>
            <param name="message">New message to be processed.</param>
            <param name="cancellationToken">Cancellation token that the callback method should use for its async operations to avoid blocking the listener during shutdown.</param>
            <typeparam name="T">Type of the messages that are being handled.</typeparam>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Protocol.CallbackMessageListener`1">
            <summary>
            Message listener that processes the incoming message using a user defined callback routine.
            </summary>
            <typeparam name="T">Type of the messages that are being handled.</typeparam>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Protocol.CallbackMessageListener`1.asyncQueue">
            <summary>Queue of the unprocessed incoming messages.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Protocol.CallbackMessageListener`1.#ctor(Stratis.Bitcoin.P2P.Protocol.ProcessMessageAsync{`0})">
            <summary>
            Initializes the instance of the object.
            </summary>
            <param name="processMessageAsync">User defined callback routine to be executed when a new message arrives to the listener.</param>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Protocol.CallbackMessageListener`1.PushMessage(`0)">
            <inheritdoc/>
            <remarks>Adds the newly received message to the queue.</remarks>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Protocol.CallbackMessageListener`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Protocol.Filters.INetworkPeerFilter">
            <summary>
            Contract to intercept sent and received messages.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Protocol.Filters.INetworkPeerFilter.OnReceivingMessage(Stratis.Bitcoin.P2P.Protocol.IncomingMessage,System.Action)">
            <summary>
            Intercept a message before it can be processed by listeners
            </summary>
            <param name="message">The message</param>
            <param name="next">The rest of the pipeline</param>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Protocol.Filters.INetworkPeerFilter.OnSendingMessage(Stratis.Bitcoin.P2P.Peer.INetworkPeer,Stratis.Bitcoin.P2P.Protocol.Payloads.Payload,System.Action)">
            <summary>
            Intercept a message before it is sent to the peer
            </summary>
            <param name="peer"></param>
            <param name="payload"></param>
            <param name="next">The rest of the pipeline</param>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Protocol.IMessageListener`1">
            <summary>
            Contract for a recipient part of a consumer logic that handles incoming messages.
            </summary>
            <typeparam name="T">Type of the messages that are being handled.</typeparam>
            <seealso cref="T:Stratis.Bitcoin.P2P.Protocol.MessageProducer`1"/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Protocol.IMessageListener`1.PushMessage(`0)">
            <summary>
            Handles a newly received message.
            </summary>
            <param name="message">Message to handle.</param>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Protocol.IncomingMessage">
            <summary>
            A type takes context information about a <see cref="P:Stratis.Bitcoin.P2P.Protocol.IncomingMessage.Message"/>.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Protocol.IncomingMessage.Message">
            <summary>A network payload message.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Protocol.IncomingMessage.Length">
            <summary>The total length of the payload.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Protocol.Message.payloadProvider">
            <summary>A provider of network payload messages.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Protocol.Message.CommandSize">
            <summary>Size of the "command" part of the message in bytes.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Protocol.Message.LengthSize">
            <summary>Size of the "length" part of the message in bytes.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Protocol.Message.ChecksumSize">
            <summary>Size of the "checksum" part of the message in bytes, if it is present.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Protocol.Message.MessageSize">
            <summary>Length of the message including the header.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Protocol.Message.skipMagic">
            <summary>When parsing, maybe Magic is already parsed.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Protocol.Message.GetPayloadBytes(NBitcoin.ConsensusFactory,System.Int32@)">
            <summary>
            Read the payload in to byte array.
            </summary>
            <param name="consensusFactory">The network consensus factory.</param>
            <param name="length">The length of the payload.</param>
            <returns>The payload in bytes.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Protocol.MessageProducerRegistration`1">
            <summary>
            Binding between <see cref="T:Stratis.Bitcoin.P2P.Protocol.MessageProducer`1"/> and <see cref="T:Stratis.Bitcoin.P2P.Protocol.IMessageListener`1"/>.
            </summary>
            <typeparam name="T">Type of the messages that are being handled.</typeparam>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Protocol.MessageProducerRegistration`1.producer">
            <summary>Producer of messages.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Protocol.MessageProducerRegistration`1.listener">
            <summary>Consumer of messages.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Protocol.MessageProducerRegistration`1.#ctor(Stratis.Bitcoin.P2P.Protocol.IMessageListener{`0},Stratis.Bitcoin.P2P.Protocol.MessageProducer{`0})">
            <summary>
            Initializes an instance of the object.
            </summary>
            <param name="listener">Consumer of messages.</param>
            <param name="producer">Producer of messages.</param>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Protocol.MessageProducerRegistration`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Protocol.MessageProducer`1">
            <summary>
            Distributor of messages to attached consumers.
            </summary>
            <typeparam name="T">Type of the messages that are being handled.</typeparam>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Protocol.MessageProducer`1.listeners">
            <summary>List of attached consumers of this producer's messages.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Protocol.MessageProducer`1.#ctor">
            <summary>
            Initializes an instance of the object.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Protocol.MessageProducer`1.AddMessageListener(Stratis.Bitcoin.P2P.Protocol.IMessageListener{`0})">
            <summary>
            Add a new consumer to distribute messages to.
            </summary>
            <param name="listener">New consumer to distribute messages to.</param>
            <returns>Disposable binding between the producer and the consumer.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Protocol.MessageProducer`1.RemoveMessageListener(Stratis.Bitcoin.P2P.Protocol.IMessageListener{`0})">
            <summary>
            Stops distribution of message to a registered consumer.
            </summary>
            <param name="listener">Registered consumer to stop distributing messages to.</param>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Protocol.MessageProducer`1.PushMessage(`0)">
            <summary>
            Distributes a message among all attached consumers.
            </summary>
            <param name="message">Message to distribute.</param>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Protocol.Payloads.AddrPayload">
            <summary>
            An available peer address in the bitcoin network is announce (unsollicited or after a getaddr).
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Protocol.Payloads.BlockPayload">
            <summary>
            A block received after being asked with a getdata message.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Protocol.Payloads.GetAddrPayload">
            <summary>
            Ask for known peer addresses in the network.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Protocol.Payloads.GetBlocksPayload">
            <summary>
            Ask for the block hashes (inv) that happened since BlockLocator.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Protocol.Payloads.GetDataPayload">
            <summary>
            Ask for transaction, block or merkle block.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Protocol.Payloads.GetHeadersPayload">
            <summary>
            Ask block headers that happened since BlockLocator.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Protocol.Payloads.GetHeadersPayload.BlockLocator">
            <summary>
            Gets a block locator which represents a compact structure of one's chain position which can be used to find
            forks with another chain.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Protocol.Payloads.GetHeadersPayload.HashStop">
            <summary>
            Gets a hash after which no new headers should be sent withing the same message.
            </summary>
            <remarks>
            As an example, in case we are asked to send headers from block 1000 but hashStop is at block
            1200 the answer should contain 200 headers.
            </remarks>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Protocol.Payloads.GetProvenHeadersPayload">
            <inheritdoc />
            <summary>
            Get proven headers payload which requests proven headers using a similar mechanism as
            the getheaders protocol message.
            </summary>
            <seealso cref="T:Stratis.Bitcoin.P2P.Protocol.Payloads.Payload" />
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Protocol.Payloads.GetProvenHeadersPayload.ReadWriteCore(NBitcoin.BitcoinStream)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Protocol.Payloads.HeadersPayload">
            <summary>
            Block headers received after a getheaders messages.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Protocol.Payloads.InvPayload">
            <summary>
            Announce the hash of a transaction or block.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Protocol.Payloads.InvPayload.MaxGetBlocksInventorySize">
            <summary>Maximal number of inventory items in response to "getblocks" message.</summary>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Protocol.Payloads.MempoolPayload">
            <summary>
            Ask for the mempool, followed by inv messages.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Protocol.Payloads.NotFoundPayload">
            <summary>
            A getdata message for an asked hash is not found by the remote peer.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Protocol.Payloads.PayloadAttribute">
            <summary>
            An attribute that enables mapping between command names and P2P netowrk types.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Protocol.Payloads.PayloadAttribute.Name">
            <summary>
            The command name.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Protocol.Payloads.PayloadAttribute.#ctor(System.String)">
            <summary>
            Initialize a new instance of the object.
            </summary>
            <param name="commandName"></param>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Protocol.Payloads.PayloadProvider">
            <summary>
            A provider that maps <see cref="T:Stratis.Bitcoin.P2P.Protocol.Payloads.PayloadAttribute"/> types with <see cref="P:Stratis.Bitcoin.P2P.Protocol.Message.Command"/>.
            This is used by the P2P code to map and deserialize messages that are received from the tcp network to a concrete type.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Protocol.Payloads.PayloadProvider.nameToType">
            <summary>
            A mapping between the command name and the payload type.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Protocol.Payloads.PayloadProvider.typeToName">
            <summary>
            A mapping between the payload type and the command name.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Protocol.Payloads.PayloadProvider.#ctor">
            <summary>
            Initialize a new instance of the object.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Protocol.Payloads.PayloadProvider.DiscoverPayloads(System.Reflection.Assembly)">
            <summary>
            Discover all payloads from the provided assembly, if no assembly is provided defaults to <see cref="T:Stratis.Bitcoin.P2P.Protocol.Payloads.PayloadAttribute"/>.
            </summary>
            <param name="assembly">The assembly to discover from or <see cref="T:Stratis.Bitcoin.P2P.Protocol.Payloads.PayloadAttribute"/> if <c>null</c>.</param>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Protocol.Payloads.PayloadProvider.AddPayload(System.Type)">
            <summary>
            Add a payload to the Provider by specifying its type.
            </summary>
            <param name="type">The type to payload to add.  Must derive from <see cref="T:Stratis.Bitcoin.P2P.Protocol.Payloads.Payload"/>.</param>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Protocol.Payloads.PayloadProvider.GetCommandType(System.String)">
            <summary>
            Get the <see cref="T:Stratis.Bitcoin.P2P.Protocol.Payloads.Payload"/> type associated with the command name.
            </summary>
            <param name="commandName">The command name.</param>
            <returns>The type of payload the command is associated with.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Protocol.Payloads.PayloadProvider.IsPayloadRegistered(System.Type)">
            <summary>
            Check that a <see cref="T:Stratis.Bitcoin.P2P.Protocol.Payloads.Payload"/> type is allowed to be used in the P2P code.
            </summary>
            <param name="type">A type that represents a <see cref="T:Stratis.Bitcoin.P2P.Protocol.Payloads.Payload"/></param>
            <returns>True if the type is registered as a usable payload.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Protocol.Payloads.ProvenHeadersPayload">
            <summary>
            Proven headers payload which contains list of up to 2000 proven headers.
            </summary>
            <seealso cref="T:Stratis.Bitcoin.P2P.Protocol.Payloads.Payload" />
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Protocol.Payloads.ProvenHeadersPayload.headers">
            <summary>
            <see cref="P:Stratis.Bitcoin.P2P.Protocol.Payloads.ProvenHeadersPayload.Headers"/>
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Protocol.Payloads.ProvenHeadersPayload.Headers">
            <summary>
            Gets a list of up to 2,000 proven headers.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.Protocol.Payloads.ProvenHeadersPayload.ReadWriteCore(NBitcoin.BitcoinStream)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Protocol.Payloads.RejectPayload">
            <summary>
            A transaction or block are rejected being transmitted through tx or block messages.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Protocol.Payloads.RejectPayload.message">
            <summary>"tx" or "block".</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Protocol.Payloads.RejectPayload.Message">
            <summary>"tx" or "block".</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Protocol.Payloads.RejectPayload.reason">
            <summary>Details of the error.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Protocol.Payloads.RejectPayload.Reason">
            <summary>Details of the error.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Protocol.Payloads.RejectPayload.hash">
            <summary>The hash being rejected.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.Protocol.Payloads.RejectPayload.Hash">
            <summary>The hash being rejected.</summary>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.Protocol.Payloads.TxPayload">
            <summary>
            Represents a transaction being sent on the network, is sent after being requested by a getdata (of Transaction or MerkleBlock) message.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Protocol.Payloads.NetworkPeerServices.Network">
            <summary>
            NODE_NETWORK means that the node is capable of serving the block chain. It is currently
            set by all Bitcoin Core nodes, and is unset by SPV clients or other peers that just want
            network services but don't provide them.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Protocol.Payloads.NetworkPeerServices.GetUTXO">
            <summary>
             NODE_GETUTXO means the node is capable of responding to the getutxo protocol request.
            Bitcoin Core does not support this but a patch set called Bitcoin XT does.
            See BIP 64 for details on how this is implemented.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Protocol.Payloads.NetworkPeerServices.NODE_BLOOM">
            <summary> NODE_BLOOM means the node is capable and willing to handle bloom-filtered connections.
            Bitcoin Core nodes used to support this by default, without advertising this bit,
            but no longer do as of protocol version 70011 (= NO_BLOOM_VERSION)
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.Protocol.Payloads.NetworkPeerServices.NODE_WITNESS">
            <summary> Indicates that a node can be asked for blocks and transactions including
            witness data.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.P2P.SelfEndpointTracker">
            <summary>
            Tracker for endpoints known to be self.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.SelfEndpointTracker.knownSelfEndpoints">
            <summary>Hashset to hold the endpoints currently known to be itself.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.SelfEndpointTracker.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.SelfEndpointTracker.MyExternalAddressPeerScore">
            <summary>Peer score of external IP address of the node.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.SelfEndpointTracker.IsMyExternalAddressFinal">
            <summary>Whether IP address of the node is final or can be updated.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.P2P.SelfEndpointTracker.lockObject">
            <summary>Protects access to <see cref="P:Stratis.Bitcoin.P2P.SelfEndpointTracker.MyExternalAddress"/>, <see cref="P:Stratis.Bitcoin.P2P.SelfEndpointTracker.MyExternalAddressPeerScore"/> and <see cref="P:Stratis.Bitcoin.P2P.SelfEndpointTracker.IsMyExternalAddressFinal"/>.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.P2P.SelfEndpointTracker.MyExternalAddress">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.SelfEndpointTracker.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes an instance of the self endpoint tracker.
            </summary>
            <param name="loggerFactory">Factory for creating loggers.</param>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.SelfEndpointTracker.Add(System.Net.IPEndPoint)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.SelfEndpointTracker.IsSelf(System.Net.IPEndPoint)">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.P2P.SelfEndpointTracker.UpdateAndAssignMyExternalAddress(System.Net.IPEndPoint,System.Boolean,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Stratis.Bitcoin.Primitives.ChainedHeaderBlock">
            <summary>
            Structure made of a block and its chained header.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Primitives.ChainedHeaderBlock.Block">
            <summary>The block.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Primitives.ChainedHeaderBlock.ChainedHeader">
            <summary>Chained header of the <see cref="P:Stratis.Bitcoin.Primitives.ChainedHeaderBlock.Block"/>.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Primitives.ChainedHeaderBlock.#ctor(NBitcoin.Block,NBitcoin.ChainedHeader)">
            <summary>
            Creates instance of <see cref="T:Stratis.Bitcoin.Primitives.ChainedHeaderBlock" />.
            </summary>
            <param name="block">The block can be <c>null</c>.</param>
            <param name="chainedHeader">Chained header of the <paramref name="block"/>.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Primitives.ChainedHeaderBlock.ToString">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Primitives.ChainedHeaderBlock.SetHeader(NBitcoin.BlockHeader)">
            <summary>
            Update the <see cref="P:Stratis.Bitcoin.Primitives.ChainedHeaderBlock.ChainedHeader" /> (if not null) with a new provided header.
            </summary>
            <param name="newHeader">The new header to set.</param>
            <remarks>Use this method very carefully because it could cause race conditions if used at the wrong moment.</remarks>
        </member>
        <member name="T:Stratis.Bitcoin.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Properties.Resources.AsciiLogo">
             <summary>
               Looks up a localized string similar to 
            
                 .d8888b. 88888888888 8888888b.         d8888 88888888888 8888888  .d8888b. 
                d88P  Y88b    888     888   Y88b       d88888     888       888   d88P  Y88b
                Y88b.         888     888    888      d88P888     888       888   Y88b.     
                 &quot;Y888b.      888     888   d88P     d88P 888     888       888    &quot;Y888b.  
                    &quot;Y88b.    888     8888888P&quot;     d88P  888     888       888       &quot;Y88b.
                      &quot;888    888     888 T88b     d88P   888     888       888         &quot;888
                Y88b  d88P   [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Signals.IBroadcast`1">
            <summary>
            Defines provider with ability to broadcast messages to all its subscribers.
            </summary>
            <typeparam name="T">Type of messages being sent.</typeparam>
        </member>
        <member name="M:Stratis.Bitcoin.Signals.IBroadcast`1.Broadcast(`0)">
            <summary>
            Sends a message to all subscribers.
            </summary>
            <param name="item">Message to send, must not be <c>null</c>.</param>
        </member>
        <member name="T:Stratis.Bitcoin.Signals.ISignaler`1">
            <summary>
            Provider that allows distribution of messages to multiple subscribers.
            </summary>
            <typeparam name="T">Type of messages to be sent by the signaler.</typeparam>
        </member>
        <member name="T:Stratis.Bitcoin.Signals.Signaler`1">
            <inheritdoc />
            <remarks>This is synchronous implementation of the provider.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.Signals.Signaler`1.subject">
            <summary>Subject to distribute signaler's messages</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Signals.Signaler`1.observable">
            <summary>Observable part of <see cref="F:Stratis.Bitcoin.Signals.Signaler`1.subject"/> that observers can subscribe to.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Signals.Signaler`1.#ctor">
            <summary>
            Initializes a new signaler with newly created subject.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Signals.Signaler`1.#ctor(System.Reactive.Subjects.ISubject{`0})">
            <summary>
            Initializes a new signaler with a given subject.
            </summary>
            <param name="subject">Subject to be used to broadcast messages to subscribers.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Signals.Signaler`1.Subscribe(System.IObserver{`0})">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Signals.Signaler`1.Broadcast(`0)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Signals.ISignalObserver`1">
            <summary>
            Consumer of messages produced by <see cref="T:Stratis.Bitcoin.Signals.Signaler`1"/>.
            </summary>
            <typeparam name="T">Type of messages being consumed.</typeparam>
        </member>
        <member name="T:Stratis.Bitcoin.Signals.SignalObserver`1">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Signals.SignalObserver`1.OnErrorCore(System.Exception)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Signals.SignalObserver`1.OnCompletedCore">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Signals.ISignals">
            <summary>
            Provider of notifications of new blocks and transactions.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Signals.ISignals.SignalBlockConnected(Stratis.Bitcoin.Primitives.ChainedHeaderBlock)">
            <summary>
            Notify subscribers about a new chained header block being available.
            </summary>
            <param name="chainedHeaderBlock">Newly added chained header block.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Signals.ISignals.SignalBlockDisconnected(Stratis.Bitcoin.Primitives.ChainedHeaderBlock)">
            <summary>
            Notify subscribers about a chained header block being disconnected.
            </summary>
            <param name="chainedHeaderBlock">Chained Header Block that was disconnected.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Signals.ISignals.SignalTransaction(NBitcoin.Transaction)">
            <summary>
            Notify subscribers about a new transaction being available.
            </summary>
            <param name="trx">Newly added transaction.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Signals.ISignals.SubscribeForBlocksConnected(System.IObserver{Stratis.Bitcoin.Primitives.ChainedHeaderBlock})">
            <summary>
            Subscribes to receive notifications when a new block is available.
            </summary>
            <param name="observer">Observer to be subscribed to receive signaler's messages.</param>
            <returns>Disposable object to allow observer to unsubscribe from the signaler.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Signals.ISignals.SubscribeForBlocksDisconnected(System.IObserver{Stratis.Bitcoin.Primitives.ChainedHeaderBlock})">
            <summary>
            Subscribes to receive notifications when a block was disconnected.
            </summary>
            <param name="observer">Observer to be subscribed to receive signaler's messages.</param>
            <returns>Disposable object to allow observer to unsubscribe from the signaler.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Signals.ISignals.SubscribeForTransactions(System.IObserver{NBitcoin.Transaction})">
            <summary>
            Subscribes to receive notifications when a new transaction is available.
            </summary>
            <param name="observer">Observer to be subscribed to receive signaler's messages.</param>
            <returns>Disposable object to allow observer to unsubscribe from the signaler.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Signals.Signals">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Signals.Signals.#ctor">
            <summary>
            Initializes the object with newly created instances of signalers.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Signals.Signals.#ctor(Stratis.Bitcoin.Signals.ISignaler{Stratis.Bitcoin.Primitives.ChainedHeaderBlock},Stratis.Bitcoin.Signals.ISignaler{Stratis.Bitcoin.Primitives.ChainedHeaderBlock},Stratis.Bitcoin.Signals.ISignaler{NBitcoin.Transaction})">
            <summary>
            Initializes the object with specific signalers.
            </summary>
            <param name="blockConnectedSignaler">Signaler providing notifications about newly available blocks to its subscribers.</param>
            <param name="blockDisonnectedSignaler">Signaler providing notifications about a block being disconnected to its subscribers.</param>
            <param name="transactionSignaler">Signaler providing notifications about newly available transactions to its subscribers.</param>
        </member>
        <member name="P:Stratis.Bitcoin.Signals.Signals.BlocksConnected">
            <summary>Signaler providing notifications about newly available blocks to its subscribers.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Signals.Signals.BlocksDisconnected">
            <summary>Signaler providing notifications about blocks being disconnected to its subscribers.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Signals.Signals.Transactions">
            <summary>Signaler providing notifications about newly available transactions to its subscribers.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Signals.Signals.SignalBlockConnected(Stratis.Bitcoin.Primitives.ChainedHeaderBlock)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Signals.Signals.SignalBlockDisconnected(Stratis.Bitcoin.Primitives.ChainedHeaderBlock)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Signals.Signals.SignalTransaction(NBitcoin.Transaction)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Signals.Signals.SubscribeForBlocksConnected(System.IObserver{Stratis.Bitcoin.Primitives.ChainedHeaderBlock})">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Signals.Signals.SubscribeForBlocksDisconnected(System.IObserver{Stratis.Bitcoin.Primitives.ChainedHeaderBlock})">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Signals.Signals.SubscribeForTransactions(System.IObserver{NBitcoin.Transaction})">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.ActionDisposable">
            <summary>
            Helper class that is used for implementation of custom lock primitives.
            There are two actions - one is executed when an instance of the object is created
            and the other one is executed when the instance is disposed.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.ActionDisposable.onEnter">
            <summary>Method to call when an instance of the object is created.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.ActionDisposable.onLeave">
            <summary>Method to call when an instance of the object is disposed.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.ActionDisposable.#ctor(System.Action,System.Action)">
            <summary>
            Initializes an instance of the object and executes the <paramref name="onEnter"/> method.
            </summary>
            <param name="onEnter">Method to call when an instance of the object is created.</param>
            <param name="onLeave">Method to call when an instance of the object is disposed.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.ActionDisposable.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.AsyncExecutionEventCallback`2">
            <summary>
            Asynchronous event handler that can be registered with <see cref="T:Stratis.Bitcoin.Utilities.AsyncExecutionEvent`2"/>.
            </summary>
            <typeparam name="TSender">Type of the sender object that is the source of the event.</typeparam>
            <typeparam name="TArg">Type of the argument that is passed to the callback.</typeparam>
            <param name="sender">Source of the event.</param>
            <param name="arg">Callback argument.</param>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.AsyncExecutionEvent`2">
            <summary>
            Execution event is a specific moment in the execution flow of that a component
            that other components are allowed to be subscribed to and get notified about
            when it occurs.
            <para>
            This implementation allows components to register asynchronous event handlers.
            </para>
            </summary>
            <typeparam name="TSender">Type of event source sender objects.</typeparam>
            <typeparam name="TArg">Type of arguments that are passed to callbacks.</typeparam>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.AsyncExecutionEvent`2.asyncLock">
            <summary>
            Protects access to <see cref="F:Stratis.Bitcoin.Utilities.AsyncExecutionEvent`2.callbackList"/> and <see cref="F:Stratis.Bitcoin.Utilities.AsyncExecutionEvent`2.callbackToListNodeMapping"/>,
            and also provides guarantees of <see cref="M:Stratis.Bitcoin.Utilities.AsyncExecutionEvent`2.Unregister(Stratis.Bitcoin.Utilities.AsyncExecutionEventCallback{`0,`1})"/> method.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.AsyncExecutionEvent`2.callbackList">
            <summary>List of registered callbacks.</summary>
            <remarks>All access to this object has to be protected with <see cref="F:Stratis.Bitcoin.Utilities.AsyncExecutionEvent`2.asyncLock"/>.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.AsyncExecutionEvent`2.callbackToListNodeMapping">
            <summary>Mapping of registered callbacks to nodes of <see cref="F:Stratis.Bitcoin.Utilities.AsyncExecutionEvent`2.callbackList"/> to allow fast lookup during removals.</summary>
            <remarks>All access to this object has to be protected with <see cref="F:Stratis.Bitcoin.Utilities.AsyncExecutionEvent`2.asyncLock"/>.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.AsyncExecutionEvent`2.callbackExecutionInProgress">
            <summary>
            Set to <c>true</c> if the current async execution context is the one that executes the callbacks,
            set to <c>false</c> otherwise.
            </summary>
            <remarks>
            This allows <see cref="M:Stratis.Bitcoin.Utilities.AsyncExecutionEvent`2.Register(Stratis.Bitcoin.Utilities.AsyncExecutionEventCallback{`0,`1},System.Boolean)"/> and <see cref="M:Stratis.Bitcoin.Utilities.AsyncExecutionEvent`2.Unregister(Stratis.Bitcoin.Utilities.AsyncExecutionEventCallback{`0,`1})"/>
            to recognize whether they are executing from a callback or not.
            </remarks>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.AsyncExecutionEvent`2.cancellationSource">
            <summary>Cancellation source to abort waiting for <see cref="F:Stratis.Bitcoin.Utilities.AsyncExecutionEvent`2.asyncLock"/> after <see cref="M:Stratis.Bitcoin.Utilities.AsyncExecutionEvent`2.Dispose"/> has been executed.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.AsyncExecutionEvent`2.disposed">
            <summary>Set to <c>1</c> if <see cref="M:Stratis.Bitcoin.Utilities.AsyncExecutionEvent`2.Dispose"/> was called, <c>0</c> otherwise.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncExecutionEvent`2.#ctor">
            <summary>
            Initializes an instance of the object.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncExecutionEvent`2.Register(Stratis.Bitcoin.Utilities.AsyncExecutionEventCallback{`0,`1},System.Boolean)">
            <summary>
            Registers a new callback to be called when an event occurs.
            </summary>
            <param name="callbackAsync">Callback method to register.</param>
            <param name="addFirst"><c>true</c> to insert the new callback as the first callback to be called,
            <c>false</c> to add it as the last one.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="callbackAsync"/> has already been registered.</exception>
            <remarks>
            It is allowed that a callback method registers another callback.
            </remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncExecutionEvent`2.Unregister(Stratis.Bitcoin.Utilities.AsyncExecutionEventCallback{`0,`1})">
            <summary>
            Unregisters an existing callback.
            </summary>
            <param name="callbackAsync">Callback method to unregister.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="callbackAsync"/> was not found among registered callbacks.</exception>
            <remarks>
            The caller is guaranteed that once this method completes, <paramref name="callbackAsync"/> will not be called by this executor.
            <para>It is allowed that a callback method unregisters itself (or another callback).</para>
            </remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncExecutionEvent`2.ExecuteCallbacksAsync(`0,`1)">
            <summary>
            Calls all registered callbacks with the given arguments.
            </summary>
            <param name="sender">Source of the event.</param>
            <param name="arg">Argument to pass to the callbacks.</param>
            <remarks>
            It is necessary to hold the lock while calling the callbacks to provide guarantees described in <see cref="M:Stratis.Bitcoin.Utilities.AsyncExecutionEvent`2.Unregister(Stratis.Bitcoin.Utilities.AsyncExecutionEventCallback{`0,`1})"/>.
            However, we do support new callbacks to be registered or unregistered while callbacks are being executed,
            but this is only possible from the same execution context - i.e. another task or thread is unable to register or unregister callbacks
            while callbacks execution is in progress.
            </remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncExecutionEvent`2.Dispose">
            <inheritdoc />
            <remarks>
            It is allowed that the callback in execution calls this method to dispose the execution event,
            in which case, the disposing is deferred after the execution of callbacks is complete.
            </remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncExecutionEvent`2.DisposeInternal">
            <summary>
            Acquires <see cref="F:Stratis.Bitcoin.Utilities.AsyncExecutionEvent`2.asyncLock"/> and disposes resources including the lock.
            This lock will never be released, but that is not a problem since it is destroyed.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.AsyncLock">
            <summary>
            An async synchronization primitive that allows the caller to await inside the critical section.
            <para>
            The lock is disposable, which allows the caller to use the convenient <c>using</c> statement
            and avoid caring about releasing the lock.
            </para>
            </summary>
            <example>
            The lock can be used in async environment:
            <code>
            private AsyncLock asyncLock = new AsyncLock();
            ...
            using (await asyncLock.LockAsync(cancellationToken))
            {
                // Body of critical section.
                ...
                // Unlocking is automatic in Dispose method invoked by using statement.
            }
            </code>
            <para>
            or it can be used in non-async environment:
            </para>
            <code>
            using (asyncLock.Lock(cancellationToken))
            {
                // Body of critical section.
                ...
                // Unlocking is again automatic in Dispose method invoked by using statement.
            }
            </code>
            </example>
            <remarks>Based on https://www.hanselman.com/blog/ComparingTwoTechniquesInNETAsynchronousCoordinationPrimitives.aspx .</remarks>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.AsyncLock.Releaser">
            <summary>
            Disposable mechanism that is attached to the parent lock and releases it when it is disposed.
            This allows the user of the lock to use the convenient <c>using</c> statement and avoid
            caring about manual releasing of the lock.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.AsyncLock.Releaser.toRelease">
            <summary>Parent lock to be released when this releaser is disposed, or <c>null</c> if no action should be taken on disposing it.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncLock.Releaser.#ctor(Stratis.Bitcoin.Utilities.AsyncLock)">
            <summary>
            Connects the releaser with its parent lock.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncLock.Releaser.Dispose">
            <inheritdoc />
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.AsyncLock.semaphore">
            <summary>Internal synchronization primitive used as a mutex to only allow one thread to occupy the critical section.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.AsyncLock.releaser">
            <summary>
            Helper object that allows implementation of disposable lock for convenient use with <c>using</c> statement.
            <para>This releaser is used when the lock has been acquired and disposing it will release the lock.</para>
            </summary>
            <remarks>We use the disposable interfaced in a task here to avoid allocations on acquiring the lock when it is free.</remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncLock.#ctor">
            <summary>
            Initializes an instance of the object.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncLock.LockAsync(System.Threading.CancellationToken)">
            <summary>
            Acquires the lock.
            </summary>
            <param name="cancel">Cancellation token that can be used to abort waiting for the lock.</param>
            <returns>Disposable interface to enable using construct. Disposing it releases the lock.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when the <paramref name="cancel"/> is triggered and the lock is not acquired.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncLock.Lock(System.Threading.CancellationToken)">
            <summary>
            Acquires the lock.
            </summary>
            <param name="cancel">Cancellation token that can be used to abort waiting for the lock.</param>
            <returns>Disposable interface to enable using construct. Disposing it releases the lock.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when the <paramref name="cancel"/> is triggered and the lock is not acquired.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncLock.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.IAsyncLoop">
            <summary>
            Allows running application defined in a loop with specific timing.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.IAsyncLoop.Name">
            <summary>Name of the loop. It is used for logging.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.IAsyncLoop.RepeatEvery">
            <summary>Interval between each execution of the task.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.IAsyncLoop.Run(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            Starts an application defined task inside the async loop.
            </summary>
            <param name="repeatEvery">Interval between each execution of the task.
            If this is <see cref="P:Stratis.Bitcoin.Utilities.TimeSpans.RunOnce"/>, the task is only run once and there is no loop.
            If this is null, the task is repeated every 1 second by default.</param>
            <param name="startAfter">Delay before the first run of the task, or null if no startup delay is required.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.IAsyncLoop.Run(System.Threading.CancellationToken,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            Starts an application defined task inside the async loop.
            </summary>
            <param name="cancellation">Cancellation token that triggers when the task and the loop should be cancelled.</param>
            <param name="repeatEvery">Interval between each execution of the task.
            If this is <see cref="P:Stratis.Bitcoin.Utilities.TimeSpans.RunOnce"/>, the task is only run once and there is no loop.
            If this is null, the task is repeated every 1 second by default.</param>
            <param name="startAfter">Delay before the first run of the task, or null if no startup delay is required.</param>
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.IAsyncLoop.RunningTask">
            <summary>
            The task representing the loop being executed.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.AsyncLoop">
            <summary>
            Allows running application defined in a loop with specific timing.
            <para>
            It is possible to specify a startup delay, which will cause the first execution of the task to be delayed.
            It is also possible to specify a delay between two executions of the task. And finally, it is possible
            to make the task run only once. Running the task for other than one or infinite number of times is not supported.
            </para>
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.AsyncLoop.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.AsyncLoop.loopAsync">
            <summary>
            Application defined task that will be called and awaited in the async loop.
            The task is given a cancellation token that allows it to recognize that the caller wishes to cancel it.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.AsyncLoop.Name">
            <inheritdoc />
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.AsyncLoop.RunningTask">
            <inheritdoc />
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.AsyncLoop.RepeatEvery">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncLoop.#ctor(System.String,Microsoft.Extensions.Logging.ILogger,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Initializes a named instance of the object.
            </summary>
            <param name="name">Name of the loop.</param>
            <param name="logger">Logger for the new instance.</param>
            <param name="loop">Application defined task that will be called and awaited in the async loop.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncLoop.Run(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncLoop.Run(System.Threading.CancellationToken,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncLoop.StartAsync(System.Threading.CancellationToken,System.Nullable{System.TimeSpan})">
            <summary>
            Starts an application defined task inside the async loop.
            </summary>
            <param name="cancellation">Cancellation token that triggers when the task and the loop should be cancelled.</param>
            <param name="delayStart">Delay before the first run of the task, or null if no startup delay is required.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncLoop.Dispose">
            <summary>
            Wait for the loop task to complete.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.IAsyncLoopFactory">
            <summary>Factory for creating and also possibly starting application defined tasks inside async loop.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.IAsyncLoopFactory.Create(System.String,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Creates a new async loop.
            </summary>
            <param name="name">Name of the loop.</param>
            <param name="loop">Application defined task that will be called and awaited in the async loop.</param>
            <returns>Newly created async loop that can be started on demand.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.IAsyncLoopFactory.Run(System.String,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            Starts an application defined task inside a newly created async loop.
            </summary>
            <param name="name">Name of the loop.</param>
            <param name="loop">Application defined task that will be called and awaited in the async loop.</param>
            <param name="repeatEvery">Interval between each execution of the task.
            If this is <see cref="P:Stratis.Bitcoin.Utilities.TimeSpans.RunOnce"/>, the task is only run once and there is no loop.
            If this is null, the task is repeated every 1 second by default.</param>
            <param name="startAfter">Delay before the first run of the task, or null if no startup delay is required.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.IAsyncLoopFactory.Run(System.String,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            Starts an application defined task inside a newly created async loop.
            </summary>
            <param name="name">Name of the loop.</param>
            <param name="loop">Application defined task that will be called and awaited in the async loop.</param>
            <param name="cancellation">Cancellation token that triggers when the task and the loop should be cancelled.</param>
            <param name="repeatEvery">Interval between each execution of the task.
            If this is <see cref="P:Stratis.Bitcoin.Utilities.TimeSpans.RunOnce"/>, the task is only run once and there is no loop.
            If this is null, the task is repeated every 1 second by default.</param>
            <param name="startAfter">Delay before the first run of the task, or null if no startup delay is required.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.IAsyncLoopFactory.RunUntil(System.String,System.Threading.CancellationToken,System.Func{System.Boolean},System.Action,System.Action{System.Exception},System.TimeSpan)">
            <summary>
            Waits until a condition is met, then executes the action and completes.
            <para>
            Waiting is implemented using the async loop for which the task is defined as execution of the condition method
            followed by execution of the action if the condition is satisfied - i.e. returns true. If the condition is
            not satisfied, the loop waits as per <see cref="!:repeatEvery"/> setting and then it can be attempted again.
            </para>
            </summary>
            <param name="name">Name of the loop.</param>
            <param name="nodeCancellationToken">Cancellation token that triggers when the task and the loop should be cancelled.</param>
            <param name="condition">Condition to be tested.</param>
            <param name="action">Method to execute once the condition is met.</param>
            <param name="onException">Method to execute if an exception occurs during evaluation of the condition or during execution of the <see cref="!:action"/>.</param>
            <param name="repeatEvery">Interval between each execution of the task.
            If this is <see cref="P:Stratis.Bitcoin.Utilities.TimeSpans.RunOnce"/>, the task is only run once and there is no loop.
            If this is null, the task is repeated every 1 second by default.</param>
            <returns></returns>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.AsyncLoopFactory">
            <inheritdoc />
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.AsyncLoopFactory.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncLoopFactory.#ctor(Microsoft.Extensions.Logging.ILoggerFactory)">
            <summary>
            Initializes a new instance of the object.
            </summary>
            <param name="loggerFactory">Factory to create logger for the object and for the async loops it creates.</param>
            <remarks>TODO: It might be a better idea to pass factory to the newly created loops so that new loggers can be created for each loop.</remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncLoopFactory.Create(System.String,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncLoopFactory.Run(System.String,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncLoopFactory.Run(System.String,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncLoopFactory.RunUntil(System.String,System.Threading.CancellationToken,System.Func{System.Boolean},System.Action,System.Action{System.Exception},System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.AsyncManualResetEvent">
            <summary>
            An async-compatible manual-reset event.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.AsyncManualResetEvent.mutex">
            <summary>
            Lock to protect access to <see cref="F:Stratis.Bitcoin.Utilities.AsyncManualResetEvent.tcs"/>.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.AsyncManualResetEvent.tcs">
            <summary>
            The current state of the event.
            </summary>
            <remarks>All access to this object has to be protected by <see cref="F:Stratis.Bitcoin.Utilities.AsyncManualResetEvent.mutex"/>.</remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncManualResetEvent.#ctor(System.Boolean)">
            <summary>
            Creates an async-compatible manual-reset event.
            </summary>
            <param name="set">Whether the manual-reset event is initially set or unset.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncManualResetEvent.#ctor">
            <summary>
            Creates an async-compatible manual-reset event that is initially unset.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.AsyncManualResetEvent.IsSet">
            <summary>
            Whether this event is currently set. This member is seldom used; code using this member has a high possibility of race conditions.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncManualResetEvent.WaitAsync">
            <summary>
            Asynchronously waits for this event to be set.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncManualResetEvent.WaitAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits for this event to be set or for the wait to be canceled.
            </summary>
            <param name="cancellationToken">The cancellation token used to cancel the wait. If this token is already canceled, this method will first check whether the event is set.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncManualResetEvent.Set">
            <summary>
            Sets the event, atomically completing every task returned by <see cref="M:Stratis.Bitcoin.Utilities.AsyncManualResetEvent.WaitAsync"/>. If the event is already set, this method does nothing.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncManualResetEvent.Reset">
            <summary>
            Resets the event. If the event is already reset, this method does nothing.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncManualResetEvent.CreateAsyncTaskSource``1">
            <summary>
            Creates a new TCS for use with async code, and which forces its continuations to execute asynchronously.
            </summary>
            <typeparam name="TResult">The type of the result of the TCS.</typeparam>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.AsyncQueue`1">
            <summary>
            Async queue is a thread-safe queue that can operate in callback mode or blocking dequeue mode.
            In callback mode it asynchronously executes a user-defined callback when a new item is added to the queue.
            In blocking dequeue mode, <see cref="M:Stratis.Bitcoin.Utilities.AsyncQueue`1.DequeueAsync(System.Threading.CancellationToken)"/> is used to wait for and dequeue
            an item from the queue once it becomes available.
            <para>
            In callback mode, the queue guarantees that the user-defined callback is executed only once at the time.
            If another item is added to the queue, the callback is called again after the current execution
            is finished.
            </para>
            </summary>
            <typeparam name="T">Type of items to be inserted in the queue.</typeparam>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.AsyncQueue`1.AsyncContext">
            <summary>
            Execution context holding information about the current status of the execution
            in order to recognize if <see cref="M:Stratis.Bitcoin.Utilities.AsyncQueue`1.Dispose"/> was called within the callback method.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.AsyncQueue`1.AsyncContext.DisposeRequested">
            <summary>
            Set to <c>true</c> if <see cref="M:Stratis.Bitcoin.Utilities.AsyncQueue`1.Dispose"/> was called from within the callback routine,
            set to <c>false</c> otherwise.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.AsyncQueue`1.OnEnqueueAsync">
            <summary>
            Represents a callback method to be executed when a new item is added to the queue.
            </summary>
            <param name="item">Newly added item.</param>
            <param name="cancellationToken">Cancellation token that the callback method should use for its async operations to avoid blocking the queue during shutdown.</param>
            <remarks>It is allowed to call <see cref="M:Stratis.Bitcoin.Utilities.AsyncQueue`1.Dispose"/> from the callback method.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.AsyncQueue`1.lockObject">
            <summary>Lock object to protect access to <see cref="F:Stratis.Bitcoin.Utilities.AsyncQueue`1.items"/>.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.AsyncQueue`1.items">
            <summary>Storage of items in the queue that are waiting to be consumed.</summary>
            <remarks>All access to this object has to be protected by <see cref="F:Stratis.Bitcoin.Utilities.AsyncQueue`1.lockObject"/>.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.AsyncQueue`1.signal">
            <summary>Event that is triggered when at least one new item is waiting in the queue.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.AsyncQueue`1.onEnqueueAsync">
            <summary>Callback routine to be called when a new item is added to the queue.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.AsyncQueue`1.ConsumerTask">
            <summary>Consumer of the items in the queue which responsibility is to execute the user defined callback.</summary>
            <remarks>Internal for test purposes.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.AsyncQueue`1.cancellationTokenSource">
            <summary>Cancellation that is triggered when the component is disposed.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.AsyncQueue`1.unfinishedDequeueCount">
            <summary>Number of pending dequeue operations which need to be finished before the queue can fully dispose.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.AsyncQueue`1.disposed">
            <summary><c>true</c> if <see cref="M:Stratis.Bitcoin.Utilities.AsyncQueue`1.Dispose"/> was called, <c>false</c> otherwise.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.AsyncQueue`1.callbackMode">
            <summary><c>true</c> if the queue operates in callback mode, <c>false</c> if it operates in blocking dequeue mode.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.AsyncQueue`1.asyncContext">
            <summary>
            Async context to allow to recognize whether <see cref="M:Stratis.Bitcoin.Utilities.AsyncQueue`1.Dispose"/> was called from within the callback routine.
            <para>
            Is not <c>null</c> if the queue is operating in callback mode and the current async execution context is the one that executes the callbacks,
            set to <c>null</c> otherwise.
            </para>
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncQueue`1.#ctor(Stratis.Bitcoin.Utilities.AsyncQueue{`0}.OnEnqueueAsync)">
            <summary>
            Initializes the queue either in blocking dequeue mode or in callback mode.
            </summary>
            <param name="onEnqueueAsync">Callback routine to be called when a new item is added to the queue, or <c>null</c> to operate in blocking dequeue mode.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncQueue`1.Enqueue(`0)">
            <summary>
            Add a new item to the queue and signal to the consumer task.
            </summary>
            <param name="item">Item to be added to the queue.</param>
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.AsyncQueue`1.Count">
            <summary>
            The number of items in the queue.
            This property should only be used for collecting statistics.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncQueue`1.ConsumerAsync">
            <summary>
            Consumer of the newly added items to the queue that waits for the signal
            and then executes the user-defined callback.
            <para>
            This consumer loop is only used when the queue is operating in the callback mode.
            </para>
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncQueue`1.DequeueAsync(System.Threading.CancellationToken)">
            <summary>
            Dequeues an item from the queue if there is one.
            If the queue is empty, the method waits until an item is available.
            </summary>
            <param name="cancellation">Cancellation token that allows aborting the wait if the queue is empty.</param>
            <returns>Dequeued item from the queue.</returns>
            <exception cref="T:System.OperationCanceledException">Thrown when the cancellation token is triggered or when the queue is disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if this method is called on a queue that operates in callback mode.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncQueue`1.TryDequeue(`0@)">
            <summary>
            Dequeues an item from the queue if there is any.
            </summary>
            <param name="item">If the function succeeds, this is filled with the dequeued item.</param>
            <returns><c>true</c> if an item was dequeued, <c>false</c> if the queue was empty.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncQueue`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AsyncQueue`1.DisposeInternal(System.Boolean)">
            <summary>
            Frees resources used by the queue and only returns until all unfinished tasks of the objects are finished.
            </summary>
            <param name="calledFromConsumerTask"><c>true</c> if this method is called from <see cref="F:Stratis.Bitcoin.Utilities.AsyncQueue`1.ConsumerTask"/>, <c>false</c> otherwise.</param>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.AverageCalculator">
            <summary>Calculates average value of last N added samples every time new sample is added.</summary>
            <remarks>
            Implementation doesn't iterate through the whole collection of samples when average value is being calculated which makes this component more optimal
            in terms of performance when frequent calculation of an average value on a set of items is required.
            </remarks>
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.AverageCalculator.Average">
            <summary>Average value of supplied samples.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.AverageCalculator.samples">
            <summary>Samples used in calculation of the average value.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AverageCalculator.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Stratis.Bitcoin.Utilities.AverageCalculator"/> class.</summary>
            <param name="maxSamples">Maximum amount of samples that can be used in the calculation of the average value.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="maxSamples"/> is less than 2.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AverageCalculator.GetMaxSamples">
            <summary>Gets the maximum amount of samples that can be used in the calculation of the average value.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AverageCalculator.SetMaxSamples(System.Int32)">
            <summary>Sets the maximum amount of samples that can be used in the calculation of the average value.</summary>
            <remarks>This is an expensive operation since it will require recreating an array of samples.</remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.AverageCalculator.AddSample(System.Double)">
            <summary>Adds a new sample and recalculates <see cref="P:Stratis.Bitcoin.Utilities.AverageCalculator.Average"/> value.</summary>
            <param name="sample">New sample.</param>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.CircularArray`1">
            <summary>
            Generic circular array is a fixed length array which stores collection
            of items. Once the array is full, adding a new item removes the oldest entry.
            </summary>
            <typeparam name="T">Type of the items stored in the array.</typeparam>
            <remarks>
            Complexity of supported operations:
            <list type="bullet">
            <item><see cref="M:Stratis.Bitcoin.Utilities.CircularArray`1.Add(`0,`0@)"/> - O(1),</item>
            <item><see cref="P:Stratis.Bitcoin.Utilities.CircularArray`1.Item(System.Int32)"/> - O(1).</item>
            </list>
            </remarks>
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.CircularArray`1.Capacity">
            <summary>Maximal number of items that can be stored in <see cref="F:Stratis.Bitcoin.Utilities.CircularArray`1.items"/> array.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.CircularArray`1.Count">
            <summary>Number of valid (slots in array occupied by added items) items in <see cref="F:Stratis.Bitcoin.Utilities.CircularArray`1.items"/> array.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.CircularArray`1.Index">
            <summary>Index in <see cref="F:Stratis.Bitcoin.Utilities.CircularArray`1.items"/> array where the next item will be stored.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.CircularArray`1.items">
            <summary>Circular array of items, which holds <see cref="P:Stratis.Bitcoin.Utilities.CircularArray`1.Count"/> valid items, and can store up to <see cref="P:Stratis.Bitcoin.Utilities.CircularArray`1.Capacity"/> items.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.CircularArray`1.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the object.
            </summary>
            <param name="capacity">Maximal number of items that can be stored in the circular array.</param>
            <param name="preinitializeItems">If set to <c>true</c>, all items in the array will be initialized using their default constructor.
            This can be used to prevent further allocations when the structure is used.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.CircularArray`1.Add(`0,`0@)">
            <summary>
            Add a new item to the circular array.
            </summary>
            <param name="item">Item to add.</param>
            <param name="oldItem">If the function returns <c>true</c>, this is filled with the oldest item that was replaced.</param>
            <returns><c>true</c> if the oldest item was replaced, <c>false</c> otherwise.</returns>
            <remarks>If the array already reached its capacity, this method will replace the oldest item with the new item.</remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.CircularArray`1.RemoveFirst(`0@)">
            <summary>
            Removes the first item from the circular array, which is the oldest entry in the array.
            </summary>
            <param name="firstItem">If the function returns <c>true</c>, this is filled with the oldest item that was removed.</param>
            <returns><c>true</c> if the oldest item was removed, <c>false</c> if there were no items.</returns>
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.CircularArray`1.Item(System.Int32)">
            <summary>
            Access to an item at specific index.
            </summary>
            <param name="i">Zero-based index of the item to access. Index must be an integer between 0 and <see cref="P:Stratis.Bitcoin.Utilities.CircularArray`1.Capacity"/> - 1.</param>
            <returns>Item of the circular array at index <paramref name="i"/>.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.CircularArray`1.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.CircularArray`1.GetEnumerator">
            <inheritdoc />
            <remarks>Items are enumerated in order of their addition starting with the oldest item.</remarks>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.IDateTimeProvider">
            <summary>
            Providing date time functionality.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.IDateTimeProvider.GetTime">
            <summary>
            Get the current time in Linux format.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.IDateTimeProvider.GetTimeOffset">
            <summary>
            Get the current time offset in UTC.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.IDateTimeProvider.GetUtcNow">
            <summary>
            Get the current time in UTC.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.IDateTimeProvider.GetAdjustedTime">
            <summary>
            Obtains adjusted time, which is time synced with network peers.
            </summary>
            <returns>Adjusted UTC timestamp.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.IDateTimeProvider.GetAdjustedTimeAsUnixTimestamp">
            <summary>
            Obtains adjusted time, which is time synced with network peers, as Unix timestamp with seconds precision.
            </summary>
            <returns>Adjusted UTC timestamp as Unix timestamp with seconds precision.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.IDateTimeProvider.SetAdjustedTimeOffset(System.TimeSpan)">
            <summary>
            Sets adjusted time offset, which is time difference from network peers.
            </summary>
            <param name="adjustedTimeOffset">Offset to adjust time with.</param>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.DateTimeProvider">
            <inheritdoc />
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.DateTimeProvider.Default">
            <summary>Static instance of the object to prevent the need of creating new instance.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.DateTimeProvider.adjustedTimeOffset">
            <summary>UTC adjusted timestamp, or null if no adjusted time is set.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.DateTimeProvider.#cctor">
            <summary>
            Initializes a default instance of the object.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.DateTimeProvider.#ctor">
            <summary>
            Initializes instance of the object.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.DateTimeProvider.GetTime">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.DateTimeProvider.GetUtcNow">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.DateTimeProvider.GetTimeOffset">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.DateTimeProvider.GetAdjustedTime">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.DateTimeProvider.GetAdjustedTimeAsUnixTimestamp">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.DateTimeProvider.SetAdjustedTimeOffset(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.DBreezeSerializer">
            <summary>
            Implementation of serialization and deserialization of objects that go into the DBreeze database.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.DBreezeSerializer.Serialize(System.Object)">
            <summary>
            Serializes object to a binary data format.
            </summary>
            <param name="obj">Object to be serialized.</param>
            <returns>Binary data representing the serialized object.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.DBreezeSerializer.ConcatArrays(System.Byte[][])">
            <summary>
            Concatenates multiple byte arrays into a single byte array.
            </summary>
            <param name="arrays">Arrays to concatenate.</param>
            <returns>Concatenation of input arrays.</returns>
            <remarks>Based on https://stackoverflow.com/a/415396/3835864 .</remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.DBreezeSerializer.Deserialize(System.Byte[],System.Type)">
            <summary>
            Deserializes binary data to an object of specific type.
            </summary>
            <param name="bytes">Binary data representing a serialized object.</param>
            <param name="type">Type of the serialized object.</param>
            <returns>Deserialized object.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.Extensions.CollectionExtensions">
            <summary>
            Extension methods for collections.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.Extensions.CollectionExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            An extension that will check if an <see cref="T:System.Collections.Generic.IEnumerable`1"/> is empty.
            </summary>
            <typeparam name="TSource">The type of enumerable.</typeparam>
            <param name="source">The enumerable to check.</param>
            <returns><c>true</c> if empty otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.Extensions.CollectionExtensions.IsEmpty``1(System.Collections.Generic.IList{``0})">
            <summary>
            An extension that will check if an <see cref="T:System.Collections.Generic.IList`1"/> is empty.
            </summary>
            <typeparam name="TSource">The type of enumerable.</typeparam>
            <param name="source">The enumerable to check.</param>
            <returns><c>true</c> if empty otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.Extensions.CollectionExtensions.IsEmpty(System.Array)">
            <summary>
            An extension that will check if an <see cref="T:System.Array"/> is empty.
            </summary>
            <param name="source">The enumerable to check.</param>
            <returns><c>true</c> if empty otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.Extensions.CommandLineArgsExtensions">
            <summary>
            Extension methods for command line arguments.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.Extensions.CommandLineArgsExtensions.GetValueOf(System.String[],System.String)">
            <summary>
            Obtains a value of command line argument.
            <para>
            It is expected that arguments are written on command line as <c>argName=argValue</c>,
            where argName usually (but does not need to) starts with "-".
            </para>
            <para>
            The argValue can be wrapped with '"' quotes from both sides, in which case the quotes are removed,
            but it is not allowed for argValue to contain '"' inside the actual value.
            </para>
            </summary>
            <param name="args">Application command line arguments.</param>
            <param name="arg">Name of the command line argument which value should be obtained.</param>
            <returns>Value of the specified argument or null if no such argument is found among the given list of arguments.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.Extensions.DateTimeExtensions">
            <summary>
            Provides a set of extension methods for the <see cref="T:System.DateTime"/> class.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.Extensions.DateTimeExtensions.ToUnixTimestamp(System.DateTime)">
            <summary>
            Converts a given DateTime into a Unix timestamp.
            </summary>
            <param name="value">Any DateTime</param>
            <returns>The given DateTime in Unix timestamp format</returns>
            <remarks>This represents the number of seconds that have elapsed since 1970-01-01T00:00:00Z.</remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.Extensions.IPExtensions.MapToIpv6(System.Net.IPEndPoint)">
            <summary>Maps an end point to IPv6 if is not already mapped.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.Extensions.IPExtensions.Match(System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>Match the end point with another by IP and port.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.Extensions.IPExtensions.MatchIpOnly(System.Net.IPEndPoint,System.Net.IPEndPoint)">
            <summary>Match the IP address only (the port is ignored).</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.Extensions.IPExtensions.ToIPEndPoint(System.String,System.Int32)">
            <summary>
            Converts a string to an IP endpoint.
            </summary>
            <param name="ipAddress">String to convert.</param>
            <param name="port">Port to use if <paramref name="ipAddress"/> does not specify it.</param>
            <returns>IP end point representation of the string.</returns>
            <remarks>
            IP addresses can have a port specified such that the format of <paramref name="ipAddress"/> is as such: address:port.
            IPv4 and IPv6 addresses are supported.
            In the case where the default port is passed and the IP address has a port specified in it, the IP address's port will take precedence.
            Examples of addresses that are supported are:
            - 15.61.23.23
            - 15.61.23.23:1500
            - [1233:3432:2434:2343:3234:2345:6546:4534]
            - [1233:3432:2434:2343:3234:2345:6546:4534]:8333
            - ::ffff:192.168.4.1
            - ::ffff:192.168.4.1:80
            - google.com (Resolves domain name to IP Address)
            - google.com:80 ('')
            - 1233:3432:2434:2343:3234:2345:6546:4534
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown in case of the port number is out of range.</exception>
            <exception cref="T:System.FormatException">Thrown in case of ipAddress or port number is invalid.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">Thrown if the ipAddress is not a valid host name.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.Extensions.IPExtensions.CanBeMappedTo(System.Net.IPEndPoint,System.Collections.Generic.List{System.Net.IPEndPoint},System.Net.IPEndPoint@)">
            <summary>
            This method will try to map an white-bind endpoint to a list of already bound endpoints.
            </summary>
            <remarks>
            The method will try to compare a local endpoint to the port of the white-bind endpoint, and if found will return the local endpoint that matches.
            Otherwise try to compare by a match of the entire endpoint.
            </remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.Extensions.StringExtensions.ToSecureString(System.String)">
            <summary>
            Converts a string to a SecureString object.
            </summary>
            <param name="input">The string to convert.</param>
            <returns>The SecureString result.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.Extensions.StringExtensions.FromSecureString(System.Security.SecureString)">
            <summary>
            Retrieves the underlying string from a SecureString object.
            </summary>
            <param name="secstrPassword">The SecureString object.</param>
            <returns>The underlying string contained in this object.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.Extensions.ThreadingExtensions.SafeRelease(System.Threading.SemaphoreSlim)">
            <summary>
            Don't throw SemaphoreFullException
            https://stackoverflow.com/questions/4706734/semaphore-what-is-the-use-of-initial-count
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.Extensions.ThreadingExtensions.SafeRelease(System.Threading.SemaphoreSlim,System.Int32)">
            <summary>
            Don't throw SemaphoreFullException
            https://stackoverflow.com/questions/4706734/semaphore-what-is-the-use-of-initial-count
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.Extensions.TypeExtensions.BytesToMegaBytes(System.Int64,System.Int32)">
            <summary>
            Converts a long that represents a number of bytes to be represented in MB.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.Extensions.VersionExtensions">
            <summary>
            Extension methods for Version class.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.Extensions.VersionExtensions.ToUint(System.Version)">
            <summary>
            Converts a version information to integer.
            </summary>
            <param name="version">Version information to convert.</param>
            <returns>Integer representation of the <param name="version"/> information.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.FileStorage`1">
            <summary>
            Class providing methods to save objects as files on the file system.
            </summary>
            <typeparam name="T">The type of object to be stored in the file system.</typeparam>
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.FileStorage`1.FolderPath">
            <summary> Gets the folder path. </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.FileStorage`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Stratis.Bitcoin.Utilities.FileStorage`1"/> class.
            </summary>
            <param name="folderPath">The path of the folder in which the files are to be stored.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.FileStorage`1.SaveToFile(`0,System.String,System.Boolean)">
            <summary>
            Saves an object to a file, optionally keeping a backup of it.
            </summary>
            <param name="toSave">Object to save as a file.</param>
            <param name="fileName">Name of the file to be saved.</param>
            <param name="saveBackupFile">A value indicating whether to save a backup of the file.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.FileStorage`1.Exists(System.String)">
            <summary>
            Checks whether a file with the specified name exists in the folder.
            </summary>
            <param name="fileName">The name of the file to look for.</param>
            <returns>A value indicating whether the file exists in the file system.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.FileStorage`1.GetFilesPaths(System.String)">
            <summary>
            Gets the paths of the files with the specified extension.
            </summary>
            <param name="fileExtension">The file extension.</param>
            <returns>A list of paths for files with the specified extension.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.FileStorage`1.GetFilesNames(System.String)">
            <summary>
            Gets the names of files with the specified extension.
            </summary>
            <param name="fileExtension">The file extension.</param>
            <returns>A list of filenames with the specified extension.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.FileStorage`1.LoadByFileName(System.String)">
            <summary>
            Loads an object from the file in which it is persisted.
            </summary>
            <param name="fileName">The name of the file to load.</param>
            <returns>An object of type <see cref="!:T"/>.</returns>
            <exception cref="T:System.IO.FileNotFoundException">Indicates that no file with this name was found.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.FileStorage`1.LoadByFileExtension(System.String)">
            <summary>
            Loads all the objects that have file with the specified extension.
            </summary>
            <param name="fileExtension">The file extension.</param>
            <returns>A list of objects of type <see cref="!:T"/> whose persisted files have the specified extension. </returns>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.FullNodeExtensions">
            <summary>
            Extension methods for IFullNode interface.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.FullNodeExtensions.RunAsync(Stratis.Bitcoin.IFullNode)">
            <summary>
            Installs handlers for graceful shutdown in the console, starts a full node and waits until it terminates.
            </summary>
            <param name="node">Full node to run.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.FullNodeExtensions.RunAsync(Stratis.Bitcoin.IFullNode,System.Threading.CancellationToken,System.String,System.String)">
            <summary>
            Starts a full node, sets up cancellation tokens for its shutdown, and waits until it terminates.
            </summary>
            <param name="node">Full node to run.</param>
            <param name="cancellationToken">Cancellation token that triggers when the node should be shut down.</param>
            <param name="shutdownMessage">Message to display on the console to instruct the user on how to invoke the shutdown.</param>
            <param name="shutdownCompleteMessage">Message to display on the console when the shutdown is complete.</param>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.Guard">
            <summary>
            Collection of guard methods.
            <para>
            Guards are typically used at the beginning of a method to protect the body of
            the method being called with invalid set of parameters or object states.
            </para>
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.Guard.Assert(System.Boolean)">
            <summary>
            Asserts that a condition is true.
            </summary>
            <param name="condition">The condition to assert.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.Guard.NotNull``1(``0,System.String)">
            <summary>
            Checks an object is not null.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="value">The object.</param>
            <param name="parameterName">The name of the object.</param>
            <returns>The object if it is not null.</returns>
            <exception cref="T:System.ArgumentNullException">An exception if the object passed is null.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.Guard.NotEmpty(System.String,System.String)">
            <summary>
            Checks a <see cref="T:System.String"/> is not null or empty.
            </summary>
            <param name="value">The string to check.</param>
            <param name="parameterName">The name of the string.</param>
            <returns>The string if it is not null or empty.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.HashHeightPair">
            <summary>Pair of block hash and block height.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.HashHeightPair.ReadWrite(NBitcoin.BitcoinStream)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.HashHeightPair.ToString">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.HashHeightPair.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.HashHeightPair.Load(System.Byte[],NBitcoin.Network)">
            <summary>Constructs <see cref="T:Stratis.Bitcoin.Utilities.HashHeightPair"/> from a set bytes and the given network.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.IpHelper.FindPorts(System.Int32[])">
            <summary>
            Find ports that are free to use.
            </summary>
            <param name="ports">A list of ports to checked or fill/replace as necessary.</param>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.JsonConverters.AssetIdJsonConverter">
            <summary>
            Converter used to convert an <see cref="T:NBitcoin.OpenAsset.AssetId"/> to and from JSON.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.AssetIdJsonConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.AssetIdJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.AssetIdJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.JsonConverters.BitcoinSerializableJsonConverter">
            <summary>
            Converter used to convert an object implementing <see cref="T:NBitcoin.IBitcoinSerializable"/> to and from JSON.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.BitcoinSerializableJsonConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.BitcoinSerializableJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.BitcoinSerializableJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.JsonConverters.BitcoinStringJsonConverter">
            <summary>
            Converter used to convert an object implementing <see cref="T:NBitcoin.IBitcoinString"/> to and from JSON.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.BitcoinStringJsonConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.BitcoinStringJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.BitcoinStringJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.JsonConverters.ByteArrayConverter">
            <summary>
            Converter used to convert <see cref="T:System.Byte"/> arrays to and from JSON.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.ByteArrayConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.ByteArrayConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.ByteArrayConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.JsonConverters.CoinJsonConverter">
            <summary>
            Converter used to convert an object implementing <see cref="T:NBitcoin.ICoin"/> to and from JSON.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.CoinJsonConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.CoinJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.CoinJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.JsonConverters.DateTimeOffsetConverter">
            <summary>
            Converter used to convert <see cref="T:System.DateTimeOffset"/> to and from Unix time represented in JSON.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.DateTimeOffsetConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.DateTimeOffsetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.DateTimeOffsetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.JsonConverters.DateTimeToUnixTimeConverter">
            <summary>
            Converter used to convert a <see cref="T:System.DateTime"/> to and from JSON.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.DateTimeToUnixTimeConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.DateTimeToUnixTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.DateTimeToUnixTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.JsonConverters.HexJsonConverter">
            <summary>
            Converter used to convert a <see cref="!:byte[]"/> to and from hex-encoded JSON.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.HexJsonConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.HexJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.HexJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.JsonConverters.IPEndPointConverter">
            <summary>
            Converter used to convert <see cref="T:System.Net.IPEndPoint"/> to and from JSON.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.IPEndPointConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.IPEndPointConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.IPEndPointConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.JsonConverters.KeyJsonConverter">
            <summary>
            Converter used to convert a <see cref="T:NBitcoin.Key"/> or a <see cref="T:NBitcoin.PubKey"/> to and from JSON.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.KeyJsonConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.KeyJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.KeyJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.JsonConverters.KeyPathJsonConverter">
            <summary>
            Converter used to convert a <see cref="T:NBitcoin.KeyPath"/> to and from JSON.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.KeyPathJsonConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.KeyPathJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.KeyPathJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.JsonConverters.LockTimeJsonConverter">
            <summary>
            Converter used to convert a <see cref="T:NBitcoin.LockTime"/> to and from JSON.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.LockTimeJsonConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.LockTimeJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.LockTimeJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.JsonConverters.MoneyJsonConverter">
            <summary>
            Converter used to convert a <see cref="T:NBitcoin.Money"/> object to and from JSON.
            Uses satoshis as unit for serialization.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.MoneyJsonConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.MoneyJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.MoneyJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.JsonConverters.MoneyInCoinsJsonConverter">
            <summary>
            Converter used to convert a <see cref="T:NBitcoin.Money"/> object to and from JSON.
            Uses coins (BTC) as the unit for serialization.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.MoneyInCoinsJsonConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.MoneyInCoinsJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.MoneyInCoinsJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.JsonConverters.NetworkConverter">
            <summary>
            Converter used to convert <see cref="T:NBitcoin.Network"/> to and from JSON.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.NetworkConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.NetworkConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.NetworkConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.JsonConverters.NetworkJsonConverter">
            <summary>
            Converter used to convert the name of a network in JSON to the corresponding <see cref="T:NBitcoin.Network"/>.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.NetworkJsonConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.NetworkJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.NetworkJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.JsonConverters.ScriptJsonConverter">
            <summary>
            Converter used to convert a <see cref="T:NBitcoin.Script"/> or a <see cref="T:NBitcoin.WitScript"/> to and from JSON.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.ScriptJsonConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.ScriptJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.ScriptJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.JsonConverters.Serializer">
            <summary>
            Class providing method used to serialize/deserialize domain objects to and from JSON.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.JsonConverters.SignatureJsonConverter">
            <summary>
            Converter used to convert a <see cref="T:NBitcoin.Script"/> or a <see cref="T:NBitcoin.WitScript"/> to and from JSON.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.SignatureJsonConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.SignatureJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.SignatureJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.JsonConverters.TxDestinationJsonConverter">
            <summary>
            Converter used to convert a <see cref="T:NBitcoin.KeyId"/>, a <see cref="T:NBitcoin.ScriptId"/>, a <see cref="T:NBitcoin.WitKeyId"/> or a <see cref="T:NBitcoin.WitScriptId"/> to and from JSON.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.TxDestinationJsonConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.TxDestinationJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.TxDestinationJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.JsonConverters.UInt160JsonConverter">
            <summary>
            Converter used to convert a <see cref="T:NBitcoin.uint160"/> to and from JSON.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.UInt160JsonConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.UInt160JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.UInt160JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.JsonConverters.UInt256JsonConverter">
            <summary>
            Converter used to convert a <see cref="T:NBitcoin.uint256"/> to and from JSON.
            </summary>
            <seealso cref="T:Newtonsoft.Json.JsonConverter" />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.UInt256JsonConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.UInt256JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.JsonConverters.UInt256JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.IKeyValueRepository">
            <summary>Allows saving and loading single values to and from key-value storage.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.KeyValueRepository.dbreeze">
            <summary>Access to DBreeze database.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.KeyValueRepository.SaveValue``1(System.String,``0)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.KeyValueRepository.LoadValue``1(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.KeyValueRepository.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.LinqExtensions">
            <summary>
            Extension methods for IEnumerable interface.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.LinqExtensions.Median(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Calculates a median value of a collection of long integers.
            </summary>
            <param name="source">Collection of numbers to count median of.</param>
            <returns>Median value, or 0 if the collection is empty.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.LinqExtensions.Median(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Calculates a median value of a collection of integers.
            </summary>
            <param name="source">Collection of numbers to count median of.</param>
            <returns>Median value, or 0 if the collection is empty.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.LinqExtensions.Median(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Calculates a median value of a collection of doubles.
            </summary>
            <param name="source">Collection of numbers to count median of.</param>
            <returns>Median value, or 0 if the collection is empty.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.LoggingExtensions">
            <summary>
            Extension methods for classes and interfaces related to logging.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.LoggingExtensions.CreateLogger(Microsoft.Extensions.Logging.ILoggerFactory,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.Extensions.Logging.ILogger"/> instance which prefixes every log with specified string.
            </summary>
            <param name="loggerFactory">Logger factory interface being extended.</param>
            <param name="categoryName">Category name for messages produced by the logger.</param>
            <param name="prefix">String to be put in front of each log of the newly created logger.</param>
            <returns>Newly created logger.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.LoggingExtensions.ToNLogLevel(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Converts <see cref="T:Microsoft.Extensions.Logging.LogLevel"/> to <see cref="T:NLog.LogLevel"/>.
            </summary>
            <param name="logLevel">Log level value to convert.</param>
            <returns>NLog value of the log level.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.MemoryCache`2">
            <summary>
            Memory cache that implements the Least Recently Used (LRU) policy.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.MemoryCache`2.CacheItem">
            <summary>Cache item for the inner usage of the <see cref="T:Stratis.Bitcoin.Utilities.MemoryCountCache`2"/> class.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.MemoryCache`2.CacheItem.Size">
            <summary>Size of value in bytes.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.MemoryCache`2.CacheItem.#ctor(`0,`1)">
            <summary>Initializes a new instance of the <see cref="!:CacheItem&lt;TKey, TValue&gt;"/> class.</summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.MemoryCache`2.CacheItem.#ctor(`0,`1,System.Int64)">
            <summary>Initializes a new instance of the <see cref="!:CacheItem&lt;TKey, TValue&gt;"/> class.</summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.MemoryCache`2.cache">
            <summary>Dictionary that contains cached items.</summary>
            <remarks>Should be accessed inside a lock using <see cref="F:Stratis.Bitcoin.Utilities.MemoryCache`2.lockObject"/>.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.MemoryCache`2.keys">
            <summary>Keys sorted by their last access time with most recent ones at the end.</summary>
            <remarks>Should be accessed inside a lock using <see cref="F:Stratis.Bitcoin.Utilities.MemoryCache`2.lockObject"/>.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.MemoryCache`2.lockObject">
            <summary>Lock to protect access to <see cref="F:Stratis.Bitcoin.Utilities.MemoryCache`2.keys"/> and <see cref="F:Stratis.Bitcoin.Utilities.MemoryCache`2.cache"/>.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.MemoryCache`2.totalSize">
            <summary>Total size in bytes stored in the cache.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.MemoryCache`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Stratis.Bitcoin.Utilities.MemoryCache`2"/> class.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or <c>null</c> to use the default comparer for the type of the key.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.MemoryCache`2.IsCacheFullLocked(Stratis.Bitcoin.Utilities.MemoryCache{`0,`1}.CacheItem)">
            <summary>Determine whether the cache has reached its limit.</summary>
            <returns><c>true</c> if cache contains the item, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.MemoryCache`2.ItemAddedLocked(Stratis.Bitcoin.Utilities.MemoryCache{`0,`1}.CacheItem)">
            <summary>An item was added to the cache.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.MemoryCache`2.ItemRemovedLocked(Stratis.Bitcoin.Utilities.MemoryCache{`0,`1}.CacheItem)">
            <summary>An item was removed from the cache.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.MemoryCache`2.Count">
            <summary>Gets the count of the current items for diagnostic purposes.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.MemoryCache`2.AddOrUpdate(Stratis.Bitcoin.Utilities.MemoryCache{`0,`1}.CacheItem)">
            <summary>Create or overwrite an item in the cache.</summary>
            <param name="item"><see cref="T:Stratis.Bitcoin.Utilities.MemoryCache`2.CacheItem"/> to add or update the cache.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.MemoryCache`2.Remove(`0)">
            <summary>Removes the object associated with the given key.</summary>
            <param name="key">Key of that item that will be removed from the cache.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.MemoryCache`2.TryGetValue(`0,`1@)">
            <summary>Gets an item associated with specific key if present.</summary>
            <param name="key">Item's key.</param>
            <param name="value">Item associated with specified <paramref name="key"/>.</param>
            <returns><c>true</c> if cache contains the item, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.MemoryCache`2.ClearCache">
            <summary>
            Flush the entire cache.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.MemoryCountCache`2">
            <summary>
            Memory count cache that implements the Least Recently Used (LRU) policy.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.MemoryCountCache`2.maxItemsCount">
            <summary>Maximum items count that can be stored in the cache.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.MemoryCountCache`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Stratis.Bitcoin.Utilities.MemoryCountCache`2"/> class.
            </summary>
            <param name="maxItemsCount">Maximum items count that can be stored in the cache.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or <c>null</c> to use the default comparer for the type of the key.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.MemoryCountCache`2.AddOrUpdate(`0,`1)">
            <summary>Create or overwrite an item in the cache.</summary>
            <param name="key">The key.</param>
            <param name="value">The value to add to the cache.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.MemoryCountCache`2.IsCacheFullLocked(Stratis.Bitcoin.Utilities.MemoryCache{`0,`1}.CacheItem)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.MemorySizeCache`2">
            <summary>
            Memory size cache that implements the Least Recently Used (LRU) policy.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.MemorySizeCache`2.maxSize">
            <summary>Maximum size in bytes that can be stored in the cache.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.MemorySizeCache`2.TotalSize">
            <summary>Gets the size of all items in the cache, in bytes.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.MemorySizeCache`2.MaxSize">
            <summary>Gets max size in bytes that can be stored in the cache.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.MemorySizeCache`2.#ctor(System.Int64,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Stratis.Bitcoin.Utilities.MemoryCountCache`2"/> class.
            </summary>
            <param name="maxSize">Maximum size in bytes count that can be stored in the cache.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or <c>null</c> to use the default comparer for the type of the key.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.MemorySizeCache`2.AddOrUpdate(`0,`1,System.Int64)">
            <summary>Create or overwrite an item in the cache.</summary>
            <param name="key">The key.</param>
            <param name="value">The value to add to the cache.</param>
            <param name="size">Value size in bytes.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.ModelStateErrors.ModelStateErrors.BuildErrorResponse(Microsoft.AspNetCore.Mvc.ModelBinding.ModelStateDictionary)">
            <summary>
            Builds an <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> containing errors contained in the <see cref="P:Microsoft.AspNetCore.Mvc.ControllerBase.ModelState"/>.
            </summary>
            <returns>A result containing the errors.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.NetworkExtensions">
            <summary>
            Extension methods for NBitcoin's Network class.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.NetworkExtensions.MempoolHeight">
            <summary>Fake height value used in Coins to signify they are only in the memory pool (since 0.8).</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.NetworkExtensions.IsTest(NBitcoin.Network)">
            <summary>
            Determines whether this network is a test network.
            </summary>
            <param name="network">The network.</param>
            <returns><c>true</c> if the specified network is test, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.NetworkExtensions.IsRegTest(NBitcoin.Network)">
            <summary>
            Determines whether this network is a regtest network.
            </summary>
            <param name="network">The network.</param>
            <returns><c>true</c> if the specified network is test, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.NetworkExtensions.IsBitcoin(NBitcoin.Network)">
            <summary>
            Determines whether this network is a bitcoin network.
            </summary>
            <param name="network">The network.</param>
            <returns><c>true</c> if the specified network is bitcoin, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.NetworkHelpers">
            <summary>
            Contains a collection of helpers methods.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.NetworkHelpers.GetNetwork(System.String)">
            <summary>
            Get the network on which to operate.
            </summary>
            <param name="network">The network</param>
            <returns>A <see cref="T:NBitcoin.Network"/> object.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.INodeLifetime">
            <summary>
            Allows consumers to perform cleanup during a graceful shutdown.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.INodeLifetime.ApplicationStarted">
            <summary>
            Triggered when the application host has fully started and is about to wait
            for a graceful shutdown.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.INodeLifetime.ApplicationStopping">
            <summary>
            Triggered when the application host is performing a graceful shutdown.
            Requests may still be in flight. Shutdown will block until this event completes.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.INodeLifetime.ApplicationStopped">
            <summary>
            Triggered when the application host is performing a graceful shutdown.
            All requests should be complete at this point. Shutdown will block
            until this event completes.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.INodeLifetime.StopApplication">
            <summary>Requests termination the current application.</summary>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.NodeLifetime">
            <summary>
            Allows consumers to perform cleanup during a graceful shutdown.
            Borrowed from asp.net core
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.NodeLifetime.ApplicationStarted">
            <summary>
            Triggered when the application host has fully started and is about to wait
            for a graceful shutdown.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.NodeLifetime.ApplicationStopping">
            <summary>
            Triggered when the application host is performing a graceful shutdown.
            Request may still be in flight. Shutdown will block until this event completes.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.NodeLifetime.ApplicationStopped">
            <summary>
            Triggered when the application host is performing a graceful shutdown.
            All requests should be complete at this point. Shutdown will block
            until this event completes.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.NodeLifetime.StopApplication">
            <summary>
            Signals the ApplicationStopping event and blocks until it completes.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.NodeLifetime.NotifyStarted">
            <summary>
            Signals the ApplicationStarted event and blocks until it completes.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.NodeLifetime.NotifyStopped">
            <summary>
            Signals the ApplicationStopped event and blocks until it completes.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.INodeStats.RegisterStats(System.Action{System.Text.StringBuilder},Stratis.Bitcoin.Utilities.StatsType,System.Int32)">
            <summary>Registers action that will be used to append node stats when they are being collected.</summary>
            <param name="appendStatsAction">Action that will be invoked during stats collection.</param>
            <param name="statsType">Type of stats.</param>
            <param name="priority">Stats priority that will be used to determine invocation priority of stats collection.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.INodeStats.GetStats">
            <summary>Collects inline stats and then feature stats.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.INodeStats.GetBenchmark">
            <summary>Collects benchmark stats.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.NodeStats.locker">
            <summary>Protects access to <see cref="F:Stratis.Bitcoin.Utilities.NodeStats.stats"/>.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.NodeStats.RegisterStats(System.Action{System.Text.StringBuilder},Stratis.Bitcoin.Utilities.StatsType,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.NodeStats.GetStats">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.NodeStats.GetBenchmark">
            <inheritdoc />
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.StatsType.Inline">
            <summary>
            Inline stats are usually single line stats that should
            display most important information about the node.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.StatsType.Component">
            <summary>
            Component-related stats are usually blocks of component specific stats.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.StatsType.Benchmark">
            <summary>
            Benchmarking stats that display performance related information.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.ParallelAsync.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Threading.CancellationToken,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Executes a foreach operation on an IEnumerable in which iterations run asynchronously.
            </summary>
            <typeparam name="TSource">Item type.</typeparam>
            <param name="collection">Enumerated collection.</param>
            <param name="maxDegreeOfParallelism">The maximum amount of items that can be processed simultaneously.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <param name="action">Action that is used for processing each item in the collection.</param>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.IPeriodicTask">
            <summary>Periodic task executes an application defined task in a loop with a specified delay between two runs.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.IPeriodicTask.Name">
            <summary>Name of the application task. It is used for logging.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.IPeriodicTask.RunOnce">
            <summary>
            Executes the application task once.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.IPeriodicTask.Start(System.Threading.CancellationToken,System.TimeSpan,System.Boolean)">
            <summary>
            Configures and starts the loop in which the application task is periodically executed.
            </summary>
            <param name="cancellation">Cancellation token that allows the caller to stop the loop.</param>
            <param name="refreshRate">Delay between two executions of the task.</param>
            <param name="delayStart">If true, the first execution of the task is made after the <paramref name="refreshRate"/> time.</param>
            <returns>This task to enable fluent code.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.PeriodicTask">
            <inheritdoc />
            <remarks>This implementation spawns a new thread for each new periodic task.</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.PeriodicTask.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.PeriodicTask.name">
            <summary>Name of the application task. It is used for logging.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.PeriodicTask.Name">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.PeriodicTask.#ctor(System.String,Microsoft.Extensions.Logging.ILogger,System.Action{System.Threading.CancellationToken})">
            <summary>
            Initializes a new instance of the object.
            </summary>
            <param name="name">Name of the application task.</param>
            <param name="logger">Logger for this instance.</param>
            <param name="loop">Application defined task to execute periodically.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.PeriodicTask.Start(System.Threading.CancellationToken,System.TimeSpan,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.PeriodicTask.RunOnce">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.PrefixLogger">
            <summary>
            Logger that prefixes every log with specified string.
            </summary>
            <remarks>
            TODO: Currently this is not compatible with logging to the console.
            This means that if you use a prefix logger for logging in a class,
            the logging output will not go to the console even if the logging
            level is at or above the minimum logging level for the console.
            </remarks>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.PrefixLogger.logger">
            <summary>Internal NLog logger instance.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.PrefixLogger.consoleLogger">
            <summary>Internal console logger instance.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.PrefixLogger.prefix">
            <summary>Prefix to put in front of every message.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.PrefixLogger.wrapperType">
            <summary>Wrapper class type for the NLog callsite to skip it.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.PrefixLogger.#ctor(Microsoft.Extensions.Logging.ILoggerFactory,System.String,System.String)">
            <summary>
            Creates a logger instance with given prefix.
            </summary>
            <param name="loggerFactory">Factory to create loggers.</param>
            <param name="categoryName">Category name for messages produced by the logger.</param>
            <param name="prefix">String to be put in front of each log of the newly created logger.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.PrefixLogger.BeginScope``1(``0)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.PrefixLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.PrefixLogger.IsEnabled(NLog.LogLevel)">
            <summary>
            Checks if the given log level is enabled.
            </summary>
            <param name="logLevel">Log level to check.</param>
            <returns><c>true</c> if the log level is enabled, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.PrefixLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.ProtocolExtensions">
            <summary>
            Extension methods related to the network protocol.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.ProtocolExtensions.GetMedianTimeOffset(System.Collections.Generic.IEnumerable{Stratis.Bitcoin.P2P.Peer.INetworkPeer})">
            <summary>
            Calculates a median of time offsets of the node's connected peers.
            <para>
            The peers' time offsets are differences in seconds between the node's clock and the peer's clock.
            </para>
            </summary>
            <param name="source">Collection of connected peer nodes.</param>
            <returns>Median time offset among the given nodes.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.RewindData">
            <summary>
            Information about a previous state of the coinview that contains all information
            needed to rewind the coinview from the current state to the previous state.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.RewindData.previousBlockHash">
            <summary>Hash of the block header of the tip of the previous state of the coinview.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.RewindData.PreviousBlockHash">
            <summary>Hash of the block header of the tip of the previous state of the coinview.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.RewindData.transactionsToRemove">
            <summary>List of transaction IDs that needs to be removed when rewinding to the previous state as they haven't existed in the previous state.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.RewindData.TransactionsToRemove">
            <summary>List of transaction IDs that needs to be removed when rewinding to the previous state as they haven't existed in the previous state.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.RewindData.outputsToRestore">
            <summary>List of unspent output transaction information that needs to be restored when rewinding to the previous state as they were fully spent in the current view.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.RewindData.OutputsToRestore">
            <summary>List of unspent output transaction information that needs to be restored when rewinding to the previous state as they were fully spent in the current view.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.RewindData.#ctor">
            <summary>
            Creates uninitialized instance of the object.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.RewindData.#ctor(NBitcoin.uint256)">
            <summary>
            Initializes instance of the object with coinview's tip hash.
            </summary>
            <param name="previousBlockHash">Hash of the block header of the tip of the previous state of the coinview.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.RewindData.ReadWrite(NBitcoin.BitcoinStream)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.ISchedulerLock">
            <summary>
            An async reader writer lock for concurrent and exclusive work.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.ISchedulerLock.ReadAsync(System.Action)">
            <summary>
            Queues concurrent work to the concurrent scheduler.
            Delegates calling this method will be done in parallel on the default scheduler.
            </summary>
            <param name="func">Method to be called with locked reader lock.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.ISchedulerLock.ReadAsync``1(System.Func{``0})">
            <summary>
            Queues concurrent work to the concurrent scheduler.
            Delegates calling this method will be done in parallel on the default scheduler.
            </summary>
            <typeparam name="T">Return type of the delegated method.</typeparam>
            <param name="func">Method to be called with locked reader lock.</param>
            <returns>Return value of the delegated method.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.ISchedulerLock.WriteAsync(System.Action)">
            <summary>
            Queues sequential work to the exclusive scheduler.
            Delegates calling this method will be done in sequentially,
            The first task will be queued on the default scheduler subsequent exclusive tasks will run in that same thread.
            </summary>
            <param name="func">Method to be called with locked writer lock.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.ISchedulerLock.WriteAsync``1(System.Func{``0})">
            <summary>
            Queues sequential work to the exclusive scheduler.
            Delegates calling this method will be done in sequentially,
            The first task will be queued on the default scheduler subsequent exclusive tasks will run in that same thread.
            </summary>
            <typeparam name="T">Return type of the delegated method.</typeparam>
            <param name="func">Method to be called with locked writer lock.</param>
            <returns>Return value of the delegated method.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.SchedulerLock">
            <summary>
            An async reader writer lock for concurrent and exclusive work.
            <para>
            The class uses ConcurrentExclusiveSchedulerPair to access two task schedulers - concurrent
            scheduler and exclusive scheduler. The exclusive scheduler guarantees only one task to be run
            at the same, which is what is used as a writer lock. The concurrent scheduler allows multiple
            tasks to run simultaneously, but the exclusivity of exclusive scheduler is respected, so it is
            used as a reader lock.
            </para>
            </summary>
            <remarks>
            From the TaskFactory.StartNew() remarks:
            Calling StartNew is functionally equivalent to creating a Task using one of its constructors
            and then calling <see cref="M:System.Threading.Tasks.Task.Start">Start</see> to schedule it for execution. However,
            unless creation and scheduling must be separated, StartNew is the recommended approach for both
            simplicity and performance.
            <para>
            WARNING: One has to be very careful using this class as the exclusivity of the exclusive scheduler
            only guarantees to actually run one task at the time, but if the task awaits, it is not considered
            as running and another task can be scheduled and run instead within the context of the exclusive
            scheduler. This means that the tasks run within both exclusive and concurrent schedulers
            must not await, otherwise there is a risk of a race condition. Thus in order to use this locking
            mechanism, one needs to first break up the asynchronous code to synchronous pieces and only then
            schedule the synchronous parts.
            </para>
            </remarks>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.SchedulerLock.cancellation">
            <inheritdoc />
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.SchedulerLock.concurrentFactory">
            <summary>Task factory that runs tasks using the concurrent scheduler. Serves as a reader lock.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.SchedulerLock.exclusiveFactory">
            <summary>Task factory that runs tasks using the exclusive scheduler. Serves as a writer lock.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.SchedulerLock.#ctor(System.Threading.CancellationTokenSource,System.Int32)">
            <summary>
            Initializes a new instance of the object with ability to cancel locked tasks.
            </summary>
            <param name="cancellation">Cancellation source to allow cancel the tasks run by the schedulers.</param>
            <param name="maxItemsPerTask">Number of exclusive tasks to process before checking concurrent tasks.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.SchedulerLock.ReadAsync(System.Action)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.SchedulerLock.ReadAsync``1(System.Func{``0})">
            <inheritdoc />
            <remarks>See warning in <see cref="T:Stratis.Bitcoin.Utilities.SchedulerLock"/> remarks section.</remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.SchedulerLock.WriteAsync(System.Action)">
            <inheritdoc />
            <remarks>See warning in <see cref="T:Stratis.Bitcoin.Utilities.SchedulerLock"/> remarks section.</remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.SchedulerLock.WriteAsync``1(System.Func{``0})">
            <inheritdoc />
            <remarks>See warning in <see cref="T:Stratis.Bitcoin.Utilities.SchedulerLock"/> remarks section.</remarks>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.StopwatchDisposable">
            <summary>
            Replacement for the <see cref="T:System.Diagnostics.Stopwatch"/> class that allows the caller
            to use a convenient way of calling the watch with the <c>using</c> statement due to
            the implementation of <see cref="T:System.IDisposable"/> interface.
            </summary>
            <remarks>
            Note that we are using <see cref="P:System.DateTime.Ticks"/> as a basic unit of measurement,
            not <see cref="P:System.Diagnostics.Stopwatch.ElapsedTicks"/>.
            Issue that cover this subject is <see href="https://github.com/stratisproject/StratisBitcoinFullNode/issues/2391"/>.
            </remarks>
            <example>
            <code>
            using (new StopwatchDisposable(o => this.Validator.PerformanceCounter.AddBlockFetchingTime(o)))
            {
                // Time of anything executed here will be added to the used performance counter.
            }
            </code>
            </example>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.StopwatchDisposable.watch">
            <summary>Stopwatch to measure elapsed ticks of the code block.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.StopwatchDisposable.action">
            <summary>
            Action to execute when the measurement is done.
            <para>
            This is usually a performance counter.
            The argument of the action is the number of elapsed ticks of the code block.
            </para>
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.StopwatchDisposable.#ctor(System.Action{System.Int64})">
            <summary>
            Creates a new disposable object and starts the time measurement.
            </summary>
            <param name="action">Action to execute when the measurement is done.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.StopwatchDisposable.Dispose">
            <summary>
            Stops the time measurement and calls the action with the measured elapsed ticks.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.TimerExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Timers.Timer"/> class.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.TimerExtensions.Reset(System.Timers.Timer)">
            <summary>
            Reset a timer from the start.
            </summary>
            <param name="timer">The timer to reset.</param>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.TimeSpans">
            <summary>
            Commonly used time spans.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.TimeSpans.Ms100">
            <summary>Time span of 100 milliseconds.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.TimeSpans.Second">
            <summary>Time span of 1 second.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.TimeSpans.FiveSeconds">
            <summary>Time span of 5 seconds.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.TimeSpans.TenSeconds">
            <summary>Time span of 10 seconds.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.TimeSpans.Minute">
            <summary>Time span of 1 minute.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Utilities.TimeSpans.RunOnce">
            <summary>
            Special time span value used for repeat frequency values, for which it means that
            the event should be only run once and not repeated.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.UnspentOutputs.Outputs">
            <summary>
            The outputs of a transaction.
            </summary>
            <remarks>
            The behaviour of this collection is as following:
            If a UTXO is spent it will be set to null, but the size of the collection will not change.
            If the last item in the collection is spent (and set to null) when storing to disk the size
            of the collection will change and be reduced by the number of last items that are null.
            </remarks>
        </member>
        <member name="T:Stratis.Bitcoin.Utilities.ValidationAttributes.MoneyFormatAttribute">
            <summary>
            Validation attribute to check whether the data is in the right format to represent <see cref="T:NBitcoin.Money"/>.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Utilities.ValidationAttributes.MoneyFormatAttribute.isRequired">
            <summary> A value indicating whether the data field is required. </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.ValidationAttributes.MoneyFormatAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Stratis.Bitcoin.Utilities.ValidationAttributes.MoneyFormatAttribute"/> class.
            </summary>
            <param name="isRequired">A value indicating whether the data field is required.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Utilities.ValidationAttributes.MoneyFormatAttribute.IsValid(System.Object)">
            <inheritdoc/>
        </member>
             <member name="T:Stratis.Bitcoin.Features.Wallet.AccountBalance">
            <summary>
            A class that represents the balance of an account.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.AccountBalance.Account">
            <summary>
            The account for which the balance is calculated.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.AccountBalance.AmountConfirmed">
            <summary>
            The balance of confirmed transactions.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.AccountBalance.AmountUnconfirmed">
            <summary>
            The balance of unconfirmed transactions.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.AddressBalance">
            <summary>
            A class that represents the balance of an address.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.AddressBalance.Address">
            <summary>
            The address for which the balance is calculated.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.AddressBalance.CoinType">
            <summary>
            The coin type of this balance.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.AddressBalance.AmountConfirmed">
            <summary>
            The balance of confirmed transactions.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.AddressBalance.AmountUnconfirmed">
            <summary>
            The balance of unconfirmed transactions.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.AddressBook">
            <summary>
            Represents an address book.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.AddressBook.#ctor">
            <summary>
            Initializes a new instance of the wallet.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.AddressBook.Addresses">
            <summary>
            The list of addresses in the address book.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.AddressBookEntry">
            <summary>
            Represents an entry in the address book.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.AddressBookEntry.Label">
            <summary>
            A label uniquely identifying an entry.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.AddressBookEntry.Address">
            <summary>
            An address in base58.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.AddressBookException">
            <summary>
            An exception thrown by operations on the address book.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.AddressBookManager.AddressBookFileName">
            <summary>File extension for wallet files.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.AddressBookManager.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.AddressBookManager.fileStorage">
            <summary>An object capable of storing <see cref="T:Stratis.Bitcoin.Features.Wallet.Wallet"/>s to the file system.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.AddressBookManager.Initialize">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.AddressBookManager.AddNewAddress(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.AddressBookManager.GetAddressBook">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.AddressBookManager.RemoveAddress(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.ScriptToAddressLookup">
            <summary>
            This class is used to identify a <see cref="T:Stratis.Bitcoin.Features.Wallet.HdAddress" /> given a <see cref="T:NBitcoin.Script" /> (scriptPubKey).
            </summary>
            <remarks>
            Being able to map scripts to addresses allows the wallet to identify the corresponding transactions (see
            <see cref="P:Stratis.Bitcoin.Features.Wallet.HdAddress.Transactions" />) that pay to those addresses regardless of the type of script being used.
            The methods are virtual so that the functionality can be overridden as required to support additional script types.
            </remarks>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.ScriptToAddressLookup.keysLookup">
            <summary>A collection of <see cref="T:Stratis.Bitcoin.Features.Wallet.HdAddress"/> objects eached keyed by a <see cref="T:NBitcoin.Script"/> object.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.ScriptToAddressLookup.#ctor">
            <summary>
            Constructs this object.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.ScriptToAddressLookup.Values">
            <summary>
            Returns the <see cref="T:Stratis.Bitcoin.Features.Wallet.HdAddress"/> values from the <see cref="F:Stratis.Bitcoin.Features.Wallet.ScriptToAddressLookup.keysLookup"/> collection.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.ScriptToAddressLookup.TryGetValue(NBitcoin.Script,Stratis.Bitcoin.Features.Wallet.HdAddress@)">
            <summary>
            Maps scripts to addresses.
            </summary>
            <param name="script">The script to map.</param>
            <param name="address">The address mapped to the script.</param>
            <returns>Return <c>true</c> if a mapping could be found and <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.ScriptToAddressLookup.Count">
            <summary>
            Returns the number of elements in the collection.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.ScriptToAddressLookup.Item(NBitcoin.Script)">
            <summary>
            The 'get' method returns the address that has been mapped to the script.
            The 'set' method records the address against the script as key.
            </summary>
            <param name="script">The script that acts as key.</param>
            <returns>The <see cref="T:Stratis.Bitcoin.Features.Wallet.HdAddress"/> object.</returns>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.Broadcasting.BroadcasterBehavior.logger">
            <summary>Instance logger for the memory pool component.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Broadcasting.BroadcasterBehavior.Clone">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Broadcasting.BroadcasterBehavior.OnMessageReceivedAsync(Stratis.Bitcoin.P2P.Peer.INetworkPeer,Stratis.Bitcoin.P2P.Protocol.IncomingMessage)">
            <summary>
            Handler for processing incoming message from the peer.
            </summary>
            <param name="peer">Peer sending the message.</param>
            <param name="message">Incoming message.</param>
            <remarks>
            TODO: Fix the exception handling of the async event.
            </remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Broadcasting.BroadcasterBehavior.ProcessMessageAsync(Stratis.Bitcoin.P2P.Peer.INetworkPeer,Stratis.Bitcoin.P2P.Protocol.IncomingMessage)">
            <summary>
            Handler for processing peer messages.
            Handles the following message payloads: TxPayload, MempoolPayload, GetDataPayload, InvPayload.
            </summary>
            <param name="peer">Peer sending the message.</param>
            <param name="message">Incoming message.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Broadcasting.BroadcasterBehavior.AttachCore">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Broadcasting.BroadcasterBehavior.DetachCore">
            <inheritdoc />
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.Broadcasting.BroadcasterManagerBase.connectionManager">
            <summary> Connection manager for managing node connections.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Broadcasting.BroadcasterManagerBase.PropagateTransactionToPeersAsync(NBitcoin.Transaction,System.Collections.Generic.List{Stratis.Bitcoin.P2P.Peer.INetworkPeer})">
            <summary>
            Sends transaction to peers.
            </summary>
            <param name="transaction">Transaction that will be propagated.</param>
            <param name="peers">Peers to whom we will propagate the transaction.</param>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.Broadcasting.FullNodeBroadcasterManager.mempoolValidator">
            <summary>Memory pool validator for validating transactions.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Broadcasting.FullNodeBroadcasterManager.BroadcastTransactionAsync(NBitcoin.Transaction)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.CoinType">
            <summary>
            The type of coin, as specified in BIP44.
            </summary>
            <remarks>For more, see https://github.com/satoshilabs/slips/blob/master/slip-0044.md</remarks>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.CoinType.Bitcoin">
            <summary>
            Bitcoin
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.CoinType.Testnet">
            <summary>
            Testnet (all coins)
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.CoinType.Stratis">
            <summary>
            Stratis
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.Controllers.AddressBookController">
            <summary>
            Controller providing operations on a wallet.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.Controllers.AddressBookController.addressBookManager">
            <summary>An instance of the address book manager.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.Controllers.AddressBookController.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Controllers.AddressBookController.AddAddress(Stratis.Bitcoin.Features.Wallet.Models.AddressBookEntryRequest)">
            <summary>
            Add an entry to the address book.
            </summary>
            <param name="request">The object containing the parameters used to create an entry in the address book.</param>
            <returns>A JSON object containing the newly added entry.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Controllers.AddressBookController.RemoveAddress(System.String)">
            <summary>
            Remove an entry from the address book.
            </summary>
            <param name="label">The label of the entry to remove.</param>
            <returns>A JSON object containing the removed entry.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Controllers.AddressBookController.GetAddressBook(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Get the address book, with optional pagination.
            </summary>
            <param name="skip">A value representing how many entries to skip.</param>
            <param name="take">A value representing how many entries to take.</param>
            <returns>A JSON object containing the address book.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.Controllers.LegacyExtPubKeyConverter">
            <summary>
            Stratis X has a version prefix starting xq5h. Full node has a version prefix xpub for extended public key. 
            3rd parties like Ledger haven't update yet to the full node version prefix.
            This class provides a way to convert from the legacy format to the current format.
            </summary>
            <remarks>This class can be removed when the 3rd parties update their software.</remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Controllers.LegacyExtPubKeyConverter.ConvertIfInLegacyStratisFormat(System.String,NBitcoin.Network)">
            <summary>
            Converts a legacy Stratis format into a current Stratis format Base58 extended public key.
            </summary>
            <param name="extPubKey">The extended public key that may or may not need converting.</param>
            <param name="network">The network to get the version bytes for.</param>
            <returns>The same extended public key if version bytes is already the Stratis full node one,
            or the corrected extended public key if the version bytes was the Stratis X one.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.Controllers.WalletController">
            <summary>
            Controller providing operations on a wallet.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.Controllers.WalletController.network">
            <summary>Specification of the network the node runs on - regtest/testnet/mainnet.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.Controllers.WalletController.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.Controllers.WalletController.dateTimeProvider">
            <summary>Provider of date time functionality.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Controllers.WalletController.GenerateMnemonic(System.String,System.Int32)">
            <summary>
            Generates a new mnemonic. The call can optionally specify a language and the number of words in the mnemonic.
            </summary>
            <param name="language">The language for the words in the mnemonic. Options are: English, French, Spanish, Japanese, ChineseSimplified and ChineseTraditional. The default is 'English'.</param>
            <param name="wordCount">The number of words in the mnemonic. Options are: 12,15,18,21 or 24. the default is 12.</param>
            <returns>A JSON object containing the mnemonic generated.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Controllers.WalletController.Create(Stratis.Bitcoin.Features.Wallet.Models.WalletCreationRequest)">
            <summary>
            Creates a new wallet on the local machine.
            </summary>
            <param name="request">The object containing the parameters used to create the wallet.</param>
            <returns>A JSON object containing the mnemonic created for the new wallet.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Controllers.WalletController.Load(Stratis.Bitcoin.Features.Wallet.Models.WalletLoadRequest)">
            <summary>
            Loads a wallet previously created by the user.
            </summary>
            <param name="request">The name of the wallet to load.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Controllers.WalletController.Recover(Stratis.Bitcoin.Features.Wallet.Models.WalletRecoveryRequest)">
            <summary>
            Recovers a wallet.
            </summary>
            <param name="request">The object containing the parameters used to recover a wallet.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Controllers.WalletController.RecoverViaExtPubKey(Stratis.Bitcoin.Features.Wallet.Models.WalletExtPubRecoveryRequest)">
            <summary>
            Recovers a wallet using only the extended public key.
            </summary>
            <param name="request">The object containing the parameters used to recover a wallet.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Controllers.WalletController.GetGeneralInfo(Stratis.Bitcoin.Features.Wallet.Models.WalletName)">
            <summary>
            Get some general info about a wallet.
            </summary>
            <param name="request">The name of the wallet.</param>
            <returns></returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Controllers.WalletController.GetHistory(Stratis.Bitcoin.Features.Wallet.Models.WalletHistoryRequest)">
            <summary>
            Retrieves the history of a wallet.
            </summary>
            <param name="request">The request parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Controllers.WalletController.GetBalance(Stratis.Bitcoin.Features.Wallet.Models.WalletBalanceRequest)">
            <summary>
            Gets the balance of a wallet.
            </summary>
            <param name="request">The request parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Controllers.WalletController.GetReceivedByAddress(Stratis.Bitcoin.Features.Wallet.Models.ReceivedByAddressRequest)">
            <summary>
            Gets the balance for an address.
            </summary>
            <param name="request">The request parameters.</param>
            <returns>The address balance for an address.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Controllers.WalletController.GetMaximumSpendableBalance(Stratis.Bitcoin.Features.Wallet.Models.WalletMaximumBalanceRequest)">
            <summary>
            Gets the maximum spendable balance on an account, along with the fee required to spend it.
            </summary>
            <param name="request">The request parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Controllers.WalletController.GetSpendableTransactions(Stratis.Bitcoin.Features.Wallet.Models.SpendableTransactionsRequest)">
            <summary>
            Gets the spendable transactions in an account, taking into account coin maturity and number of confirmations.
            </summary>
            <param name="request">The request parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Controllers.WalletController.GetTransactionFeeEstimate(Stratis.Bitcoin.Features.Wallet.Models.TxFeeEstimateRequest)">
            <summary>
            Gets a transaction fee estimate.
            Fee can be estimated by creating a <see cref="T:Stratis.Bitcoin.Features.Wallet.TransactionBuildContext"/> with no password
            and then building the transaction and retrieving the fee from the context.
            </summary>
            <param name="request">The transaction parameters.</param>
            <returns>The estimated fee for the transaction.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Controllers.WalletController.BuildTransaction(Stratis.Bitcoin.Features.Wallet.Models.BuildTransactionRequest)">
            <summary>
            Builds a transaction.
            </summary>
            <param name="request">The transaction parameters.</param>
            <returns>All the details of the transaction, including the hex used to execute it.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Controllers.WalletController.SendTransaction(Stratis.Bitcoin.Features.Wallet.Models.SendTransactionRequest)">
            <summary>
            Sends a transaction.
            </summary>
            <param name="request">The hex representing the transaction.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Controllers.WalletController.ListWalletsFiles">
            <summary>
            Lists all the wallet files found under the default folder.
            </summary>
            <returns>A list of the wallets files found.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Controllers.WalletController.CreateNewAccount(Stratis.Bitcoin.Features.Wallet.Models.GetUnusedAccountModel)">
            <summary>
            Creates a new account for a wallet.
            </summary>
            <returns>An account name.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Controllers.WalletController.ListAccounts(Stratis.Bitcoin.Features.Wallet.Models.ListAccountsModel)">
            <summary>
            Gets a list of accounts for the specified wallet.
            </summary>
            <returns>The list of accounts for the specified wallet</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Controllers.WalletController.GetUnusedAddress(Stratis.Bitcoin.Features.Wallet.Models.GetUnusedAddressModel)">
            <summary>
            Gets an unused address.
            </summary>
            <returns>The last created and unused address or creates a new address (in Base58 format).</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Controllers.WalletController.GetUnusedAddresses(Stratis.Bitcoin.Features.Wallet.Models.GetUnusedAddressesModel)">
            <summary>
            Gets the specified number of unused addresses.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Controllers.WalletController.GetAllAddresses(Stratis.Bitcoin.Features.Wallet.Models.GetAllAddressesModel)">
            <summary>
            Gets the specified number of unused addresses.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Controllers.WalletController.RemoveTransactions(Stratis.Bitcoin.Features.Wallet.Models.RemoveTransactionsModel)">
            <summary>
            Removed transactions from the wallet.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Controllers.WalletController.GetExtPubKey(Stratis.Bitcoin.Features.Wallet.Models.GetExtPubKeyModel)">
            <summary>
            Gets the extpubkey of the specified account.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Controllers.WalletController.Sync(Stratis.Bitcoin.Features.Wallet.Models.HashModel)">
            <summary>
            Request the node to sync back from a given block hash.
            This is for demo and testing use only.
            </summary>
            <param name="model">The hash of the block from which to start syncing.</param>
            <returns></returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Controllers.WalletController.SyncFromDate(Stratis.Bitcoin.Features.Wallet.Models.WalletSyncFromDateRequest)">
            <summary>
            Request the node to sync back from a given date.
            </summary>
            <param name="request">The model containing the date from which to start syncing.</param>
            <returns></returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Controllers.WalletController.SplitCoins(Stratis.Bitcoin.Features.Wallet.Models.SplitCoinsRequest)">
            <summary>Creates requested amount of UTXOs each of equal value.</summary>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.FeeType">
            <summary>
            An indicator of how fast a transaction will be accepted in a block.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.FeeType.Low">
            <summary>
            Slow.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.FeeType.Medium">
            <summary>
            Avarage.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.FeeType.High">
            <summary>
            Fast.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.FeeParser.ToConfirmations(Stratis.Bitcoin.Features.Wallet.FeeType)">
            <summary>
            Map a fee type to the number of confirmations
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.AccountHistory.Account">
            <summary>
            The account for which the history is retrieved.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.AccountHistory.History">
            <summary>
            The collection of history items.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.FlatHistory">
            <summary>
            A class that represents a flat view of the wallets history.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.FlatHistory.Address">
            <summary>
            The address associated with this UTXO.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.FlatHistory.Transaction">
            <summary>
            The transaction representing the UTXO.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.HdOperations">
            <summary>
            Class providing helper methods for working with Hierarchical Deterministic (HD) wallets.
            </summary>
            <seealso cref="!:https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki" />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.HdOperations.GeneratePublicKey(System.String,System.Int32,System.Boolean)">
            <summary>
            Generates an HD public key derived from an extended public key.
            </summary>
            <param name="accountExtPubKey">The extended public key used to generate child keys.</param>
            <param name="index">The index of the child key to generate.</param>
            <param name="isChange">A value indicating whether the public key to generate corresponds to a change address.</param>
            <returns>
            An HD public key derived from an extended public key.
            </returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.HdOperations.GetExtendedPrivateKey(NBitcoin.Key,System.Byte[],System.String,NBitcoin.Network)">
            <summary>
            Gets the extended private key for an account.
            </summary>
            <param name="privateKey">The private key from which to generate the extended private key.</param>
            <param name="chainCode">The chain code used in creating the extended private key.</param>
            <param name="hdPath">The HD path of the account for which to get the extended private key.</param>
            <param name="network">The network for which to generate this extended private key.</param>
            <returns></returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.HdOperations.GetExtendedPublicKey(NBitcoin.Key,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Gets the extended public key for an account.
            </summary>
            <param name="privateKey">The private key from which to generate the extended public key.</param>
            <param name="chainCode">The chain code used in creating the extended public key.</param>
            <param name="coinType">Type of the coin of the account for which to generate an extended public key.</param>
            <param name="accountIndex">Index of the account for which to generate an extended public key.</param>
            <returns>The extended public key for an account, used to derive child keys.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.HdOperations.GetExtendedPublicKey(NBitcoin.Key,System.Byte[],System.String)">
            <summary>
            Gets the extended public key corresponding to an HD path.
            </summary>
            <param name="privateKey">The private key from which to generate the extended public key.</param>
            <param name="chainCode">The chain code used in creating the extended public key.</param>
            <param name="hdPath">The HD path for which to get the extended public key.</param>
            <returns>The extended public key, used to derive child keys.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.HdOperations.GetAccountHdPath(System.Int32,System.Int32)">
            <summary>
            Gets the HD path of an account.
            </summary>
            <param name="coinType">Type of the coin this account is in.</param>
            <param name="accountIndex">Index of the account.</param>
            <returns>The HD path of an account.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.HdOperations.GetExtendedKey(System.String,System.String)">
            <summary>
            Gets the extended key generated by this mnemonic and passphrase.
            </summary>
            <param name="mnemonic">The mnemonic used to generate the key.</param>
            <param name="passphrase">The passphrase used in generating the key.</param>
            <returns>The extended key generated by this mnemonic and passphrase.</returns>
            <remarks>This key is sometimes referred to as the 'root seed' or the 'master key'.</remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.HdOperations.GetExtendedKey(NBitcoin.Mnemonic,System.String)">
            <summary>
            Gets the extended key generated by this mnemonic and passphrase.
            </summary>
            <param name="mnemonic">The mnemonic used to generate the key.</param>
            <param name="passphrase">The passphrase used in generating the key.</param>
            <returns>The extended key generated by this mnemonic and passphrase.</returns>
            <remarks>This key is sometimes referred to as the 'root seed' or the 'master key'.</remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.HdOperations.CreateHdPath(System.Int32,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Creates an address' HD path, according to BIP 44.
            </summary>
            <param name="coinType">Type of coin in the HD path.</param>
            <param name="accountIndex">Index of the account in the HD path.</param>
            <param name="isChange">A value indicating whether the HD path to generate corresponds to a change address.</param>
            <param name="addressIndex">Index of the address in the HD path.</param>
            <returns>The HD path.</returns>
            <remarks>Refer to <seealso cref="!:https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#path-levels"/> for the format of the HD path.</remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.HdOperations.GetCoinType(System.String)">
            <summary>
            Gets the type of coin this HD path is for.
            </summary>
            <param name="hdPath">The HD path.</param>
            <returns>The type of coin. <seealso cref="!:https://github.com/satoshilabs/slips/blob/master/slip-0044.md"/>.</returns>
            <exception cref="T:System.FormatException">An exception is thrown if the HD path is not well-formed.</exception>
            <remarks>Refer to <seealso cref="!:https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#path-levels"/> for the format of the HD path.</remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.HdOperations.IsChangeAddress(System.String)">
            <summary>
            Determines whether the HD path corresponds to a change address.
            </summary>
            <param name="hdPath">The HD path.</param>
            <returns>A value indicating if the HD path corresponds to a change address.</returns>
            <exception cref="T:System.FormatException">An exception is thrown if the HD path is not well-formed.</exception>
            <remarks>Refer to <seealso cref="!:https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki#path-levels"/> for the format of the HD path.</remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.HdOperations.DecryptSeed(System.String,System.String,NBitcoin.Network)">
            <summary>
            Decrypts the encrypted private key (seed).
            </summary>
            <param name="encryptedSeed">The encrypted seed to decrypt.</param>
            <param name="password">The password used to decrypt the encrypted seed.</param>
            <param name="network">The network this seed applies to.</param>
            <returns></returns>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.Helpers.SentTransactionItemModelComparer">
            <summary>
             Used for comparing a list of TransactionItemModel to each other.
            </summary>
            <remarks>
             This specific comparer has been made to filter out duplicate payment listings in the case of a transaction with multiple inputs.
             This causes multiple items inside the wallet data that all have the same amount, transaction/spending id and payment details.
             However not all fields on this model are equal to each other so we only compare the ones we need.
             See: https://github.com/stratisproject/Breeze/issues/175
            </remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Helpers.SentTransactionItemModelComparer.Equals(Stratis.Bitcoin.Features.Wallet.Models.TransactionItemModel,Stratis.Bitcoin.Features.Wallet.Models.TransactionItemModel)">
            <summary>
             Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type TransactionItemModel to compare.</param>
            <param name="y">The second object of type TransactionItemModel to compare.</param>
            <returns>true if the specified objects are equal; otherwise, false.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Helpers.SentTransactionItemModelComparer.GetHashCode(Stratis.Bitcoin.Features.Wallet.Models.TransactionItemModel)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The System.Object for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.Interfaces.IAddressBookManager">
            <summary>
            An interface providing operations on an address book.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IAddressBookManager.Initialize">
            <summary>
            Initializes the address book manager.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IAddressBookManager.GetAddressBook">
            <summary>
            Get the address book.
            </summary>
            <returns>The address book.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IAddressBookManager.AddNewAddress(System.String,System.String)">
            <summary>
            Add a new entry to the address book.
            </summary>
            <param name="label">A label uniquely identifying the entry.</param>
            <param name="address">The address.</param>
            <returns>The newly added entry in the address book.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IAddressBookManager.RemoveAddress(System.String)">
            <summary>
            Remove an entry from the address book.
            </summary>
            <param name="label">A label uniquely identifying the entry to remove.</param>
            <returns>The entry removed from the address book.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager">
            <summary>
            Interface for a manager providing operations on wallets.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.Start">
            <summary>
            Starts this wallet manager.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.Stop">
            <summary>
            Stops the wallet manager.
            <para>Internally it waits for async loops to complete before saving the wallets to disk.</para>
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.WalletTipHash">
            <summary>
            The last processed block.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.GetSpendableTransactionsInWallet(System.String,System.Int32)">
            <summary>
            Lists all spendable transactions from all accounts in the wallet.
            </summary>
            <returns>A collection of spendable outputs</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.GetSpendableTransactionsInWalletForStaking(System.String,System.Int32)">
            <summary>
            Lists all spendable transactions from the accounts in the wallet participating in staking.
            </summary>
            <returns>A collection of spendable outputs</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.GetValidStakingTemplates">
            <summary>
            Helps identify UTXO's that can participate in staking.
            </summary>
            <returns>A dictionary containing string and template pairs - e.g. { "P2PK", PayToPubkeyTemplate.Instance }</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.GetTransactionBuilderExtensionsForStaking">
            <summary>
            Returns additional transaction builder extensions to use for building staking transactions.
            </summary>
            <returns>Transaction builder extensions to use for building staking transactions.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.GetSpendableTransactionsInAccount(Stratis.Bitcoin.Features.Wallet.WalletAccountReference,System.Int32)">
            <summary>
            Lists all spendable transactions from the account specified in <see cref="T:Stratis.Bitcoin.Features.Wallet.WalletAccountReference"/>.
            </summary>
            <returns>A collection of spendable outputs that belong to the given account.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.CreateWallet(System.String,System.String,System.String,NBitcoin.Mnemonic)">
            <summary>
            Creates a wallet and persist it as a file on the local system.
            </summary>
            <param name="password">The password used to encrypt sensitive info.</param>
            <param name="name">The name of the wallet.</param>
            <param name="passphrase">The passphrase used in the seed.</param>
            <param name="mnemonic">The user's mnemonic for the wallet.</param>
            <returns>A mnemonic defining the wallet's seed used to generate addresses.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.LoadWallet(System.String,System.String)">
            <summary>
            Loads a wallet from a file.
            </summary>
            <param name="password">The user's password.</param>
            <param name="name">The name of the wallet.</param>
            <returns>The wallet.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.RecoverWallet(System.String,System.String,System.String,System.DateTime,System.String)">
            <summary>
            Recovers a wallet using mnemonic and password.
            </summary>
            <param name="password">The user's password.</param>
            <param name="name">The name of the wallet.</param>
            <param name="mnemonic">The user's mnemonic for the wallet.</param>
            <param name="passphrase">The passphrase used in the seed.</param>
            <param name="creationTime">The date and time this wallet was created.</param>
            <returns>The recovered wallet.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.RecoverWallet(System.String,NBitcoin.ExtPubKey,System.Int32,System.DateTime)">
            <summary>
            Recovers a wallet using extended public key and account index.
            </summary>
            <param name="name">The name of the wallet.</param>
            <param name="extPubKey">The extended public key.</param>
            <param name="accountIndex">The account number.</param>
            <param name="creationTime">The date and time this wallet was created.</param>
            <returns></returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.DeleteWallet">
            <summary>
            Deletes a wallet.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.GetUnusedAccount(System.String,System.String)">
            <summary>
            Gets an account that contains no transactions.
            </summary>
            <param name="walletName">The name of the wallet from which to get an account.</param>
            <param name="password">The password used to decrypt the private key.</param>
            <remarks>
            According to BIP44, an account at index (i) can only be created when the account
            at index (i - 1) contains transactions.
            </remarks>
            <returns>An unused account.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.GetUnusedAccount(Stratis.Bitcoin.Features.Wallet.Wallet,System.String)">
            <summary>
            Gets an account that contains no transactions.
            </summary>
            <param name="wallet">The wallet from which to get an account.</param>
            <param name="password">The password used to decrypt the private key.</param>
            <remarks>
            According to BIP44, an account at index (i) can only be created when the account
            at index (i - 1) contains transactions.
            </remarks>
            <returns>An unused account.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.GetUnusedAddress(Stratis.Bitcoin.Features.Wallet.WalletAccountReference)">
            <summary>
            Gets an address that contains no transaction.
            </summary>
            <param name="accountReference">The name of the wallet and account</param>
            <returns>An unused address or a newly created address, in Base58 format.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.GetUnusedChangeAddress(Stratis.Bitcoin.Features.Wallet.WalletAccountReference)">
            <summary>
            Gets the first change address that contains no transaction.
            </summary>
            <param name="accountReference">The name of the wallet and account.</param>
            <returns>An unused change address or a newly created change address, in Base58 format.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.GetUnusedAddresses(Stratis.Bitcoin.Features.Wallet.WalletAccountReference,System.Int32,System.Boolean)">
            <summary>
            Gets a collection of unused receiving or change addresses.
            </summary>
            <param name="accountReference">The name of the wallet and account.</param>
            <param name="count">The number of addresses to create.</param>
            <param name="isChange">A value indicating whether or not the addresses to get should be receiving or change addresses.</param>
            <returns>A list of unused addresses. New addresses will be created as necessary.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.GetHistory(System.String,System.String)">
            <summary>
            Gets the history of transactions contained in an account.
            If no account name is specified, history will be returned for all accounts in the wallet.
            </summary>
            <param name="walletName">The wallet name.</param>
            <param name="accountName">The account name.</param>
            <returns>Collection of address history and transaction pairs.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.GetHistory(Stratis.Bitcoin.Features.Wallet.HdAccount)">
            <summary>
            Gets the history of the transactions in addresses contained in this account.
            </summary>
            <param name="account">The account for which to get history.</param>
            <returns>The history for this account.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.GetBalances(System.String,System.String)">
            <summary>
            Gets the balance of transactions contained in an account.
            If no account name is specified, balances will be returned for all accounts in the wallet.
            </summary>
            <param name="walletName">The wallet name.</param>
            <param name="accountName">The account name.</param>
            <returns>Collection of account balances.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.GetAddressBalance(System.String)">
            <summary>
            Gets the balance of transactions for this specific address.
            </summary>
            <param name="address">The address to get the balance from.</param>
            <returns>The address balance for an address.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.GetWallet(System.String)">
            <summary>
            Gets some general information about a wallet.
            </summary>
            <param name="walletName">The name of the wallet.</param>
            <returns></returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.GetAccounts(System.String)">
            <summary>
            Gets a list of accounts.
            </summary>
            <param name="walletName">The name of the wallet to look into.</param>
            <returns></returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.LastBlockHeight">
            <summary>
            Gets the last block height.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.RemoveBlocks(NBitcoin.ChainedHeader)">
            <summary>
            Remove all the transactions in the wallet that are above this block height
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.ProcessBlock(NBitcoin.Block,NBitcoin.ChainedHeader)">
            <summary>
            Processes a block received from the network.
            </summary>
            <param name="block">The block.</param>
            <param name="chainedHeader">The blocks chain of headers.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.ProcessTransaction(NBitcoin.Transaction,System.Nullable{System.Int32},NBitcoin.Block,System.Boolean)">
            <summary>
            Processes a transaction received from the network.
            </summary>
            <param name="transaction">The transaction.</param>
            <param name="blockHeight">The height of the block this transaction came from. Null if it was not a transaction included in a block.</param>
            <param name="block">The block in which this transaction was included.</param>
            <param name="isPropagated">Transaction propagation state.</param>
            <returns>A value indicating whether this transaction affects the wallet.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.SaveWallet(Stratis.Bitcoin.Features.Wallet.Wallet)">
            <summary>
            Saves the wallet into the file system.
            </summary>
            <param name="wallet">The wallet to save.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.SaveWallets">
            <summary>
            Saves all the loaded wallets into the file system.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.GetWalletFileExtension">
            <summary>
            Gets the extension of the wallet files.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.GetWalletsNames">
            <summary>
            Gets all the wallets' names.
            </summary>
            <returns>A collection of the wallets' names.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.UpdateLastBlockSyncedHeight(Stratis.Bitcoin.Features.Wallet.Wallet,NBitcoin.ChainedHeader)">
            <summary>
            Updates the wallet with the height of the last block synced.
            </summary>
            <param name="wallet">The wallet to update.</param>
            <param name="chainedHeader">The height of the last block synced.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.UpdateLastBlockSyncedHeight(NBitcoin.ChainedHeader)">
            <summary>
            Updates all the loaded wallets with the height of the last block synced.
            </summary>
            <param name="chainedHeader">The height of the last block synced.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.GetWalletByName(System.String)">
            <summary>
            Gets a wallet given its name.
            </summary>
            <param name="walletName">The name of the wallet to get.</param>
            <returns>A wallet or null if it doesn't exist</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.GetFirstWalletBlockLocator">
            <summary>
            Gets the block locator of the first loaded wallet.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.GetWalletsFiles">
            <summary>
            Gets the list of the wallet filenames, along with the folder in which they're contained.
            </summary>
            <returns>The wallet filenames, along with the folder in which they're contained.</returns>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.ContainsWallets">
            <summary>
            Gets whether there are any wallet files loaded or not.
            </summary>
            <returns>Whether any wallet files are loaded.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.GetExtPubKey(Stratis.Bitcoin.Features.Wallet.WalletAccountReference)">
            <summary>
            Gets the extended public key of an account.
            </summary>
            <param name="accountReference">The account.</param>
            <returns>The extended public key.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.GetEarliestWalletHeight">
            <summary>
            Gets the lowest LastBlockSyncedHeight of all loaded wallet account roots.
            </summary>
            <returns>The lowest LastBlockSyncedHeight or null if there are no account roots yet.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.GetOldestWalletCreationTime">
            <summary>
            Gets the oldest wallet creation time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.RemoveTransactionsByIdsLocked(System.String,System.Collections.Generic.IEnumerable{NBitcoin.uint256})">
            <summary>
            Removes the specified transactions from the wallet and persist it.
            </summary>
            <param name="walletName">The name of the wallet to remove transactions from.</param>
            <param name="transactionsIds">The IDs of transactions to remove.</param>
            <returns>A list of objects made up of a transactions ID along with the time at which they were created.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager.RemoveAllTransactions(System.String)">
            <summary>
            Removes all the transactions from the wallet and persist it.
            </summary>
            <param name="walletName">The name of the wallet to remove transactions from.</param>
            <returns>A list of objects made up of a transactions ID along with the time at which they were created.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletSyncManager.Start">
            <summary>
            Starts the walletSyncManager.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletSyncManager.Stop">
            <summary>
            Stops the walletSyncManager.
            <para>
            We need to call <see cref="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletSyncManager.Stop"/> explicitly to check that the internal async loop isn't still running
            and subsequentlly dispose of it properly.
            </para>
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletSyncManager.ProcessBlock(NBitcoin.Block)">
            <summary>
            Processes a new block.
            </summary>
            <param name="block">The block to process.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletSyncManager.ProcessTransaction(NBitcoin.Transaction)">
            <summary>
            Processes a new transaction which is in a pending state (not included in a block).
            </summary>
            <param name="transaction">The transaction to process.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletSyncManager.SyncFromDate(System.DateTime)">
            <summary>
            Synchronize the wallet starting from the date passed as a parameter.
            </summary>
            <param name="date">The date from which to start the sync process.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletSyncManager.SyncFromHeight(System.Int32)">
            <summary>
            Synchronize the wallet starting from the height passed as a parameter.
            </summary>
            <param name="height">The height from which to start the sync process.</param>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletSyncManager.WalletTip">
            <summary>
            The current tip of the wallet.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletTransactionHandler.BuildTransaction(Stratis.Bitcoin.Features.Wallet.TransactionBuildContext)">
            <summary>
            Builds a new transaction based on information from the <see cref="T:Stratis.Bitcoin.Features.Wallet.TransactionBuildContext"/>.
            </summary>
            <param name="context">The context that is used to build a new transaction.</param>
            <returns>The new transaction.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletTransactionHandler.FundTransaction(Stratis.Bitcoin.Features.Wallet.TransactionBuildContext,NBitcoin.Transaction)">
            <summary>
            Adds inputs to a transaction until it has enough in value to meet its out value.
            </summary>
            <param name="context">The context associated with the current transaction being built.</param>
            <param name="transaction">The transaction that will have more inputs added to it.</param>
            <remarks>
            This will not modify existing inputs, and will add at most one change output to the outputs.
            No existing outputs will be modified unless <see cref="P:Stratis.Bitcoin.Features.Wallet.Recipient.SubtractFeeFromAmount"/> is specified.
            Note that inputs which were signed may need to be resigned after completion since in/outputs have been added.
            The inputs added may be signed depending on whether a <see cref="P:Stratis.Bitcoin.Features.Wallet.TransactionBuildContext.WalletPassword"/> is passed.
            Note that all existing inputs must have their previous output transaction be in the wallet.
            </remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletTransactionHandler.GetMaximumSpendableAmount(Stratis.Bitcoin.Features.Wallet.WalletAccountReference,Stratis.Bitcoin.Features.Wallet.FeeType,System.Boolean)">
            <summary>
            Calculates the maximum amount a user can spend in a single transaction, taking into account the fees required.
            </summary>
            <param name="accountReference">The account from which to calculate the amount.</param>
            <param name="feeType">The type of fee used to calculate the maximum amount the user can spend. The higher the fee, the smaller this amount will be.</param>
            <param name="allowUnconfirmed"><c>true</c> to include unconfirmed transactions in the calculation, <c>false</c> otherwise.</param>
            <returns>The maximum amount the user can spend in a single transaction, along with the fee required.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletTransactionHandler.EstimateFee(Stratis.Bitcoin.Features.Wallet.TransactionBuildContext)">
            <summary>
            Estimates the fee for the transaction based on information from the <see cref="T:Stratis.Bitcoin.Features.Wallet.TransactionBuildContext"/>.
            </summary>
            <param name="context">The context that is used to build a new transaction.</param>
            <returns>The estimated fee.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletTransactionHandler.CacheSecret(Stratis.Bitcoin.Features.Wallet.WalletAccountReference,System.String,System.TimeSpan)">
            <summary>
            Cache the secret for a specific wallet.
            If the secret is already in the cache extends its expiry according to <c>duration</c>.
            </summary>
            <param name="walletAccount">The account to cache the secret.</param>
            <param name="walletPassword">The password for the wallet.</param>
            <param name="duration">How long to cache secret for.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletTransactionHandler.ClearCachedSecret(Stratis.Bitcoin.Features.Wallet.WalletAccountReference)">
            <summary>
            Clears a secret that is stored in a cache for a specific wallet.
            </summary>
            <param name="walletAccount">The account to clear the cache for the secret.</param>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.Models.AddressBookModel">
            <summary>
            The model for the address book, usable by the API.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Models.AddressBookModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stratis.Bitcoin.Features.Wallet.Models.AddressBookModel"/> class.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.AddressBookModel.Addresses">
            <summary>
            A list of addresses.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.Models.AddressBookEntryModel">
            <summary>
            Represents an entry in the address book.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.AddressBookEntryModel.Address">
            <summary>
            The Base58 representation of this address.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.AddressBookEntryModel.Label">
            <summary>
            The label identifying this entry.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.Models.AddressesModel">
            <summary>
            A model representing a list of addresses the user has in a wallet account.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Models.AddressesModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Stratis.Bitcoin.Features.Wallet.Models.AddressesModel"/> class.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.AddressesModel.Addresses">
            <summary>
            A list of addresses.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.Models.AddressModel">
            <summary>
            Represents an address a user has in their wallet.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.AddressModel.Address">
            <summary>
            The Base58 representation of this address.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.AddressModel.IsUsed">
            <summary>
            A value indicating whether this address has been used in a transaction.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.AddressModel.IsChange">
            <summary>
            A value indicating whether this address is a change address.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.Models.GetTransactionDetailsModel">
            <summary>Transaction details model for RPC method gettransaction.</summary>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.Models.GetTransactionModel">
            <summary>Model for RPC method gettransaction.</summary>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.Models.MaxSpendableAmountModel">
            <summary>
            A model representing the maximum amount a use can spend, along with the required fee.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.MaxSpendableAmountModel.MaxSpendableAmount">
            <summary>
            Gets or sets the maximum spendable amount on an account.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.MaxSpendableAmountModel.Fee">
            <summary>
            Gets or sets the fee required the <see cref="P:Stratis.Bitcoin.Features.Wallet.Models.MaxSpendableAmountModel.MaxSpendableAmount"/>.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.Models.RemovedTransactionModel">
            <summary>
            Class containing details of a transaction successfully removed from the wallet.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.Models.WalletCreationRequest">
            <summary>
            Object used to create a new wallet
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.WalletCreationRequest.Password">
            <summary>
            This password is used to encrypt the wallet for secure storage. The password is required.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.WalletCreationRequest.Passphrase">
            <summary>
            This passphrase is used as an additional seed (word) joined together with the <see cref="P:Stratis.Bitcoin.Features.Wallet.Models.WalletCreationRequest.Mnemonic"/>.
            </summary>
            <remarks>
            Empty string is a valid passphrase.
            </remarks>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.WalletRecoveryRequest.Password">
            <summary>
            Supply the password that was used to create the wallet.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.WalletRecoveryRequest.Passphrase">
            <summary>
            Supply the passphrase that was used when account was created.
            </summary>
            <remarks>
            If the wallet was created before <see cref="P:Stratis.Bitcoin.Features.Wallet.Models.WalletRecoveryRequest.Passphrase"/> was available, set the passphrase to be the same as the password.
            </remarks>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.Models.WalletMaximumBalanceRequest">
            <summary>
            Model object to use as input to the Api request for getting the maximum spendable amount on an account.
            </summary>
            <seealso cref="T:Stratis.Bitcoin.Features.Wallet.Models.RequestModel" />
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.Models.ReceivedByAddressRequest">
            <summary>
            Model object to use as input to the Api request for getting the balance for an address.
            </summary>
            <seealso cref="T:Stratis.Bitcoin.Features.Wallet.Models.RequestModel" />
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.Models.TxFeeEstimateRequest">
            <summary>
            Model object for <see cref="M:Stratis.Bitcoin.Features.Wallet.Controllers.WalletController.GetTransactionFeeEstimate(Stratis.Bitcoin.Features.Wallet.Models.TxFeeEstimateRequest)"/> request.
            </summary>
            <seealso cref="T:Stratis.Bitcoin.Features.Wallet.Models.RequestModel" />
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.OutpointRequest.TransactionId">
            <summary>
            The transaction id.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.OutpointRequest.Index">
            <summary>
            The index of the output in the transaction.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.RecipientModel.DestinationAddress">
            <summary>
            The destination address.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.RecipientModel.Amount">
            <summary>
            The amount that will be sent.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Models.BuildTransactionRequest.Validate(System.ComponentModel.DataAnnotations.ValidationContext)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.Models.RemoveTransactionsModel">
            <summary>
            Model object to use as input to the Api request for removing transactions from a wallet.
            </summary>
            <seealso cref="T:Stratis.Bitcoin.Features.Wallet.Models.RequestModel" />
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.ListAccountsModel.WalletName">
            <summary>
            The name of the wallet for which to list the accounts.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.GetUnusedAddressModel.WalletName">
            <summary>
            The name of the wallet from which to get the address.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.GetUnusedAddressModel.AccountName">
            <summary>
            The name of the account for which to get the address.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.GetUnusedAccountModel.WalletName">
            <summary>
            The name of the wallet in which to create the account.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.GetUnusedAccountModel.Password">
            <summary>
            The password for this wallet.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.Models.WalletSyncFromDateRequest">
            <summary>
            Object used to synchronize a wallet
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.Models.AddressBookEntryRequest">
            <summary>
            Request object for adding an address to the address book.
            </summary>
            <seealso cref="T:Stratis.Bitcoin.Features.Wallet.Models.RequestModel" />
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.Models.SpendableTransactionsRequest">
            <summary>
            Model object to use as input to the Api request for getting the spendable transactions in an account.
            </summary>
            <seealso cref="T:Stratis.Bitcoin.Features.Wallet.Models.RequestModel" />
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.SpendableTransactionsRequest.MinConfirmations">
            <summary>
            The min number of confirmations required.
            To allow unconfirmed transactions, set this value to 0.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.SplitCoinsRequest.TotalAmountToSplit">
            <summary>The amount that will be sent.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.SpendableTransactionModel.Id">
            <summary>
            Transaction id.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.SpendableTransactionModel.Index">
            <summary>
            The index of the output in the transaction.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.SpendableTransactionModel.Address">
            <summary>
            The Base58 representation of this address.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.SpendableTransactionModel.IsChange">
            <summary>
            A value indicating whether this address is a change address.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.SpendableTransactionModel.Amount">
            <summary>
            The transaction amount.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.SpendableTransactionModel.CreationTime">
            <summary>
            Gets or sets the creation time.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.SpendableTransactionModel.Confirmations">
            <summary>
            The number of confirmations.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.Models.UnspentCoinModel">
            <summary>
            Model for Json response for listunspent RPC call.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.UnspentCoinModel.Id">
            <summary>
            Transaction id.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.UnspentCoinModel.Index">
            <summary>
            The index of the output in the transaction.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.UnspentCoinModel.Address">
            <summary>
            The Base58 representation of this address.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.UnspentCoinModel.Account">
            <summary>
            Account name.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.UnspentCoinModel.ScriptPubKeyHex">
            <summary>
            The output script paid, encoded as hex.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.UnspentCoinModel.RedeemScriptHex">
            <summary>
            If the output is a P2SH whose script belongs to this wallet, this is the redeem script.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.UnspentCoinModel.Amount">
            <summary>
            The transaction amount.
            Serialized in coins (BTC).
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.UnspentCoinModel.Confirmations">
            <summary>
            The number of confirmations.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.UnspentCoinModel.IsSpendable">
            <summary>
            Whether the private key or keys needed to spend this output are part of the wallet.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.UnspentCoinModel.IsSolvable">
            <summary>
            Whether the wallet knows how to spend this output.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.WalletGeneralInfoModel.CreationTime">
            <summary>
            The time this wallet was created.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.WalletGeneralInfoModel.LastBlockSyncedHeight">
            <summary>
            The height of the last block that was synced.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.WalletGeneralInfoModel.ChainTip">
            <summary>
            The total number of blocks.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.WalletGeneralInfoModel.IsChainSynced">
            <summary>
            Whether the chain is synced with the network.
            Only when this is true, can the client calculate a download percentage based on <see cref="P:Stratis.Bitcoin.Features.Wallet.Models.WalletGeneralInfoModel.ChainTip"/> and <see cref="P:Stratis.Bitcoin.Features.Wallet.Models.WalletGeneralInfoModel.LastBlockSyncedHeight"/>.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.WalletGeneralInfoModel.ConnectedNodes">
            <summary>
            The total number of nodes that we're connected to.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.TransactionItemModel.ToAddress">
            <summary>
            The Base58 representation of this address.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.TransactionItemModel.Payments">
            <summary>
            A list of payments made out in this transaction.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.TransactionItemModel.ConfirmedInBlock">
            <summary>
            The height of the block in which this transaction was confirmed.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.PaymentDetailModel.DestinationAddress">
            <summary>
            The Base58 representation of the destination  address.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.PaymentDetailModel.Amount">
            <summary>
            The transaction amount.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.Models.WalletSendTransactionModel">
            <summary>
            A model class to be returned when the user sends a transaction successfully.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.WalletSendTransactionModel.TransactionId">
            <summary>
            The transaction id.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.WalletSendTransactionModel.Outputs">
            <summary>
            The list of outputs in this transaction.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.Models.TransactionOutputModel">
            <summary>
            A simple transaction output.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.TransactionOutputModel.Address">
            <summary>
            The output address in Base58.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.TransactionOutputModel.Amount">
            <summary>
            The amount associated with the output.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Models.TransactionOutputModel.OpReturnData">
            <summary>
            The data encoded in the OP_RETURN script
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.Notifications.BlockObserver">
            <summary>
            Observer that receives notifications about the arrival of new <see cref="T:Stratis.Bitcoin.Primitives.ChainedHeaderBlock"/>s.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Notifications.BlockObserver.OnNextCore(Stratis.Bitcoin.Primitives.ChainedHeaderBlock)">
            <summary>
            Manages what happens when a new chained header block is received.
            </summary>
            <param name="chainedHeaderBlock">The new chained header block</param>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.Notifications.TransactionObserver">
            <summary>
            Observer that receives notifications about the arrival of new <see cref="T:NBitcoin.Transaction"/>s.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Notifications.TransactionObserver.OnNextCore(NBitcoin.Transaction)">
            <summary>
            Manages what happens when a new transaction is received.
            </summary>
            <param name="transaction">The new transaction</param>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.Recipient">
            <summary>
            Represents recipients of a payment, used in <see cref="M:Stratis.Bitcoin.Features.Wallet.WalletTransactionHandler.BuildTransaction(Stratis.Bitcoin.Features.Wallet.TransactionBuildContext)"/>.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Recipient.ScriptPubKey">
            <summary>
            The destination script.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Recipient.Amount">
            <summary>
            The amount that will be sent.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Recipient.SubtractFeeFromAmount">
            <summary>
            An indicator if the fee is subtracted from the current recipient.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.Wallet">
            <summary>
            A wallet.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.Wallet.AccountNamePattern">
            <summary>Default pattern for accounts in the wallet. The first account will be called 'account 0', then 'account 1' and so on.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.Wallet.SpecialPurposeAccountIndexesStart">
            <summary>Account numbers greater or equal to this number are reserved for special purpose account indexes.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.Wallet.NormalAccounts">
            <summary>Filter for identifying normal wallet accounts.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Wallet.#ctor">
            <summary>
            Initializes a new instance of the wallet.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Wallet.Name">
            <summary>
            The name of this wallet.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Wallet.IsExtPubKeyWallet">
            <summary>
            Flag indicating if it is a watch only wallet.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Wallet.EncryptedSeed">
            <summary>
            The seed for this wallet, password encrypted.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Wallet.ChainCode">
            <summary>
            The chain code.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Wallet.BlockLocator">
            <summary>
            Gets or sets the merkle path.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Wallet.Network">
            <summary>
            The network this wallet is for.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Wallet.CreationTime">
            <summary>
            The time this wallet was created.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.Wallet.AccountsRoot">
            <summary>
            The root of the accounts tree.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Wallet.GetAccountsByCoinType(Stratis.Bitcoin.Features.Wallet.CoinType,System.Func{Stratis.Bitcoin.Features.Wallet.HdAccount,System.Boolean})">
            <summary>
            Gets the accounts the wallet has for this type of coin.
            </summary>
            <param name="coinType">Type of the coin.</param>
            <param name="accountFilter">An optional filter for filtering the accounts being returned.</param>
            <returns>The accounts in the wallet corresponding to this type of coin.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Wallet.GetAccountByCoinType(System.String,Stratis.Bitcoin.Features.Wallet.CoinType)">
            <summary>
            Gets an account from the wallet's accounts.
            </summary>
            <param name="accountName">The name of the account to retrieve.</param>
            <param name="coinType">The type of the coin this account is for.</param>
            <returns>The requested account.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Wallet.SetLastBlockDetailsByCoinType(Stratis.Bitcoin.Features.Wallet.CoinType,NBitcoin.ChainedHeader)">
            <summary>
            Update the last block synced height and hash in the wallet.
            </summary>
            <param name="coinType">The type of the coin this account is for.</param>
            <param name="block">The block whose details are used to update the wallet.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Wallet.GetAllTransactionsByCoinType(Stratis.Bitcoin.Features.Wallet.CoinType)">
            <summary>
            Gets all the transactions by coin type.
            </summary>
            <param name="coinType">Type of the coin.</param>
            <returns></returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Wallet.GetAllPubKeysByCoinType(Stratis.Bitcoin.Features.Wallet.CoinType)">
            <summary>
            Gets all the pub keys contained in this wallet.
            </summary>
            <param name="coinType">Type of the coin.</param>
            <returns></returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Wallet.GetAllAddressesByCoinType(Stratis.Bitcoin.Features.Wallet.CoinType,System.Func{Stratis.Bitcoin.Features.Wallet.HdAccount,System.Boolean})">
            <summary>
            Gets all the addresses contained in this wallet.
            </summary>
            <param name="coinType">Type of the coin.</param>
            <param name="accountFilter">An optional filter for filtering the accounts being returned.</param>
            <returns>A list of all the addresses contained in this wallet.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Wallet.AddNewAccount(System.String,Stratis.Bitcoin.Features.Wallet.CoinType,System.DateTimeOffset,System.Nullable{System.Int32},System.String)">
            <summary>
            Adds an account to the current wallet.
            </summary>
            <remarks>
            The name given to the account is of the form "account (i)" by default, where (i) is an incremental index starting at 0.
            According to BIP44, an account at index (i) can only be created when the account at index (i - 1) contains at least one transaction.
            </remarks>
            <seealso cref="!:https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki"/>
            <param name="password">The password used to decrypt the wallet's <see cref="P:Stratis.Bitcoin.Features.Wallet.Wallet.EncryptedSeed"/>.</param>
            <param name="coinType">The type of coin this account is for.</param>
            <param name="accountCreationTime">Creation time of the account to be created.</param>
            <param name="accountIndex">The index at which an account will be created. If left null, a new account will be created after the last used one.</param>
            <param name="accountName">The name of the account to be created. If left null, an account will be created according to the <see cref="F:Stratis.Bitcoin.Features.Wallet.Wallet.AccountNamePattern"/>.</param>
            <returns>A new HD account.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Wallet.AddNewAccount(Stratis.Bitcoin.Features.Wallet.CoinType,NBitcoin.ExtPubKey,System.Int32,System.DateTimeOffset)">
            <summary>
            Adds an account to the current wallet.
            </summary>
            <remarks>
            The name given to the account is of the form "account (i)" by default, where (i) is an incremental index starting at 0.
            According to BIP44, an account at index (i) can only be created when the account at index (i - 1) contains at least one transaction.
            </remarks>
            <seealso cref="!:https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki"/>
            <param name="coinType">The type of coin this account is for.</param>
            <param name="extPubKey">The extended public key for the wallet<see cref="P:Stratis.Bitcoin.Features.Wallet.Wallet.EncryptedSeed"/>.</param>
            <param name="accountIndex">Zero-based index of the account to add.</param>
            <param name="accountCreationTime">Creation time of the account to be created.</param>
            <returns>A new HD account.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Wallet.GetFirstUnusedAccount(Stratis.Bitcoin.Features.Wallet.CoinType)">
            <summary>
            Gets the first account that contains no transaction.
            </summary>
            <returns>An unused account.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Wallet.ContainsAddress(Stratis.Bitcoin.Features.Wallet.HdAddress)">
            <summary>
            Determines whether the wallet contains the specified address.
            </summary>
            <param name="address">The address to check.</param>
            <returns>A value indicating whether the wallet contains the specified address.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Wallet.GetExtendedPrivateKeyForAddress(System.String,Stratis.Bitcoin.Features.Wallet.HdAddress)">
            <summary>
            Gets the extended private key for the given address.
            </summary>
            <param name="password">The password used to encrypt/decrypt sensitive info.</param>
            <param name="address">The address to get the private key for.</param>
            <returns>The extended private key.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.Wallet.GetAllSpendableTransactions(Stratis.Bitcoin.Features.Wallet.CoinType,System.Int32,System.Int32,System.Func{Stratis.Bitcoin.Features.Wallet.HdAccount,System.Boolean})">
            <summary>
            Lists all spendable transactions from all accounts in the wallet.
            </summary>
            <param name="coinType">Type of the coin to get transactions from.</param>
            <param name="currentChainHeight">Height of the current chain, used in calculating the number of confirmations.</param>
            <param name="confirmations">The number of confirmations required to consider a transaction spendable.</param>
            <param name="accountFilter">An optional filter for filtering the accounts being returned.</param>
            <returns>A collection of spendable outputs.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.AccountRoot">
            <summary>
            The root for the accounts for any type of coins.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.AccountRoot.#ctor">
            <summary>
            Initializes a new instance of the object.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.AccountRoot.CoinType">
            <summary>
            The type of coin, Bitcoin or Stratis.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.AccountRoot.LastBlockSyncedHeight">
            <summary>
            The height of the last block that was synced.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.AccountRoot.LastBlockSyncedHash">
            <summary>
            The hash of the last block that was synced.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.AccountRoot.Accounts">
            <summary>
            The accounts used in the wallet.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.AccountRoot.GetFirstUnusedAccount">
            <summary>
            Gets the first account that contains no transaction.
            </summary>
            <returns>An unused account</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.AccountRoot.GetAccountByName(System.String)">
            <summary>
            Gets the account matching the name passed as a parameter.
            </summary>
            <param name="accountName">The name of the account to get.</param>
            <returns>The HD account specified by the parameter.</returns>
            <exception cref="T:Stratis.Bitcoin.Features.Wallet.WalletException">An exception thrown if no account could be found.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.AccountRoot.AddNewAccount(System.String,System.String,System.Byte[],NBitcoin.Network,System.DateTimeOffset,System.Nullable{System.Int32},System.String)">
            <summary>
            Adds an account to the current account root using encrypted seed and password.
            </summary>
            <remarks>The name given to the account is of the form "account (i)" by default, where (i) is an incremental index starting at 0.
            According to BIP44, an account at index (i) can only be created when the account at index (i - 1) contains transactions.
            <seealso cref="!:https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki"/></remarks>
            <param name="password">The password used to decrypt the wallet's encrypted seed.</param>
            <param name="encryptedSeed">The encrypted private key for this wallet.</param>
            <param name="chainCode">The chain code for this wallet.</param>
            <param name="network">The network for which this account will be created.</param>
            <param name="accountCreationTime">Creation time of the account to be created.</param>
            <param name="accountIndex">The index at which an account will be created. If left null, a new account will be created after the last used one.</param>
            <param name="accountName">The name of the account to be created. If left null, an account will be created according to the <see cref="!:AccountNamePattern"/>.</param>
            <returns>A new HD account.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.AccountRoot.CreateAccount(System.String,System.String,System.Byte[],NBitcoin.Network,System.DateTimeOffset,System.Int32,System.String)">
            <summary>
            Create an account for a specific account index and account name pattern.
            </summary>
            <param name="password">The password used to decrypt the wallet's encrypted seed.</param>
            <param name="encryptedSeed">The encrypted private key for this wallet.</param>
            <param name="chainCode">The chain code for this wallet.</param>
            <param name="network">The network for which this account will be created.</param>
            <param name="accountCreationTime">Creation time of the account to be created.</param>
            <param name="newAccountIndex">The optional account index to use.</param>
            <param name="newAccountName">The optional account name to use.</param>
            <returns>A new HD account.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.AccountRoot.AddNewAccount(NBitcoin.ExtPubKey,System.Int32,NBitcoin.Network,System.DateTimeOffset)">
            <inheritdoc cref="!:AddNewAccount(string, string, byte[], Network, DateTimeOffset)"/>
            <summary>
            Adds an account to the current account root using extended public key and account index.
            </summary>
            <param name="accountExtPubKey">The extended public key for the account.</param>
            <param name="accountIndex">The zero-based account index.</param>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.HdAccount">
            <summary>
            An HD account's details.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.HdAccount.Index">
            <summary>
            The index of the account.
            </summary>
            <remarks>
            According to BIP44, an account at index (i) can only be created when the account
            at index (i - 1) contains transactions.
            </remarks>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.HdAccount.Name">
            <summary>
            The name of this account.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.HdAccount.HdPath">
            <summary>
            A path to the account as defined in BIP44.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.HdAccount.ExtendedPubKey">
            <summary>
            An extended pub key used to generate addresses.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.HdAccount.CreationTime">
            <summary>
            Gets or sets the creation time.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.HdAccount.ExternalAddresses">
            <summary>
            The list of external addresses, typically used for receiving money.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.HdAccount.InternalAddresses">
            <summary>
            The list of internal addresses, typically used to receive change.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.HdAccount.GetCoinType">
            <summary>
            Gets the type of coin this account is for.
            </summary>
            <returns>A <see cref="T:Stratis.Bitcoin.Features.Wallet.CoinType"/>.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.HdAccount.GetFirstUnusedReceivingAddress">
            <summary>
            Gets the first receiving address that contains no transaction.
            </summary>
            <returns>An unused address</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.HdAccount.GetFirstUnusedChangeAddress">
            <summary>
            Gets the first change address that contains no transaction.
            </summary>
            <returns>An unused address</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.HdAccount.GetFirstUnusedAddress(System.Boolean)">
            <summary>
            Gets the first receiving address that contains no transaction.
            </summary>
            <returns>An unused address</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.HdAccount.GetLastUsedAddress(System.Boolean)">
            <summary>
            Gets the last address that contains transactions.
            </summary>
            <param name="isChange">Whether the address is a change (internal) address or receiving (external) address.</param>
            <returns></returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.HdAccount.GetTransactionsById(NBitcoin.uint256)">
            <summary>
            Gets a collection of transactions by id.
            </summary>
            <param name="id">The identifier.</param>
            <returns></returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.HdAccount.GetSpendableTransactions">
            <summary>
            Gets a collection of transactions with spendable outputs.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.HdAccount.GetSpendableAmount">
            <summary>
            Get the accounts total spendable value for both confirmed and unconfirmed UTXO.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.HdAccount.FindAddressesForTransaction(System.Func{Stratis.Bitcoin.Features.Wallet.TransactionData,System.Boolean})">
            <summary>
            Finds the addresses in which a transaction is contained.
            </summary>
            <remarks>
            Returns a collection because a transaction can be contained in a change address as well as in a receive address (as a spend).
            </remarks>
            <param name="predicate">A predicate by which to filter the transactions.</param>
            <returns></returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.HdAccount.GetCombinedAddresses">
            <summary>
            Return both the external and internal (change) address from an account.
            </summary>
            <returns>All addresses that belong to this account.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.HdAccount.CreateAddresses(NBitcoin.Network,System.Int32,System.Boolean)">
            <summary>
            Creates a number of additional addresses in the current account.
            </summary>
            <remarks>
            The name given to the account is of the form "account (i)" by default, where (i) is an incremental index starting at 0.
            According to BIP44, an account at index (i) can only be created when the account at index (i - 1) contains at least one transaction.
            </remarks>
            <param name="network">The network these addresses will be for.</param>
            <param name="addressesQuantity">The number of addresses to create.</param>
            <param name="isChange">Whether the addresses added are change (internal) addresses or receiving (external) addresses.</param>
            <returns>The created addresses.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.HdAccount.GetSpendableTransactions(System.Int32,NBitcoin.Network,System.Int32)">
            <summary>
            Lists all spendable transactions in the current account.
            </summary>
            <param name="currentChainHeight">The current height of the chain. Used for calculating the number of confirmations a transaction has.</param>
            <param name="network">The network this account holds transactions for.</param>
            <param name="confirmations">The minimum number of confirmations required for transactions to be considered.</param>
            <returns>A collection of spendable outputs that belong to the given account.</returns>
            <remarks>Note that coinbase and coinstake transaction outputs also have to mature with a sufficient number of confirmations before
            they are considered spendable. This is independent of the confirmations parameter.</remarks>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.HdAddress">
            <summary>
            An HD address.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.HdAddress.Index">
            <summary>
            The index of the address.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.HdAddress.ScriptPubKey">
            <summary>
            The script pub key for this address.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.HdAddress.Pubkey">
            <summary>
            The script pub key for this address.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.HdAddress.Address">
            <summary>
            The Base58 representation of this address.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.HdAddress.HdPath">
            <summary>
            A path to the address as defined in BIP44.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.HdAddress.Transactions">
            <summary>
            A list of transactions involving this address.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.HdAddress.IsChangeAddress">
            <summary>
            Determines whether this is a change address or a receive address.
            </summary>
            <returns>
              <c>true</c> if it is a change address; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.HdAddress.UnspentTransactions">
            <summary>
            List all spendable transactions in an address.
            </summary>
            <returns>List of spendable transactions.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.HdAddress.GetSpendableAmount">
            <summary>
            Get the address total spendable value for both confirmed and unconfirmed UTXO.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.TransactionData">
            <summary>
            An object containing transaction data.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.TransactionData.Id">
            <summary>
            Transaction id.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.TransactionData.Amount">
            <summary>
            The transaction amount.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.TransactionData.IsCoinBase">
            <summary>
            A value indicating whether this is a coinbase transaction or not.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.TransactionData.IsCoinStake">
            <summary>
            A value indicating whether this is a coinstake transaction or not.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.TransactionData.Index">
            <summary>
            The index of this scriptPubKey in the transaction it is contained.
            </summary>
            <remarks>
            This is effectively the index of the output, the position of the output in the parent transaction.
            </remarks>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.TransactionData.BlockHeight">
            <summary>
            The height of the block including this transaction.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.TransactionData.BlockHash">
            <summary>
            The hash of the block including this transaction.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.TransactionData.CreationTime">
            <summary>
            Gets or sets the creation time.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.TransactionData.MerkleProof">
            <summary>
            Gets or sets the Merkle proof for this transaction.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.TransactionData.ScriptPubKey">
            <summary>
            The script pub key for this address.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.TransactionData.Hex">
            <summary>
            Hexadecimal representation of this transaction.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.TransactionData.IsPropagated">
            <summary>
            Propagation state of this transaction.
            </summary>
            <remarks>Assume it's <c>true</c> if the field is <c>null</c>.</remarks>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.TransactionData.SpendingDetails">
            <summary>
            The details of the transaction in which the output referenced in this transaction is spent.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.TransactionData.IsConfirmed">
            <summary>
            Determines whether this transaction is confirmed.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.TransactionData.IsSpendable">
            <summary>
            Indicates an output is spendable.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.PaymentDetails">
            <summary>
            An object representing a payment.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.PaymentDetails.DestinationScriptPubKey">
            <summary>
            The script pub key of the destination address.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.PaymentDetails.DestinationAddress">
            <summary>
            The Base58 representation of the destination  address.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.PaymentDetails.Amount">
            <summary>
            The transaction amount.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.SpendingDetails.TransactionId">
            <summary>
            The id of the transaction in which the output referenced in this transaction is spent.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.SpendingDetails.Payments">
            <summary>
            A list of payments made out in this transaction.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.SpendingDetails.BlockHeight">
            <summary>
            The height of the block including this transaction.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.SpendingDetails.IsCoinStake">
            <summary>
            A value indicating whether this is a coin stake transaction or not.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.SpendingDetails.CreationTime">
            <summary>
            Gets or sets the creation time.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.SpendingDetails.Hex">
            <summary>
            Hexadecimal representation of this spending transaction.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.SpendingDetails.IsSpentConfirmed">
            <summary>
            Determines whether this transaction being spent is confirmed.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.UnspentOutputReference">
            <summary>
            Represents an UTXO that keeps a reference to <see cref="T:Stratis.Bitcoin.Features.Wallet.HdAddress"/> and <see cref="T:Stratis.Bitcoin.Features.Wallet.HdAccount"/>.
            </summary>
            <remarks>
            This is useful when an UTXO needs access to its HD properties like the HD path when reconstructing a private key.
            </remarks>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.UnspentOutputReference.Account">
            <summary>
            The account associated with this UTXO
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.UnspentOutputReference.Address">
            <summary>
            The address associated with this UTXO
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.UnspentOutputReference.Transaction">
            <summary>
            The transaction representing the UTXO.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.UnspentOutputReference.Confirmations">
            <summary>
            Number of confirmations for this UTXO.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.UnspentOutputReference.ToOutPoint">
            <summary>
            Convert the <see cref="T:Stratis.Bitcoin.Features.Wallet.TransactionData"/> to an <see cref="T:NBitcoin.OutPoint"/>
            </summary>
            <returns>The corresponding <see cref="T:NBitcoin.OutPoint"/>.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletExtensions.IsDownloaded(NBitcoin.ConcurrentChain)">
            <summary>
            Determines whether the chain is downloaded and up to date.
            </summary>
            <param name="chain">The chain.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletExtensions.GetHeightAtTime(NBitcoin.ConcurrentChain,System.DateTime)">
            <summary>
            Gets the height of the first block created at or after this date.
            </summary>
            <param name="chain">The chain of blocks.</param>
            <param name="date">The date.</param>
            <returns>The height of the first block created after the date.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.BaseWalletFeature">
            <summary>
            Common base class for any feature replacing the <see cref="T:Stratis.Bitcoin.Features.Wallet.WalletFeature" />.
            </summary>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.WalletFeature">
            <summary>
            Wallet feature for the full node.
            </summary>
            <seealso cref="T:Stratis.Bitcoin.Builder.Feature.FullNodeFeature" />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletFeature.#ctor(Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletSyncManager,Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletManager,Stratis.Bitcoin.Features.Wallet.Interfaces.IAddressBookManager,Stratis.Bitcoin.Signals.Signals,NBitcoin.ConcurrentChain,Stratis.Bitcoin.Connection.IConnectionManager,Stratis.Bitcoin.Features.Wallet.Broadcasting.BroadcasterBehavior,Stratis.Bitcoin.Configuration.NodeSettings,Stratis.Bitcoin.Features.Wallet.WalletSettings,Stratis.Bitcoin.Utilities.INodeStats)">
            <summary>
            Initializes a new instance of the <see cref="T:Stratis.Bitcoin.Features.Wallet.WalletFeature"/> class.
            </summary>
            <param name="walletSyncManager">The synchronization manager for the wallet, tasked with keeping the wallet synced with the network.</param>
            <param name="walletManager">The wallet manager.</param>
            <param name="addressBookManager">The address book manager.</param>
            <param name="signals">The signals responsible for receiving blocks and transactions from the network.</param>
            <param name="chain">The chain of blocks.</param>
            <param name="connectionManager">The connection manager.</param>
            <param name="broadcasterBehavior">The broadcaster behavior.</param>
            <param name="nodeSettings">The settings for the node.</param>
            <param name="walletSettings">The settings for the wallet.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletFeature.PrintHelp(NBitcoin.Network)">
            <summary>
            Prints command-line help.
            </summary>
            <param name="network">The network to extract values from.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletFeature.BuildDefaultConfigurationFile(System.Text.StringBuilder,NBitcoin.Network)">
            <summary>
            Get the default configuration.
            </summary>
            <param name="builder">The string builder to add the settings to.</param>
            <param name="network">The network to base the defaults off.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletFeature.InitializeAsync">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletFeature.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.FullNodeBuilderWalletExtension">
            <summary>
            A class providing extension methods for <see cref="T:Stratis.Bitcoin.Builder.IFullNodeBuilder"/>.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.WalletFeePolicy.maxTxFee">
            <summary>Maximum transaction fee.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.WalletFeePolicy.minTxFee">
            <summary>
             Fees smaller than this (in satoshi) are considered zero fee (for transaction creation)
             Override with -mintxfee
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.WalletFeePolicy.fallbackFee">
            <summary>
             If fee estimation does not have enough data to provide estimates, use this fee instead.
             Has no effect if not using fee estimation
             Override with -fallbackfee
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.WalletFeePolicy.payTxFee">
            <summary>
            Transaction fee set by the user
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.WalletFeePolicy.minRelayTxFee">
            <summary>
            Min Relay Tx Fee
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletFeePolicy.#ctor(Stratis.Bitcoin.Configuration.NodeSettings)">
            <summary>
            Constructs a wallet fee policy.
            </summary>
            <param name="nodeSettings">Settings for the the node.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletFeePolicy.Start">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletFeePolicy.Stop">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletFeePolicy.GetRequiredFee(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletFeePolicy.GetMinimumFee(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletFeePolicy.GetMinimumFee(System.Int32,System.Int32,NBitcoin.Money)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletFeePolicy.GetFeeRate(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.WalletManager">
            <summary>
            A manager providing operations on wallets.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.WalletManager.WalletRecoveryAccountsCount">
            <summary>Quantity of accounts created in a wallet file when a wallet is restored.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.WalletManager.WalletCreationAccountsCount">
            <summary>Quantity of accounts created in a wallet file when a wallet is created.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.WalletManager.WalletFileExtension">
            <summary>File extension for wallet files.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.WalletManager.WalletSavetimeIntervalInMinutes">
            <summary>Timer for saving wallet files to the file system.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.WalletManager.lockObject">
            <summary>
            A lock object that protects access to the <see cref="T:Stratis.Bitcoin.Features.Wallet.Wallet"/>.
            Any of the collections inside Wallet must be synchronized using this lock.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.WalletManager.asyncLoop">
            <summary>The async loop we need to wait upon before we can shut down this manager.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.WalletManager.asyncLoopFactory">
            <summary>Factory for creating background async loop tasks.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.WalletManager.Wallets">
            <summary>Gets the list of wallets.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.WalletManager.coinType">
            <summary>The type of coin used in this manager.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.WalletManager.network">
            <summary>Specification of the network the node runs on - regtest/testnet/mainnet.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.WalletManager.chain">
            <summary>The chain of headers.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.WalletManager.nodeLifetime">
            <summary>Global application life cycle control - triggers when application shuts down.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.WalletManager.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.WalletManager.fileStorage">
            <summary>An object capable of storing <see cref="T:Stratis.Bitcoin.Features.Wallet.Wallet"/>s to the file system.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.WalletManager.broadcasterManager">
            <summary>The broadcast manager.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.WalletManager.dateTimeProvider">
            <summary>Provider of time functions.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.WalletManager.walletSettings">
            <summary>The settings for the wallet feature.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.WalletManager.scriptAddressReader">
            <summary>The settings for the wallet feature.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.CreateAddressFromScriptLookup">
            <summary>
            Creates the <see cref="T:Stratis.Bitcoin.Features.Wallet.ScriptToAddressLookup"/> object to use.
            </summary>
            <remarks>
            Override this method and the <see cref="T:Stratis.Bitcoin.Features.Wallet.ScriptToAddressLookup"/> object to provide a custom keys lookup.
            </remarks>
            <returns>A new <see cref="T:Stratis.Bitcoin.Features.Wallet.ScriptToAddressLookup"/> object for use by this class.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.GetValidStakingTemplates">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.Stop">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.CreateWallet(System.String,System.String,System.String,NBitcoin.Mnemonic)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.LoadWallet(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.RecoverWallet(System.String,System.String,System.String,System.DateTime,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.RecoverWallet(System.String,NBitcoin.ExtPubKey,System.Int32,System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.GetUnusedAccount(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.GetUnusedAccount(Stratis.Bitcoin.Features.Wallet.Wallet,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.GetUnusedAddress(Stratis.Bitcoin.Features.Wallet.WalletAccountReference)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.GetUnusedChangeAddress(Stratis.Bitcoin.Features.Wallet.WalletAccountReference)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.GetUnusedAddresses(Stratis.Bitcoin.Features.Wallet.WalletAccountReference,System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.GetWalletsFiles">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.GetHistory(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.GetHistory(Stratis.Bitcoin.Features.Wallet.HdAccount)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.GetBalances(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.GetAddressBalance(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.GetWallet(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.GetAccounts(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.LastBlockHeight">
            <inheritdoc />
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.WalletManager.ContainsWallets">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.LastReceivedBlockHash">
            <summary>
            Gets the hash of the last block received by the wallets.
            </summary>
            <returns>Hash of the last block received by the wallets.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.GetSpendableTransactionsInWallet(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.GetSpendableTransactionsInAccount(Stratis.Bitcoin.Features.Wallet.WalletAccountReference,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.RemoveBlocks(NBitcoin.ChainedHeader)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.ProcessBlock(NBitcoin.Block,NBitcoin.ChainedHeader)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.ProcessTransaction(NBitcoin.Transaction,System.Nullable{System.Int32},NBitcoin.Block,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.AddTransactionToWallet(NBitcoin.Transaction,NBitcoin.TxOut,System.Nullable{System.Int32},NBitcoin.Block,System.Boolean)">
            <summary>
            Adds a transaction that credits the wallet with new coins.
            This method is can be called many times for the same transaction (idempotent).
            </summary>
            <param name="transaction">The transaction from which details are added.</param>
            <param name="utxo">The unspent output to add to the wallet.</param>
            <param name="blockHeight">Height of the block.</param>
            <param name="block">The block containing the transaction to add.</param>
            <param name="isPropagated">Propagation state of the transaction.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.AddSpendingTransactionToWallet(NBitcoin.Transaction,System.Collections.Generic.IEnumerable{NBitcoin.TxOut},NBitcoin.uint256,System.Nullable{System.Int32},System.Nullable{System.Int32},NBitcoin.Block)">
            <summary>
            Mark an output as spent, the credit of the output will not be used to calculate the balance.
            The output will remain in the wallet for history (and reorg).
            </summary>
            <param name="transaction">The transaction from which details are added.</param>
            <param name="paidToOutputs">A list of payments made out</param>
            <param name="spendingTransactionId">The id of the transaction containing the output being spent, if this is a spending transaction.</param>
            <param name="spendingTransactionIndex">The index of the output in the transaction being referenced, if this is a spending transaction.</param>
            <param name="blockHeight">Height of the block.</param>
            <param name="block">The block containing the transaction to add.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.DeleteWallet">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.SaveWallets">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.SaveWallet(Stratis.Bitcoin.Features.Wallet.Wallet)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.GetWalletFileExtension">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.UpdateLastBlockSyncedHeight(NBitcoin.ChainedHeader)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.UpdateLastBlockSyncedHeight(Stratis.Bitcoin.Features.Wallet.Wallet,NBitcoin.ChainedHeader)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.GenerateWalletFile(System.String,System.String,System.Byte[],System.Nullable{System.DateTimeOffset})">
            <summary>
            Generates the wallet file.
            </summary>
            <param name="name">The name of the wallet.</param>
            <param name="encryptedSeed">The seed for this wallet, password encrypted.</param>
            <param name="chainCode">The chain code.</param>
            <param name="creationTime">The time this wallet was created.</param>
            <returns>The wallet object that was saved into the file system.</returns>
            <exception cref="T:Stratis.Bitcoin.Features.Wallet.WalletException">Thrown if wallet cannot be created.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.GenerateExtPubKeyOnlyWalletFile(System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            Generates the wallet file without private key and chain code.
            For use with only the extended public key.
            </summary>
            <param name="name">The name of the wallet.</param>
            <param name="creationTime">The time this wallet was created.</param>
            <returns>The wallet object that was saved into the file system.</returns>
            <exception cref="T:Stratis.Bitcoin.Features.Wallet.WalletException">Thrown if wallet cannot be created.</exception>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.Load(Stratis.Bitcoin.Features.Wallet.Wallet)">
            <summary>
            Loads the wallet to be used by the manager.
            </summary>
            <param name="wallet">The wallet to load.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.LoadKeysLookupLock">
            <summary>
            Loads the keys and transactions we're tracking in memory for faster lookups.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.UpdateKeysLookupLocked(System.Collections.Generic.IEnumerable{Stratis.Bitcoin.Features.Wallet.HdAddress})">
            <summary>
            Update the keys and transactions we're tracking in memory for faster lookups.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.AddInputKeysLookupLocked(Stratis.Bitcoin.Features.Wallet.TransactionData)">
            <summary>
            Add to the list of unspent outputs kept in memory for faster lookups.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.RemoveInputKeysLookupLock(Stratis.Bitcoin.Features.Wallet.TransactionData)">
            <summary>
            Remove from the list of unspent outputs kept in memory.
            </summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.GetWalletsNames">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.GetWalletByName(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.GetFirstWalletBlockLocator">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.GetEarliestWalletHeight">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.GetOldestWalletCreationTime">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.RemoveTransactionsByIdsLocked(System.String,System.Collections.Generic.IEnumerable{NBitcoin.uint256})">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.RemoveAllTransactions(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletManager.UpdateWhenChainDownloaded(System.Collections.Generic.IEnumerable{Stratis.Bitcoin.Features.Wallet.Wallet},System.DateTime)">
            <summary>
            Updates details of the last block synced in a wallet when the chain of headers finishes downloading.
            </summary>
            <param name="wallets">The wallets to update when the chain has downloaded.</param>
            <param name="date">The creation date of the block with which to update the wallet.</param>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.WalletRPCController.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.WalletRPCController.fullNode">
            <summary>Full node.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.WalletRPCController.broadcasterManager">
            <summary>Wallet broadcast manager.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.WalletRPCController.walletManager">
            <summary>Wallet manager.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.WalletRPCController.walletTransactionHandler">
            <summary>Wallet transaction handler.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletRPCController.SendTransactionAsync(System.String)">
            <summary>
            Broadcasts a raw transaction from hex to local node and network.
            </summary>
            <param name="hex">Raw transaction in hex.</param>
            <returns>The transaction hash.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletRPCController.GetNewAddress(System.String,System.String)">
            <summary>
            RPC method that gets a new address for receiving payments.
            Uses the first wallet and account.
            </summary>
            <param name="account">Parameter is deprecated.</param>
            <param name="addressType">Address type, currently only 'legacy' is supported.</param>
            <returns>The new address.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletRPCController.GetBalance(System.String,System.Int32)">
            <summary>
            RPC method that returns the total available balance.
            The available balance is what the wallet considers currently spendable.
            
            Uses the first wallet and account.
            </summary>
            <param name="accountName">Remains for backward compatibility. Must be excluded or set to "*" or "". Deprecated in latest bitcoin core (0.17.0).</param>
            <param name="minConfirmations">Only include transactions confirmed at least this many times. (default=0)</param>
            <returns>Total spendable balance of the wallet.</returns>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletRPCController.GetTransaction(System.String)">
            <summary>
            RPC method to return transaction info from the wallet.
            Uses the first wallet and account.
            </summary>
            <param name="txid">Transaction identifier to find.</param>
            <returns>Transaction information.</returns>
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.WalletSettings">
            <summary>
            Configuration related to the wallet.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.WalletSettings.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.WalletSettings.SaveTransactionHex">
            <summary>
            A value indicating whether the transactions hex representations should be saved in the wallet file.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.WalletSettings.IsLightWallet">
            <summary>
            A value indicating whether the wallet being run is the light wallet or the full wallet.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.WalletSettings.UnusedAddressesBuffer">
            <summary>Size of the buffer of unused addresses maintained in an account.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletSettings.#ctor(Stratis.Bitcoin.Configuration.NodeSettings)">
            <summary>
            Initializes an instance of the object from the node configuration.
            </summary>
            <param name="nodeSettings">The node configuration.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletSettings.PrintHelp(NBitcoin.Network)">
            <summary>
            Displays wallet configuration help information on the console.
            </summary>
            <param name="network">Not used.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletSettings.BuildDefaultConfigurationFile(System.Text.StringBuilder,NBitcoin.Network)">
            <summary>
            Get the default configuration.
            </summary>
            <param name="builder">The string builder to add the settings to.</param>
            <param name="network">The network to base the defaults off.</param>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.WalletSyncManager.logger">
            <summary>Instance logger.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.WalletSyncManager.nodeLifetime">
            <summary>Global application life cycle control - triggers when application shuts down.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.WalletSyncManager.blocksQueue">
            <summary>Queue which contains blocks that should be processed by <see cref="T:Stratis.Bitcoin.Features.Wallet.WalletManager"/>.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.WalletSyncManager.blocksQueueSize">
            <summary>Current <see cref="F:Stratis.Bitcoin.Features.Wallet.WalletSyncManager.blocksQueue"/> size in bytes.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.WalletSyncManager.maxQueueSizeReached">
            <summary>Flag to determine when the <see cref="F:Stratis.Bitcoin.Features.Wallet.WalletSyncManager.MaxQueueSize"/> is reached.</summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.WalletSyncManager.MaxQueueSize">
            <summary>Limit <see cref="F:Stratis.Bitcoin.Features.Wallet.WalletSyncManager.blocksQueue"/> size to 100MB.</summary>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletSyncManager.Start">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletSyncManager.Stop">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletSyncManager.OnProcessBlockAsync(NBitcoin.Block,System.Threading.CancellationToken)">
            <summary>Called when a <see cref="T:NBitcoin.Block"/> is added to the <see cref="F:Stratis.Bitcoin.Features.Wallet.WalletSyncManager.blocksQueue"/>.
            Depending on the <see cref="P:Stratis.Bitcoin.Features.Wallet.WalletSyncManager.WalletTip"/> and incoming block height, this method will decide whether the <see cref="T:NBitcoin.Block"/> will be processed by the <see cref="T:Stratis.Bitcoin.Features.Wallet.WalletManager"/>.
            </summary>
            <param name="block">Block to be processed.</param>
            <param name="cancellationToken">The cancellation token.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletSyncManager.ProcessBlock(NBitcoin.Block)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletSyncManager.ProcessTransaction(NBitcoin.Transaction)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletSyncManager.SyncFromDate(System.DateTime)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletSyncManager.SyncFromHeight(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletSyncManager.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Stratis.Bitcoin.Features.Wallet.WalletTransactionHandler">
            <summary>
            A handler that has various functionalities related to transaction operations.
            </summary>
            <remarks>
            This will uses the <see cref="T:Stratis.Bitcoin.Features.Wallet.Interfaces.IWalletFeePolicy"/> and the <see cref="T:NBitcoin.TransactionBuilder"/>.
            TODO: Move also the broadcast transaction to this class
            TODO: Implement lockUnspents
            TODO: Implement subtractFeeFromOutputs
            </remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletTransactionHandler.BuildTransaction(Stratis.Bitcoin.Features.Wallet.TransactionBuildContext)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletTransactionHandler.FundTransaction(Stratis.Bitcoin.Features.Wallet.TransactionBuildContext,NBitcoin.Transaction)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletTransactionHandler.GetMaximumSpendableAmount(Stratis.Bitcoin.Features.Wallet.WalletAccountReference,Stratis.Bitcoin.Features.Wallet.FeeType,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletTransactionHandler.EstimateFee(Stratis.Bitcoin.Features.Wallet.TransactionBuildContext)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletTransactionHandler.CacheSecret(Stratis.Bitcoin.Features.Wallet.WalletAccountReference,System.String,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletTransactionHandler.ClearCachedSecret(Stratis.Bitcoin.Features.Wallet.WalletAccountReference)">
            <inheritdoc />
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletTransactionHandler.InitializeTransactionBuilder(Stratis.Bitcoin.Features.Wallet.TransactionBuildContext)">
            <summary>
            Initializes the context transaction builder from information in <see cref="T:Stratis.Bitcoin.Features.Wallet.TransactionBuildContext"/>.
            </summary>
            <param name="context">Transaction build context.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletTransactionHandler.AddSecrets(Stratis.Bitcoin.Features.Wallet.TransactionBuildContext)">
            <summary>
            Load's all the private keys for each of the <see cref="T:Stratis.Bitcoin.Features.Wallet.HdAddress"/> in <see cref="P:Stratis.Bitcoin.Features.Wallet.TransactionBuildContext.UnspentOutputs"/>
            </summary>
            <param name="context">The context associated with the current transaction being built.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletTransactionHandler.FindChangeAddress(Stratis.Bitcoin.Features.Wallet.TransactionBuildContext)">
            <summary>
            Find the next available change address.
            </summary>
            <param name="context">The context associated with the current transaction being built.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletTransactionHandler.AddCoins(Stratis.Bitcoin.Features.Wallet.TransactionBuildContext)">
            <summary>
            Find all available outputs (UTXO's) that belong to <see cref="P:Stratis.Bitcoin.Features.Wallet.WalletAccountReference.AccountName"/>.
            Then add them to the <see cref="P:Stratis.Bitcoin.Features.Wallet.TransactionBuildContext.UnspentOutputs"/>.
            </summary>
            <param name="context">The context associated with the current transaction being built.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletTransactionHandler.AddRecipients(Stratis.Bitcoin.Features.Wallet.TransactionBuildContext)">
            <summary>
            Add recipients to the <see cref="T:NBitcoin.TransactionBuilder"/>.
            </summary>
            <param name="context">The context associated with the current transaction being built.</param>
            <remarks>
            Add outputs to the <see cref="T:NBitcoin.TransactionBuilder"/> based on the <see cref="T:Stratis.Bitcoin.Features.Wallet.Recipient"/> list.
            </remarks>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletTransactionHandler.AddFee(Stratis.Bitcoin.Features.Wallet.TransactionBuildContext)">
            <summary>
            Use the <see cref="T:NBitcoin.FeeRate"/> from the <see cref="F:Stratis.Bitcoin.Features.Wallet.WalletTransactionHandler.walletFeePolicy"/>.
            </summary>
            <param name="context">The context associated with the current transaction being built.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.WalletTransactionHandler.AddOpReturnOutput(Stratis.Bitcoin.Features.Wallet.TransactionBuildContext)">
            <summary>
            Add extra unspendable output to the transaction if there is anything in OpReturnData.
            </summary>
            <param name="context">The context associated with the current transaction being built.</param>
        </member>
        <member name="M:Stratis.Bitcoin.Features.Wallet.TransactionBuildContext.#ctor(NBitcoin.Network)">
            <summary>
            Initialize a new instance of a <see cref="T:Stratis.Bitcoin.Features.Wallet.TransactionBuildContext"/>
            </summary>
            <param name="network">The network for which this transaction will be built.</param>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.TransactionBuildContext.AccountReference">
            <summary>
            The wallet account to use for building a transaction.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.TransactionBuildContext.Recipients">
            <summary>
            The recipients to send Bitcoin to.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.TransactionBuildContext.FeeType">
            <summary>
            An indicator to estimate how much fee to spend on a transaction.
            </summary>
            <remarks>
            The higher the fee the faster a transaction will get in to a block.
            </remarks>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.TransactionBuildContext.MinConfirmations">
            <summary>
            The minimum number of confirmations an output must have to be included as an input.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.TransactionBuildContext.UnspentOutputs">
            <summary>
            Coins that are available to be spent.
            </summary>
        </member>
        <member name="F:Stratis.Bitcoin.Features.Wallet.TransactionBuildContext.TransactionBuilder">
            <summary>
            The builder used to build the current transaction.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.TransactionBuildContext.ChangeAddress">
            <summary>
            The change address, where any remaining funds will be sent to.
            </summary>
            <remarks>
            A Bitcoin has to spend the entire UTXO, if total value is greater then the send target
            the rest of the coins go in to a change address that is under the senders control.
            </remarks>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.TransactionBuildContext.TransactionFee">
            <summary>
            The total fee on the transaction.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.TransactionBuildContext.WalletPassword">
            <summary>
            The password that protects the wallet in <see cref="T:Stratis.Bitcoin.Features.Wallet.WalletAccountReference"/>.
            </summary>
            <remarks>
            TODO: replace this with System.Security.SecureString (https://github.com/dotnet/corefx/tree/master/src/System.Security.SecureString)
            More info (https://github.com/dotnet/corefx/issues/1387)
            </remarks>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.TransactionBuildContext.SelectedInputs">
            <summary>
            The inputs that must be used when building the transaction.
            </summary>
            <remarks>
            The inputs are required to be part of the wallet.
            </remarks>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.TransactionBuildContext.AllowOtherInputs">
            <summary>
            If false, allows unselected inputs, but requires all selected inputs be used.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.TransactionBuildContext.OverrideFeeRate">
            <summary>
            Allows the context to specify a <see cref="T:NBitcoin.FeeRate"/> when building a transaction.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.TransactionBuildContext.Shuffle">
            <summary>
            Shuffles transaction inputs and outputs for increased privacy.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.TransactionBuildContext.OpReturnData">
            <summary>
            Optional data to be added as an extra OP_RETURN transaction output.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.TransactionBuildContext.OpReturnAmount">
            <summary>
            Optional amount to add to the OP_RETURN transaction output.
            </summary>
        </member>
        <member name="P:Stratis.Bitcoin.Features.Wallet.TransactionBuildContext.Sign">
            <summary>
            Whether the transaction should be signed or not.
            </summary>
        </member>
    </members>
</doc>
